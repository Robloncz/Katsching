Directory: katschingv2

Directory Structure:
```
.
├── .gitignore
├── .eslintignore
├── .graphqlconfig.yml
├── .vscode
│   └── .vscode/settings.json
├── AWSCLIV2.pkg
├── README.md
├── amplify
│   ├── amplify/#current-cloud-backend
│   │   ├── amplify/#current-cloud-backend/amplify-meta.json
│   │   │   └── amplify/#current-cloud-backend/api/katsching
│   │   │       ├── amplify/#current-cloud-backend/api/katsching/cli-inputs.json
│   │   │       ├── amplify/#current-cloud-backend/api/katsching/parameters.json
│   │   │       ├── amplify/#current-cloud-backend/api/katsching/resolvers
│   │   │       │   └── amplify/#current-cloud-backend/api/katsching/resolvers/README.md
│   │   │       ├── amplify/#current-cloud-backend/api/katsching/schema.graphql
│   │   │       ├── amplify/#current-cloud-backend/api/katsching/stacks
│   │   │       │   └── amplify/#current-cloud-backend/api/katsching/stacks/CustomResources.json
│   │   │       └── amplify/#current-cloud-backend/api/katsching/transform.conf.json
│   │   │   └── amplify/#current-cloud-backend/auth/katschingf6175214
│   │   │       └── amplify/#current-cloud-backend/auth/katschingf6175214/cli-inputs.json
│   │   ├── amplify/#current-cloud-backend/backend-config.json
│   │   │   └── amplify/#current-cloud-backend/function/katsching7c491de0PostConfirmation
│   │   │       ├── amplify/#current-cloud-backend/function/katsching7c491de0PostConfirmation/amplify.state
│   │   │       ├── amplify/#current-cloud-backend/function/katsching7c491de0PostConfirmation/custom-policies.json
│   │   │       ├── amplify/#current-cloud-backend/function/katsching7c491de0PostConfirmation/function-parameters.json
│   │   │       ├── amplify/#current-cloud-backend/function/katsching7c491de0PostConfirmation/katsching7c491de0PostConfirmation-cloudformation-template.json
│   │   │       ├── amplify/#current-cloud-backend/function/katsching7c491de0PostConfirmation/parameters.json
│   │   │       └── amplify/#current-cloud-backend/function/katsching7c491de0PostConfirmation/src
│   │   │           ├── amplify/#current-cloud-backend/function/katsching7c491de0PostConfirmation/src/add-to-group.js
│   │   │           ├── amplify/#current-cloud-backend/function/katsching7c491de0PostConfirmation/src/event.json
│   │   │           ├── amplify/#current-cloud-backend/function/katsching7c491de0PostConfirmation/src/index.js
│   │   │           ├── amplify/#current-cloud-backend/function/katsching7c491de0PostConfirmation/src/package.json
│   │   │           ├── amplify/#current-cloud-backend/function/katsching7c491de0PostConfirmation/src/pnpm-lock.yaml
│   │   │           └── amplify/#current-cloud-backend/function/katsching7c491de0PostConfirmation/src/yarn.lock
│   │   └── amplify/#current-cloud-backend/tags.json
│   ├── amplify/.config
│   │   ├── amplify/.config/local-aws-info.json
│   │   ├── amplify/.config/local-env-info.json
│   │   └── amplify/.config/project-config.json
│   ├── amplify/README.md
│   ├── amplify/backend
│   │   ├── amplify/backend/amplify-meta.json
│   │   ├── amplify/backend/api 2
│   │   │   └── amplify/backend/api 2/katsching
│   │   │       ├── amplify/backend/api 2/katsching/build
│   │   │       ├── amplify/backend/api 2/katsching/cli-inputs.json
│   │   │       ├── amplify/backend/api 2/katsching/parameters.json
│   │   │       ├── amplify/backend/api 2/katsching/resolvers
│   │   │       │   ├── amplify/backend/api 2/katsching/resolvers/README.md
│   │   │       │   └── amplify/backend/api 2/katsching/resolvers/addKatschings.js
│   │   │       ├── amplify/backend/api 2/katsching/schema.graphql
│   │   │       ├── amplify/backend/api 2/katsching/stacks
│   │   │       │   └── amplify/backend/api 2/katsching/stacks/CustomResources.json
│   │   │       └── amplify/backend/api 2/katsching/transform.conf.json
│   │   │   └── amplify/backend/auth/katschingf6175214
│   │   │       └── amplify/backend/auth/katschingf6175214/cli-inputs.json
│   │   ├── amplify/backend/backend-config.json
│   │   │   └── amplify/backend/function/katsching7c491de0PostConfirmation
│   │   │       ├── amplify/backend/function/katsching7c491de0PostConfirmation/custom-policies.json
│   │   │       ├── amplify/backend/function/katsching7c491de0PostConfirmation/function-parameters.json
│   │   │       ├── amplify/backend/function/katsching7c491de0PostConfirmation/katsching7c491de0PostConfirmation-cloudformation-template.json
│   │   │       ├── amplify/backend/function/katsching7c491de0PostConfirmation/parameters.json
│   │   │       └── amplify/backend/function/katsching7c491de0PostConfirmation/src
│   │   │           ├── amplify/backend/function/katsching7c491de0PostConfirmation/src/add-to-group.js
│   │   │           ├── amplify/backend/function/katsching7c491de0PostConfirmation/src/event.json
│   │   │           ├── amplify/backend/function/katsching7c491de0PostConfirmation/src/index.js
│   │   │           ├── amplify/backend/function/katsching7c491de0PostConfirmation/src/package.json
│   │   │           ├── amplify/backend/function/katsching7c491de0PostConfirmation/src/pnpm-lock.yaml
│   │   │           └── amplify/backend/function/katsching7c491de0PostConfirmation/src/yarn.lock
│   │   └── amplify/backend/tags.json
│   ├── amplify/cli.json
│   ├── amplify/hooks
│   │   └── amplify/hooks/README.md
│   └── amplify/team-provider-info.json
├── package-lock.json
├── package.json
├── public
│   ├── public/favicon.ico
│   ├── public/ico.png
│   ├── public/index.html
│   ├── public/logo192.png
│   ├── public/logo512.png
│   ├── public/manifest.json
│   └── public/robots.txt
├── saved.graphql
└── src
    ├── src/App.css
    ├── src/App.js
    ├── src/App.test.js
    ├── src/AppContent.js
    ├── src/WhatsApp.svg
    ├── src/alt.png
    ├── src/components
    │   ├── src/components/AuthenticatorStyles.css
    │   ├── src/components/katsching
    │   │   ├── src/components/katsching/AddPlayer.css
    │   │   ├── src/components/katsching/AddPlayer.js
    │   │   ├── src/components/katsching/BeerConfetti.css
    │   │   ├── src/components/katsching/BeerConfetti.js
    │   │   ├── src/components/katsching/HistoryTable.css
    │   │   ├── src/components/katsching/HistoryTable.js
    │   │   ├── src/components/katsching/KatschingPopup.css
    │   │   ├── src/components/katsching/KatschingPopup.js
    │   │   ├── src/components/katsching/KatschingTable.css
    │   │   ├── src/components/katsching/KatschingTable.js
    │   │   └── src/components/katsching/emoji-mart.css
    │   └── src/components/statistiken
    │       ├── src/components/statistiken/statistics.css
    │       └── src/components/statistiken/statistics.js
    ├── src/graphql
    │   ├── src/graphql/mutations.js
    │   ├── src/graphql/queries.js
    │   ├── src/graphql/schema.json
    │   └── src/graphql/subscriptions.js
    ├── src/index.css
    ├── src/index.js
    ├── src/logo.svg
    ├── src/mockData.js
    ├── src/models
    │   ├── src/models/index.d.ts
    │   ├── src/models/index.js
    │   ├── src/models/schema.d.ts
    │   └── src/models/schema.js
    ├── src/setupTests.js
    ├── src/ui-components
    │   ├── src/ui-components/DataRow.d.ts
    │   ├── src/ui-components/DataRow.jsx
    │   ├── src/ui-components/KatschingPopup.d.ts
    │   ├── src/ui-components/KatschingPopup.jsx
    │   ├── src/ui-components/KatschingRowsContent.d.ts
    │   ├── src/ui-components/KatschingRowsContent.jsx
    │   ├── src/ui-components/KatschingTable.d.ts
    │   ├── src/ui-components/KatschingTable.jsx
    │   ├── src/ui-components/index.js
    │   ├── src/ui-components/studioTheme.js
    │   ├── src/ui-components/studioTheme.js.d.ts
    │   └── src/ui-components/utils.js
    ├── src/📊.png
    └── src/📖.png
```

Contents of AWSCLIV2.pkg:
```
[Could not decode file contents]

```

Contents of .graphqlconfig.yml:
```
projects:
  katsching:
    schemaPath: src/graphql/schema.json
    includes:
      - src/graphql/**/*.js
    excludes:
      - ./amplify/**
    extensions:
      amplify:
        codeGenTarget: javascript
        generatedFileName: ''
        docsFilePath: src/graphql
extensions:
  amplify:
    version: 3

```

Contents of .eslintignore:
```
amplify-codegen-temp/models/models
src/models/models

```

Contents of .vscode/settings.json:
```
{
  "files.exclude": {
    "amplify/.config": true,
    "amplify/**/*-parameters.json": true,
    "amplify/**/amplify.state": true,
    "amplify/**/transform.conf.json": true,
    "amplify/#current-cloud-backend": true,
    "amplify/backend/amplify-meta.json": true,
    "amplify/backend/awscloudformation": true
  }
}
```

Contents of src/📖.png:
```
[Could not decode file contents]

```

Contents of src/mockData.js:
```
export const mockPlayers = [
    { id: '1', name: 'Player 1 👑', katschings: 5, lastKatsching: '2023-03-01T12:00:00Z' },
    { id: '2', name: 'Player 2 🎭', katschings: 3, lastKatsching: '2023-03-02T14:30:00Z' },
    { id: '3', name: 'Player 3 🌟', katschings: 7, lastKatsching: '2023-03-03T09:15:00Z' },
  ];
  
  export const mockHistory = [
    { id: '1', playerId: '1', time: '2023-03-01T12:00:00Z', event: 'Player 1 got a Katsching', comments: 'Great job!' },
    { id: '2', playerId: '2', time: '2023-03-02T14:30:00Z', event: 'Player 2 got a Katsching', comments: 'Keep it up!' },
    { id: '3', playerId: '3', time: '2023-03-03T09:15:00Z', event: 'Player 3 got a Katsching', comments: 'Awesome!' },
  ];
```

Contents of src/App.css:
```
@import url('https://fonts.googleapis.com/css2?family=Irish+Grover&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Montserrat&display=swap');

:root {
  --primary-color: #DCDEE0 !important;
  --secondary-color: #89949F !important; /* Change this to your desired color */
  --gradient-top-bottom: linear-gradient(to bottom, var(--primary-color), var(--secondary-color)) !important;
}
body {
  background-image: var(--gradient-top-bottom) !important;
}


.App-header {
  display: flex;           /* Enables flexbox layout */
  align-items: center;     /* Vertically centers the items */
  justify-content: center; /* Centers the items horizontally */
  text-align: center;      /* Keeps text centered within its container */
  padding: 10px;
  font-size: calc(10px + 2vmin) !important;
  padding-bottom: 0px !important;
}

.App-title {
  font-family: 'Irish Grover', cursive;
  font-size: 2.5rem;
  margin-right: 20px;      /* Adds space between the title and the logo */
}
.App {
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  justify-content: center !important;
}

.App-logo {
  height: 12vmin  !important;
  pointer-events: visibleFill  !important;
  animation: App-logo-spin infinite 10s linear  !important;
  padding-bottom: 0px !important;
}



@keyframes App-logo-spin {
  from {
    transform: rotate(0deg) ;
  }
  to {
    transform: rotate(360deg) ;
  }
}

.mainscreen-card {
  background-color: rgba(255, 255, 255, 0) !important;
}

/* Table Styling */
.table-container {
  width: 95vw !important;
  height: 50hw !important;
  padding: 11px 20px !important;
  background: #dcdee0 !important;
  display: flex !important;
  flex-direction: column !important;
  justify-content: flex-start !important;
  align-items: flex-start !important;
  gap: 1px !important;
  border-radius: 10px !important; /* add round edges */
  overflow-x: auto;
}

.table-header {
  display: flex !important;
  align-items: center !important;
  width: 100% !important;
}

.table-header-cell {
  flex: 1 !important;
  display: flex !important;
  justify-content: center !important; /* Center the contents */
  align-items: center !important; /* Center the contents */
  background: #dcdee0 !important;
  height: 18px !important;
  padding: 0 15px !important;
  white-space: nowrap !important; /* Prevent text from breaking into multiple lines */
}

.table-header-cell:last-child {
  width: 0px !important;
}

.table-header-text {
  text-align: center !important;
  color: #0d1a26 !important;
  font-size: 16px !important;
  font-family: 'Irish Grover' !important;
  font-weight: 700 !important;
  text-decoration: underline !important;
  line-height: 18px !important;
  word-wrap: break-word !important;
}

/* Table Styles */
.table-row {
  display: flex !important;
  align-items: center !important; /* Center the contents */
  width: 100% !important;
}

.table-cell {
  flex: 1 !important; /* This makes the cells take up equal space */
  display: flex !important;
  justify-content: center !important; /* Center the contents */
  align-items: center !important; /* Center the contents */
  background: #dcdee0 !important;
  padding: 0 15px !important;
  font-family: 'Montserrat' !important;
  color: #0d1a26 !important;
  font-size: 16px !important;
  font-weight: 400 !important;
  line-height: 18px !important;
  word-wrap: normal !important;
  white-space: nowrap !important; /* Prevent text from breaking into multiple lines */
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  
}

.table-header-cell:first-child {
  justify-content: flex-start !important; /* Align the first cell to the left */
}

.table-cell:first-child {
  justify-content: flex-start !important; /* Align the first cell to the left */
}
/* Add Player Button Styling */
.add-player-button-container {
  width: 100% !important;
  display: flex !important;
  justify-content: center !important;
  margin-bottom: 10px !important;
  align-items: center !important;
}

.add-player-button {
  padding: 10px 20px !important;
  /* add distance */
  margin-top: 20px !important;
  background: #EFF0F0 !important;
  border-radius: 23px !important;
  color: black !important;
  font-size: 12px !important;
  font-family: 'Montserrat' !important;
  font-weight: 500 !important;
  cursor: pointer !important;
}

.copy-to-clipboard-button {
  padding: 10px 20px !important;
  /* add distance */
  margin-top: 20px !important;
  margin-left: 5px !important;
  background: #EFF0F0 !important;
  border-radius: 23px !important;
  color: black !important;
  font-size: 12px !important;
  font-family: 'Montserrat' !important;
  font-weight: 500 !important;
  cursor: pointer !important;
  justify-content: center !important;
  z-index: 999 !important;
}
.update-button { 
  justify-content: center !important;
  border: none !important;
  font-size: 15px !important;
  height: auto !important;
  font-family: "Montserrat" !important;
  font-weight: 300 !important;
  background-color: rgba(255, 255, 255, 0) !important;
  border-radius: 30%;
}

/* Add this to your existing CSS */
.katsching-container {
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  gap: 10px !important; /* Adjust the gap as needed */
}

div.katsching-counter{
  align-items: left !important;
  width: 10px !important;
}
.add-katsching-button {
  background: #EFF0F0 !important;
  border-radius: 30% !important;
  width: 24px !important;
  height: 24px !important;
  display: flex !important;
  justify-content: rechts !important; /* Center the contents */
  align-items: center !important; /* Center the contents */
  cursor: pointer !important;
  margin-left: 0 !important;
}



/* History Table Styling */
.history-table-container {
  width: 95vw !important;
  padding: 11px 20px !important;
  background: #dcdee0 !important;
  display: flex !important;
  flex-direction: column !important;
  justify-content: flex-start !important;
  align-items: flex-start !important;
  gap: 1px !important;
  border-radius: 10px !important; /* Add round edges */
  margin-top: 20px !important; /* Add some space above the history table */
  z-index: 1 !important;
  overflow: hidden !important; /* Ensure the container does not expand */
  max-height: 300px !important; /* Set a maximum height */
}

.history-table-header {
  display: flex !important;
  align-items: center !important;
  width: 100% !important;
}

.history-table-header-cell {
  flex: 1 !important;
  display: flex !important;
  justify-content: center !important; /* Center the contents */
  align-items: center !important; /* Center the contents */
  background: #dcdee0 !important;
  height: 18px !important;
  padding: 0 15px !important;
  white-space: nowrap !important; /* Prevent text from breaking into multiple lines */
}

.history-table-header-cell:first-child {
  justify-content: flex-start !important; /* Align the first cell to the left */
  flex: 2 !important;
}


.history-table-header-cell:last-child {
  justify-content: flex-end !important; /* Align the last cell to the right */
}

.history-table-header-text {
  text-align: center !important;
  color: #0d1a26 !important;
  font-size: 12px !important;
  font-family: 'Irish Grover' !important;
  font-weight: 700 !important;
  text-decoration: underline !important;
  line-height: 18px !important;
  word-wrap: break-word !important;
}


/* History Table Row Styles */
.history-table-row {
  display: flex !important;
  align-items: center !important;
  width: 100% !important;
  background: #EFF0F0 !important;
  box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.25) !important;
  padding: 10px !important;
  border-radius: 5px !important;
  margin-top: 5px !important;
  height: auto !important;
}


.history-table-cell {
  flex: 1 !important; /* Allow cells to grow and shrink */
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  padding: 0 15px !important;
  font-family: 'Montserrat' !important;
  color: #0d1a26 !important;
  font-size: 16px !important;
  font-weight: 400 !important;
  line-height: 18px !important;
  white-space: normal !important;
  overflow-wrap: break-word !important;
  word-break: break-all !important;
  height: auto !important;
}



.history-table-cell:last-child {
  flex-grow: 2 !important; /* Allow the last cell to grow more */
  white-space: normal !important; /* Allow text to wrap */
  height: auto !important;
  overflow-wrap: break-word !important;
}

.copy-container {
  position: relative;
  z-index: 999;
}

.copy-notification {
  z-index: 10000;
  position: absolute;
  top: -40px;
  font-family: "Irish Grover";
  left: 50%;
  transform: translateX(-50%);
  background: linear-gradient(90deg, #AE2828 0%, #947B23 10%, #8AA421 20%, #1EAB35 30%, #1AA55A 40%, #1BCCB6 50%, #1966C0 60%, #671FAF 70%, #BB188D 80%, #DD124F 90%, #D80C0C 100%);
  color: rgb(255, 255, 255);
  font-weight: bold;
  padding: 5px 10px;
  border-radius: 5px;
  animation: popUp 0.5s ease-out;
  white-space: nowrap; /* Prevent text from wrapping */
  overflow: hidden; /* Hide overflow content */
  text-overflow: ellipsis; /* Add ellipsis (...) if text overflows */
}


@keyframes popUp {
  0% {
    opacity: 0;
    transform: translateX(-50%) translateY(20px);
  }
  50% {
    opacity: 1;
    transform: translateX(-50%) translateY(-10px);
  }
  100% {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }
}


/* Specific Last Table Header Styling */
.MuiTableCell-head:last-child {
  text-align: center !important; /* Align the text to the right for the last header cell */
  padding-right: 15px !important; /* Add some right padding */
}

.table-container .MuiTableCell-root {
  white-space: nowrap; /* Prevent text from wrapping */
  overflow: visible; /* Hide any overflow */
  text-overflow: ellipsis; /* Add ellipsis for overflowed text */
  /* grow with cell size */
  flex-grow: 1;
  /* center text */
  text-align: center;
  /* padding */
  margin: 10px;
}

@media (max-width: 768px) {
  .MuiTableCell-root {
    font-size: 12px; /* Smaller font for smaller screens */
    padding: 6px;
  }
}

.whatsapp-button {
  padding: 10px !important;
  margin-top: 20px !important;
  margin-left: 5px !important;
  background: #25D366 !important; /* WhatsApp green color */
  border-radius: 50% !important; /* Make it circular */
  color: white !important;
  cursor: pointer !important;
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  z-index: 999 !important;
  border: none !important;
  width: 40px !important; /* Set a fixed width */
  height: 40px !important; /* Set a fixed height */
}

.whatsapp-icon {
  width: 36px !important;
  height: 36px !important;
  fill: white !important;
}

/* Adjust the copy-container to align items */
.copy-container {
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
}

/* Adjust the existing copy-to-clipboard-button if needed */
.copy-to-clipboard-button {
  /* ... existing styles ... */
  height: 40px !important; /* Match the height of the WhatsApp button */
}

.history-selection-container {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 20px; /* Add top margin to align with other elements */
  margin-left: 5px; /* Add left margin to align with other buttons */

  border-radius: 23px; /* Match the border radius of buttons */
  padding: 5px 10px; /* Add padding for a consistent look */
  font-family: 'Montserrat', sans-serif;
  font-size: 14px;
  color: #304050;
}

#numEntries {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  background-color: #EFF0F0;
  border: 1px solid #ccc;
  border-radius: 4px;
  padding: 5px;
  font-family: 'Montserrat', sans-serif;
  font-size: 14px;
  color: #304050;
  cursor: pointer;
  outline: none;
  transition: border-color 0.3s ease;
  margin-left: 5px;

}

#numEntries:hover {
  border-color: #89949F;
}

#numEntries:focus {
  border-color: #304050;
}

.menu-container {
  position: absolute;
  top: 20px;
  left: 20px;
  z-index: 1000;
}

.menu-icon {
  font-size: 24px;
  cursor: pointer;
  color: #4a4b4d;
}

.sandwich-menu {
  position: absolute;
  top: 40px;
  left: 0;
  background-color: rgba(255, 255, 255, 0.541);
  border: 1px solid #dfe1e5;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
}

.sandwich-menu a {
  padding: 10px 20px;
  text-decoration: none;
  color: #333;
}

.sandwich-menu a:hover {
  background-color: #f8f9fa;
}

.sign-out-link {

}

.sign-out-link:hover {
  background-color: #f8f9fa;
}

```

Contents of src/index.js:
```
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import { Amplify } from 'aws-amplify';
import config from './amplifyconfiguration.json';

// Configure Amplify with the custom settings
Amplify.configure(config);

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals

```

Contents of src/index.css:
```
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

```

Contents of src/alt.png:
```
[Could not decode file contents]

```

Contents of src/WhatsApp.svg:
```
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 175.216 175.552"><defs><linearGradient id="b" x1="85.915" x2="86.535" y1="32.567" y2="137.092" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#57d163"/><stop offset="1" stop-color="#23b33a"/></linearGradient><filter id="a" width="1.115" height="1.114" x="-.057" y="-.057" color-interpolation-filters="sRGB"><feGaussianBlur stdDeviation="3.531"/></filter></defs><path fill="#b3b3b3" d="m54.532 138.45 2.235 1.324c9.387 5.571 20.15 8.518 31.126 8.523h.023c33.707 0 61.139-27.426 61.153-61.135.006-16.335-6.349-31.696-17.895-43.251A60.75 60.75 0 0 0 87.94 25.983c-33.733 0-61.166 27.423-61.178 61.13a60.98 60.98 0 0 0 9.349 32.535l1.455 2.312-6.179 22.558zm-40.811 23.544L24.16 123.88c-6.438-11.154-9.825-23.808-9.821-36.772.017-40.556 33.021-73.55 73.578-73.55 19.681.01 38.154 7.669 52.047 21.572s21.537 32.383 21.53 52.037c-.018 40.553-33.027 73.553-73.578 73.553h-.032c-12.313-.005-24.412-3.094-35.159-8.954zm0 0" filter="url(#a)"/><path fill="#fff" d="m12.966 161.238 10.439-38.114a73.42 73.42 0 0 1-9.821-36.772c.017-40.556 33.021-73.55 73.578-73.55 19.681.01 38.154 7.669 52.047 21.572s21.537 32.383 21.53 52.037c-.018 40.553-33.027 73.553-73.578 73.553h-.032c-12.313-.005-24.412-3.094-35.159-8.954z"/><path fill="url(#linearGradient1780)" d="M87.184 25.227c-33.733 0-61.166 27.423-61.178 61.13a60.98 60.98 0 0 0 9.349 32.535l1.455 2.312-6.179 22.559 23.146-6.069 2.235 1.324c9.387 5.571 20.15 8.518 31.126 8.524h.023c33.707 0 61.14-27.426 61.153-61.135a60.75 60.75 0 0 0-17.895-43.251 60.75 60.75 0 0 0-43.235-17.929z"/><path fill="url(#b)" d="M87.184 25.227c-33.733 0-61.166 27.423-61.178 61.13a60.98 60.98 0 0 0 9.349 32.535l1.455 2.313-6.179 22.558 23.146-6.069 2.235 1.324c9.387 5.571 20.15 8.517 31.126 8.523h.023c33.707 0 61.14-27.426 61.153-61.135a60.75 60.75 0 0 0-17.895-43.251 60.75 60.75 0 0 0-43.235-17.928z"/><path fill="#fff" fill-rule="evenodd" d="M68.772 55.603c-1.378-3.061-2.828-3.123-4.137-3.176l-3.524-.043c-1.226 0-3.218.46-4.902 2.3s-6.435 6.287-6.435 15.332 6.588 17.785 7.506 19.013 12.718 20.381 31.405 27.75c15.529 6.124 18.689 4.906 22.061 4.6s10.877-4.447 12.408-8.74 1.532-7.971 1.073-8.74-1.685-1.226-3.525-2.146-10.877-5.367-12.562-5.981-2.91-.919-4.137.921-4.746 5.979-5.819 7.206-2.144 1.381-3.984.462-7.76-2.861-14.784-9.124c-5.465-4.873-9.154-10.891-10.228-12.73s-.114-2.835.808-3.751c.825-.824 1.838-2.147 2.759-3.22s1.224-1.84 1.836-3.065.307-2.301-.153-3.22-4.032-10.011-5.666-13.647"/></svg>
```

Contents of src/App.test.js:
```
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

```

Contents of src/setupTests.js:
```
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

```

Contents of src/AppContent.js:
```
import './App.css';
import React, { useState, useEffect, useCallback } from 'react';
import { Route, Routes, Link, useNavigate, useLocation } from 'react-router-dom';
import logo from './alt.png';
import statisticsEmoji from './📊.png'; // Import the statistics emoji
import rulebookEmoji from './📖.png'; // Import the rulebook emoji
import '@aws-amplify/ui-react/styles.css';
import {
  Button,
  Image,
  View,
  Card,
  useAuthenticator,
  Authenticator
} from "@aws-amplify/ui-react";
import Popup from './components/katsching/AddPlayer';
import KatschingPopup from './components/katsching/KatschingPopup';
import HistoryTable from './components/katsching/HistoryTable';
import { DataStore } from 'aws-amplify/datastore';
import { Player, HistoryEntry } from './models'; 
import { getCurrentUser } from 'aws-amplify/auth';
import KatschingTable from './components/katsching/KatschingTable';
import { ReactComponent as WhatsAppIcon } from './WhatsApp.svg';
import { FaBars } from 'react-icons/fa';
import Statistics from './components/statistiken/statistics';

// Placeholder components for different pages
// const Profile = () => <h2>Statistiken</h2>;
const Settings = () => <h2>Regelbuch</h2>;

function AppContent() {
  const { user, signOut } = useAuthenticator((context) => [context.user]);
  const navigate = useNavigate();
  const location = useLocation();
  const [isPopupVisible, setIsPopupVisible] = useState(false);
  const [isKatschingPopupVisible, setIsKatschingPopupVisible] = useState(false);
  const [players, setPlayers] = useState([]);
  const [selectedPlayer, setSelectedPlayer] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [loading, setLoading] = useState(true);
  const [showCopyNotification, setShowCopyNotification] = useState(false);
  const [numHistoryEntries, setNumHistoryEntries] = useState(1);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [refreshHistoryTrigger, setRefreshHistoryTrigger] = useState(0);

  const sortPlayersByKatschings = useCallback((players) => {
    return [...players].sort((a, b) => b.katschings - a.katschings);
  }, []);

  const fetchAllData = useCallback(async () => {
    try {
      const playersData = await DataStore.query(Player);
      setPlayers(sortPlayersByKatschings(playersData));
    } catch (err) {
      console.error('Error fetching data:', err);
    } finally {
      setLoading(false);
    }
  }, [sortPlayersByKatschings]);

  useEffect(() => {
    const initializeApp = async () => {
      setLoading(true);
      try {
        await fetchAllData();
        await checkAdmin();
      } catch (err) {
        console.error("Error during app initialization:", err);
      }
    };

    initializeApp();
  }, [fetchAllData]);

  const checkAdmin = async () => {
    try {
      const currentUser = await getCurrentUser();
      if (currentUser) {
        console.log("Current user:", currentUser); // For debugging
        if (currentUser.username === 'rene271') { 
          setIsAdmin(true);
          console.log("Admin status set to true"); // For debugging
        } else {
          setIsAdmin(false);
          console.log("User is not admin"); // For debugging
        }
      } else {
        setIsAdmin(false);
        console.log("No user logged in"); // For debugging
      }
    } catch (err) {
      console.error("Error checking admin status:", err);
      setIsAdmin(false);
    }
  };

  const togglePopup = useCallback(() => {
    setIsPopupVisible(prev => !prev);
  }, []);

  const toggleKatschingPopup = useCallback((player) => {
    setSelectedPlayer(player);
    setIsKatschingPopupVisible(prev => !prev);
  }, []);

  const addPlayer = useCallback(async (newPlayer, historyEntry) => {
    try {
      await DataStore.save(newPlayer);
      const updatedPlayers = sortPlayersByKatschings([...players, newPlayer]);
      setPlayers(updatedPlayers);

      await DataStore.save(historyEntry);
    } catch (err) {
      console.error("Error adding player:", err);
    }
  }, [players, sortPlayersByKatschings]);

  const addKatschings = useCallback(async (updatedPlayer, newHistoryEntry) => {
    try {
      const savedPlayer = await DataStore.save(updatedPlayer);
      await DataStore.save(newHistoryEntry);

      setPlayers(prevPlayers => {
        const newPlayersList = prevPlayers.map(player =>
          player.id === updatedPlayer.id ? savedPlayer : player
        );
        return sortPlayersByKatschings(newPlayersList);
      });

      setIsKatschingPopupVisible(false);
      setSelectedPlayer(null);
    } catch (err) {
      console.error("Error occurred while adding Katschings:", err);
    }
  }, [sortPlayersByKatschings]);

  const editKatschingScore = useCallback(async (playerId, newScore) => {
    try {
      const player = players.find(p => p.id === playerId);
      const numericScore = parseInt(newScore, 10);
      
      if (isNaN(numericScore)) {
        console.error("Invalid score input");
        return;
      }

      const updatedPlayer = await DataStore.save(Player.copyOf(player, item => {
        item.katschings = numericScore;
        item.lastKatsching = new Date().toISOString();
      }));

      setPlayers(prevPlayers => {
        const newPlayersList = prevPlayers.map(p =>
          p.id === playerId ? updatedPlayer : p
        );
        return sortPlayersByKatschings(newPlayersList);
      });
    } catch (err) {
      console.error("Error editing Katsching score:", err);
    }
  }, [players, sortPlayersByKatschings]);

  const refreshHistory = useCallback(() => {
    setRefreshHistoryTrigger(prev => prev + 1);
  }, []);

  useEffect(() => {
    if (user && location.pathname === '/login') {
      navigate('/');
    }
  }, [user, navigate, location]);

  const handleSignIn = () => {
    setIsMenuOpen(false);
    navigate('/login');
  };

  const handleSignOut = () => {
    setIsMenuOpen(false);
    signOut();
    navigate('/');
  };

  const getHeaderImage = () => {
    switch (location.pathname) {
      case '/statistics':
        return { src: statisticsEmoji, alt: "statistics emoji" };
      case '/rules':
        return { src: rulebookEmoji, alt: "rulebook emoji" };
      default:
        return { src: logo, alt: "logo" };
    }
  };

  return (
    <View className="App">
      <div className="menu-container">
        <FaBars className="menu-icon" onClick={() => setIsMenuOpen(!isMenuOpen)} />
        {isMenuOpen && (
          <div className="sandwich-menu">
            <Link to="/" onClick={() => setIsMenuOpen(false)}>Katsching</Link>
            <Link to="/statistics" onClick={() => setIsMenuOpen(false)}>Statistiken</Link>
            <Link to="/rules" onClick={() => setIsMenuOpen(false)}>Regelbuch</Link>
            {user ? (
              <Button onClick={handleSignOut}>Abmelden</Button>
            ) : (
              <Button onClick={handleSignIn}>Anmelden</Button>
            )}
          </div>
        )}
      </div>
      <div className="App-header">
        <h1 className="App-title">Katsching</h1>
        <Image 
          src={getHeaderImage().src} 
          className="App-logo" 
          alt={getHeaderImage().alt} 
        />
      </div>
      <Routes>
        <Route path="/" element={
          loading ? (
            <div>Loading...</div>
          ) : (
            <>
              <Card className="mainscreen-card">
                <div className="table-container">
                  <KatschingTable 
                    players={players}
                    isAdmin={isAdmin}
                    toggleKatschingPopup={toggleKatschingPopup}
                    editKatschingScore={editKatschingScore}
                    isLoggedIn={!!user}
                  />
                  <div className="add-player-button-container">
                    {isAdmin && user && (
                      <Button className="add-player-button" onClick={togglePopup}>Neuen Wicht hinzufügen</Button>
                    )}
                    {/* ... (rest of the buttons) */}
                  </div>
                </div>
              </Card>
              <Card className="history-table-container">
                <HistoryTable isAdmin={isAdmin} refreshTrigger={refreshHistoryTrigger} />
              </Card>
              {user && (
                <>
                  <Popup isVisible={isPopupVisible} togglePopup={togglePopup} addPlayer={addPlayer} />
                  {selectedPlayer && (
                    <KatschingPopup
                      isVisible={isKatschingPopupVisible}
                      togglePopup={toggleKatschingPopup}
                      addKatschings={addKatschings}
                      selectedPlayer={selectedPlayer}
                      refreshHistory={refreshHistory}
                    />
                  )}
                </>
              )}
            </>
          )
        } />
        <Route path="/statistics" element={<Statistics />} />
        <Route path="/rules" element={<Settings />} />
        <Route path="/login" element={
          <Authenticator>
            {({ signOut, user }) => {
              if (user) {
                navigate('/');
                return null;
              }
              return <div>Loading...</div>;
            }}
          </Authenticator>
        } />
      </Routes>
    </View>
  );
}

export default AppContent;

```

Contents of src/logo.svg:
```
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
```

Contents of src/App.js:
```
import './App.css';
import React from 'react';
import { BrowserRouter as Router } from 'react-router-dom';
import { Authenticator } from "@aws-amplify/ui-react";
import AppContent from './AppContent';

function App() {
  return (
    <Router>
      <Authenticator.Provider>
        <AppContent />
      </Authenticator.Provider>
    </Router>
  );
}

export default App;

```

Contents of src/📊.png:
```
[Could not decode file contents]

```

Contents of src/ui-components/KatschingPopup.d.ts:
```
/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

import * as React from "react";
import { ButtonProps, FlexProps, IconProps, TextProps, ViewProps } from "@aws-amplify/ui-react";
export declare type EscapeHatchProps = {
    [elementHierarchy: string]: Record<string, unknown>;
} | null;
export declare type VariantValues = {
    [key: string]: string;
};
export declare type Variant = {
    variantValues: VariantValues;
    overrides: EscapeHatchProps;
};
export declare type PrimitiveOverrideProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type KatschingPopupOverridesProps = {
    "2"?: PrimitiveOverrideProps<TextProps>;
    KatschingPopup?: PrimitiveOverrideProps<FlexProps>;
    KatschingDescription?: PrimitiveOverrideProps<TextProps>;
    KatschingChanger?: PrimitiveOverrideProps<FlexProps>;
    "Minus circle"?: PrimitiveOverrideProps<ViewProps>;
    Icon3851353?: PrimitiveOverrideProps<IconProps>;
    AddCounter?: PrimitiveOverrideProps<FlexProps>;
    "Plus circle"?: PrimitiveOverrideProps<ViewProps>;
    Icon3851355?: PrimitiveOverrideProps<IconProps>;
    "Frame 15697"?: PrimitiveOverrideProps<FlexProps>;
    "|"?: PrimitiveOverrideProps<TextProps>;
    Button?: PrimitiveOverrideProps<ButtonProps>;
} & EscapeHatchProps;
export declare type KatschingPopupProps = React.PropsWithChildren<Partial<FlexProps> & {
    overrides?: KatschingPopupOverridesProps | undefined | null;
}>;
export default function KatschingPopup(props: KatschingPopupProps): React.ReactElement;

```

Contents of src/ui-components/KatschingTable.d.ts:
```
/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

import * as React from "react";
import { FlexProps, TextProps } from "@aws-amplify/ui-react";
import { KatschingRowsContentProps } from "./KatschingRowsContent";
export declare type EscapeHatchProps = {
    [elementHierarchy: string]: Record<string, unknown>;
} | null;
export declare type VariantValues = {
    [key: string]: string;
};
export declare type Variant = {
    variantValues: VariantValues;
    overrides: EscapeHatchProps;
};
export declare type PrimitiveOverrideProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type KatschingTableOverridesProps = {
    KatschingTable?: PrimitiveOverrideProps<FlexProps>;
    "Frame 15704"?: PrimitiveOverrideProps<FlexProps>;
    "h-spieler"?: PrimitiveOverrideProps<FlexProps>;
    Spieler?: PrimitiveOverrideProps<TextProps>;
    "h-last-katsching"?: PrimitiveOverrideProps<FlexProps>;
    "Letzter Katsching"?: PrimitiveOverrideProps<TextProps>;
    "h-counter"?: PrimitiveOverrideProps<FlexProps>;
    Katschings?: PrimitiveOverrideProps<TextProps>;
    KatschingRowsContent3855147?: KatschingRowsContentProps;
    KatschingRowsContent3855774?: KatschingRowsContentProps;
} & EscapeHatchProps;
export declare type KatschingTableProps = React.PropsWithChildren<Partial<FlexProps> & {
    overrides?: KatschingTableOverridesProps | undefined | null;
}>;
export default function KatschingTable(props: KatschingTableProps): React.ReactElement;

```

Contents of src/ui-components/studioTheme.js.d.ts:
```
/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

declare const _default: any;
export default _default;

```

Contents of src/ui-components/DataRow.d.ts:
```
/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

import * as React from "react";
import { ButtonProps, FlexProps, TextProps } from "@aws-amplify/ui-react";
export declare type EscapeHatchProps = {
    [elementHierarchy: string]: Record<string, unknown>;
} | null;
export declare type VariantValues = {
    [key: string]: string;
};
export declare type Variant = {
    variantValues: VariantValues;
    overrides: EscapeHatchProps;
};
export declare type PrimitiveOverrideProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type DataRowOverridesProps = {
    DataRow?: PrimitiveOverrideProps<FlexProps>;
    label?: PrimitiveOverrideProps<TextProps>;
    value?: PrimitiveOverrideProps<TextProps>;
    Button?: PrimitiveOverrideProps<ButtonProps>;
} & EscapeHatchProps;
export declare type DataRowProps = React.PropsWithChildren<Partial<FlexProps> & {
    overrides?: DataRowOverridesProps | undefined | null;
}>;
export default function DataRow(props: DataRowProps): React.ReactElement;

```

Contents of src/ui-components/index.js:
```
/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

export { default as DataRow } from "./DataRow";
export { default as KatschingPopup } from "./KatschingPopup";
export { default as KatschingRowsContent } from "./KatschingRowsContent";
export { default as KatschingTable } from "./KatschingTable";
export { default as studioTheme } from "./studioTheme";

```

Contents of src/ui-components/KatschingRowsContent.jsx:
```
/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

/* eslint-disable */
import * as React from "react";
import { KatschingTable } from "../models";
import { getOverrideProps, useDataStoreUpdateAction } from "./utils";
import { schema } from "../models/schema";
import { Flex, Icon, Text, View } from "@aws-amplify/ui-react";
export default function KatschingRowsContent(props) {
  const { katschingTable, overrides, ...rest } = props;
  const iconOnClick = useDataStoreUpdateAction({
    fields: {},
    id: katschingTable?.Katschings,
    model: KatschingTable,
    schema: schema,
  });
  return (
    <Flex
      gap="20px"
      direction="row"
      width="501px"
      height="54px"
      justifyContent="center"
      alignItems="center"
      overflow="hidden"
      position="relative"
      boxShadow="0px 1px 4px rgba(0, 0, 0, 0.25)"
      padding="3px 0px 3px 22px"
      backgroundColor="rgba(239,240,240,1)"
      {...getOverrideProps(overrides, "KatschingRowsContent")}
      {...rest}
    >
      <Flex
        gap="30px"
        direction="row"
        width="unset"
        height="unset"
        justifyContent="center"
        alignItems="center"
        shrink="0"
        position="relative"
        padding="29px 0px 29px 0px"
        {...getOverrideProps(overrides, "PlayerName")}
      >
        <Text
          fontFamily="Inter"
          fontSize="16px"
          fontWeight="600"
          color="rgba(13,26,38,1)"
          lineHeight="24px"
          textAlign="left"
          display="block"
          direction="column"
          justifyContent="unset"
          width="unset"
          height="unset"
          gap="unset"
          alignItems="unset"
          shrink="0"
          position="relative"
          padding="0px 0px 0px 0px"
          whiteSpace="pre-wrap"
          children="Player 🤓"
          {...getOverrideProps(overrides, "Player \uD83E\uDD13")}
        ></Text>
      </Flex>
      <Flex
        gap="26px"
        direction="row"
        width="186px"
        height="100px"
        justifyContent="flex-start"
        alignItems="center"
        shrink="0"
        position="relative"
        padding="29px 0px 29px 0px"
        {...getOverrideProps(overrides, "LastKatsching")}
      >
        <Text
          fontFamily="Inter"
          fontSize="12px"
          fontWeight="500"
          color="rgba(13,26,38,1)"
          lineHeight="18px"
          textAlign="left"
          display="block"
          direction="column"
          justifyContent="unset"
          width="unset"
          height="unset"
          gap="unset"
          alignItems="unset"
          shrink="0"
          position="relative"
          padding="0px 0px 0px 0px"
          whiteSpace="pre-wrap"
          children="Letzter Katsching"
          {...getOverrideProps(overrides, "Letzter Katsching")}
        ></Text>
      </Flex>
      <Flex
        gap="6px"
        direction="row"
        width="unset"
        height="unset"
        justifyContent="flex-end"
        alignItems="center"
        grow="1"
        shrink="1"
        basis="0"
        alignSelf="stretch"
        position="relative"
        padding="0px 0px 0px 8px"
        {...getOverrideProps(overrides, "Frame 15700")}
      >
        <Flex
          gap="10px"
          direction="row"
          width="unset"
          height="unset"
          justifyContent="center"
          alignItems="center"
          shrink="0"
          position="relative"
          boxShadow="0px 3px 4px rgba(0, 0, 0, 0.25)"
          borderRadius="7px"
          padding="0px 2px 0px 2px"
          backgroundColor="rgba(220,222,224,1)"
          {...getOverrideProps(overrides, "Katsching Counter")}
        >
          <Text
            fontFamily="Inter"
            fontSize="20px"
            fontWeight="600"
            color="rgba(13,26,38,1)"
            lineHeight="30px"
            textAlign="left"
            display="block"
            direction="column"
            justifyContent="unset"
            width="unset"
            height="unset"
            gap="unset"
            alignItems="unset"
            shrink="0"
            position="relative"
            padding="0px 0px 0px 0px"
            whiteSpace="pre-wrap"
            children="23"
            {...getOverrideProps(overrides, "23")}
          ></Text>
        </Flex>
        <View
          width="50px"
          height="49px"
          display="block"
          gap="unset"
          alignItems="unset"
          justifyContent="unset"
          overflow="hidden"
          shrink="0"
          position="relative"
          padding="0px 0px 0px 0px"
          {...getOverrideProps(overrides, "Arrow up-circle")}
        >
          <Icon
            width="30px"
            height="30px"
            viewBox={{ minX: 0, minY: 0, width: 30, height: 30 }}
            paths={[
              {
                d: "M20.2929 15.7071C20.6834 16.0976 21.3166 16.0976 21.7071 15.7071C22.0976 15.3166 22.0976 14.6834 21.7071 14.2929L20.2929 15.7071ZM15 9L15.7071 8.29289C15.3166 7.90237 14.6834 7.90237 14.2929 8.29289L15 9ZM8.29289 14.2929C7.90237 14.6834 7.90237 15.3166 8.29289 15.7071C8.68342 16.0976 9.31658 16.0976 9.70711 15.7071L8.29289 14.2929ZM14 21C14 21.5523 14.4477 22 15 22C15.5523 22 16 21.5523 16 21L14 21ZM29 15C29 22.732 22.732 29 15 29L15 31C23.8366 31 31 23.8366 31 15L29 15ZM15 29C7.26801 29 1 22.732 1 15L-1 15C-1 23.8366 6.16344 31 15 31L15 29ZM1 15C1 7.26801 7.26801 1 15 1L15 -1C6.16344 -1 -1 6.16344 -1 15L1 15ZM15 1C22.732 1 29 7.26801 29 15L31 15C31 6.16344 23.8366 -1 15 -1L15 1ZM21.7071 14.2929L15.7071 8.29289L14.2929 9.70711L20.2929 15.7071L21.7071 14.2929ZM14.2929 8.29289L8.29289 14.2929L9.70711 15.7071L15.7071 9.70711L14.2929 8.29289ZM16 21L16 9L14 9L14 21L16 21Z",
                stroke: "rgba(137,148,159,1)",
                fillRule: "nonzero",
                strokeLinejoin: "round",
                strokeWidth: 2,
              },
            ]}
            display="block"
            gap="unset"
            alignItems="unset"
            justifyContent="unset"
            position="absolute"
            top="21.43%"
            bottom="17.35%"
            left="4%"
            right="36%"
            onClick={() => {
              iconOnClick();
            }}
            {...getOverrideProps(overrides, "Icon")}
          ></Icon>
        </View>
      </Flex>
    </Flex>
  );
}

```

Contents of src/ui-components/KatschingPopup.jsx:
```
/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

/* eslint-disable */
import * as React from "react";
import { getOverrideProps } from "./utils";
import { Button, Flex, Icon, Text, View } from "@aws-amplify/ui-react";
export default function KatschingPopup(props) {
  const { overrides, ...rest } = props;
  return (
    <Flex
      gap="19px"
      direction="column"
      width="unset"
      height="unset"
      justifyContent="center"
      alignItems="center"
      position="relative"
      boxShadow="0px 4px 4px rgba(0, 0, 0, 0.25)"
      borderRadius="29px"
      padding="41px 41px 41px 41px"
      backgroundColor="rgba(188,236,245,1)"
      {...getOverrideProps(overrides, "KatschingPopup")}
      {...rest}
    >
      <Text
        fontFamily="Inter"
        fontSize="16px"
        fontWeight="700"
        color="rgba(48,64,80,1)"
        lineHeight="24px"
        textAlign="left"
        display="block"
        direction="column"
        justifyContent="unset"
        width="278px"
        height="23px"
        gap="unset"
        alignItems="unset"
        shrink="0"
        position="relative"
        padding="0px 0px 0px 0px"
        whiteSpace="pre-wrap"
        children="Gib die Anzahl der Katschings an."
        {...getOverrideProps(overrides, "KatschingDescription")}
      ></Text>
      <Flex
        gap="16px"
        direction="row"
        width="unset"
        height="unset"
        justifyContent="flex-start"
        alignItems="center"
        overflow="hidden"
        shrink="0"
        position="relative"
        padding="11px 8px 11px 8px"
        {...getOverrideProps(overrides, "KatschingChanger")}
      >
        <View
          width="48px"
          height="48px"
          display="block"
          gap="unset"
          alignItems="unset"
          justifyContent="unset"
          overflow="hidden"
          shrink="0"
          position="relative"
          padding="0px 0px 0px 0px"
          {...getOverrideProps(overrides, "Minus circle")}
        >
          <Icon
            width="40px"
            height="40px"
            viewBox={{ minX: 0, minY: 0, width: 40, height: 40 }}
            paths={[
              {
                d: "M12 18C10.8954 18 10 18.8954 10 20C10 21.1046 10.8954 22 12 22L12 18ZM28 22C29.1046 22 30 21.1046 30 20C30 18.8954 29.1046 18 28 18L28 22ZM38 20C38 29.9411 29.9411 38 20 38L20 42C32.1503 42 42 32.1503 42 20L38 20ZM20 38C10.0589 38 2 29.9411 2 20L-2 20C-2 32.1503 7.84974 42 20 42L20 38ZM2 20C2 10.0589 10.0589 2 20 2L20 -2C7.84974 -2 -2 7.84974 -2 20L2 20ZM20 2C29.9411 2 38 10.0589 38 20L42 20C42 7.84974 32.1503 -2 20 -2L20 2ZM12 22L28 22L28 18L12 18L12 22Z",
                stroke: "rgba(137,148,159,1)",
                fillRule: "nonzero",
                strokeLinejoin: "round",
                strokeWidth: 4,
              },
            ]}
            display="block"
            gap="unset"
            alignItems="unset"
            justifyContent="unset"
            position="absolute"
            top="8.33%"
            bottom="8.33%"
            left="8.33%"
            right="8.33%"
            {...getOverrideProps(overrides, "Icon3851353")}
          ></Icon>
        </View>
        <Flex
          gap="10px"
          direction="row"
          width="unset"
          height="46px"
          justifyContent="center"
          alignItems="center"
          overflow="hidden"
          shrink="0"
          position="relative"
          borderRadius="42px"
          padding="11px 37px 11px 37px"
          backgroundColor="rgba(239,240,240,1)"
          {...getOverrideProps(overrides, "AddCounter")}
        >
          <Text
            fontFamily="Inter"
            fontSize="16px"
            fontWeight="600"
            color="rgba(0,0,0,1)"
            lineHeight="24px"
            textAlign="center"
            display="block"
            direction="column"
            justifyContent="unset"
            width="unset"
            height="unset"
            gap="unset"
            alignItems="unset"
            shrink="0"
            position="relative"
            padding="0px 0px 0px 0px"
            whiteSpace="pre-wrap"
            children="2"
            {...getOverrideProps(overrides, "2")}
          ></Text>
        </Flex>
        <View
          width="48px"
          height="48px"
          display="block"
          gap="unset"
          alignItems="unset"
          justifyContent="unset"
          overflow="hidden"
          shrink="0"
          position="relative"
          padding="0px 0px 0px 0px"
          {...getOverrideProps(overrides, "Plus circle")}
        >
          <Icon
            width="40px"
            height="40px"
            viewBox={{ minX: 0, minY: 0, width: 40, height: 40 }}
            paths={[
              {
                d: "M22 12C22 10.8954 21.1046 10 20 10C18.8954 10 18 10.8954 18 12L22 12ZM18 28C18 29.1046 18.8954 30 20 30C21.1046 30 22 29.1046 22 28L18 28ZM12 18C10.8954 18 10 18.8954 10 20C10 21.1046 10.8954 22 12 22L12 18ZM28 22C29.1046 22 30 21.1046 30 20C30 18.8954 29.1046 18 28 18L28 22ZM38 20C38 29.9411 29.9411 38 20 38L20 42C32.1503 42 42 32.1503 42 20L38 20ZM20 38C10.0589 38 2 29.9411 2 20L-2 20C-2 32.1503 7.84974 42 20 42L20 38ZM2 20C2 10.0589 10.0589 2 20 2L20 -2C7.84974 -2 -2 7.84974 -2 20L2 20ZM20 2C29.9411 2 38 10.0589 38 20L42 20C42 7.84974 32.1503 -2 20 -2L20 2ZM18 12L18 28L22 28L22 12L18 12ZM12 22L28 22L28 18L12 18L12 22Z",
                stroke: "rgba(137,148,159,1)",
                fillRule: "nonzero",
                strokeLinejoin: "round",
                strokeWidth: 4,
              },
            ]}
            display="block"
            gap="unset"
            alignItems="unset"
            justifyContent="unset"
            position="absolute"
            top="8.33%"
            bottom="8.33%"
            left="8.33%"
            right="8.33%"
            {...getOverrideProps(overrides, "Icon3851355")}
          ></Icon>
        </View>
      </Flex>
      <Flex
        gap="0"
        direction="row"
        width="248px"
        height="unset"
        justifyContent="flex-start"
        alignItems="center"
        overflow="hidden"
        shrink="0"
        position="relative"
        borderRadius="5px"
        padding="5px 10px 5px 10px"
        backgroundColor="rgba(250,250,250,1)"
        {...getOverrideProps(overrides, "Frame 15697")}
      >
        <Text
          fontFamily="Inter"
          fontSize="16px"
          fontWeight="600"
          color="rgba(0,0,0,1)"
          lineHeight="24px"
          textAlign="left"
          display="block"
          direction="column"
          justifyContent="unset"
          width="145px"
          height="20px"
          gap="unset"
          alignItems="unset"
          shrink="0"
          position="relative"
          padding="0px 0px 0px 0px"
          whiteSpace="pre-wrap"
          children="|"
          {...getOverrideProps(overrides, "|")}
        ></Text>
      </Flex>
      <Button
        width="unset"
        height="unset"
        shrink="0"
        backgroundImage="linear-gradient(0deg, rgba(174,40,40,1), rgba(148,123,35,1), rgba(138,164,33,1), rgba(30,171,53,1), rgba(26,165,90,1), rgba(27,204,182,1), rgba(25,102,192,1), rgba(103,31,175,1), rgba(187,24,141,1), rgba(221,18,79,1), rgba(216,12,12,1))"
        size="default"
        isDisabled={false}
        variation="primary"
        children="Katsching!"
        {...getOverrideProps(overrides, "Button")}
      ></Button>
    </Flex>
  );
}

```

Contents of src/ui-components/studioTheme.js:
```
/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

/* eslint-disable */
import { createTheme } from "@aws-amplify/ui-react";
export default createTheme({
  name: "studioTheme",
  tokens: {
    components: {
      alert: {
        alignItems: { value: "center" },
        justifyContent: { value: "space-between" },
        color: { value: "{colors.font.primary.value}" },
        backgroundColor: { value: "{colors.background.tertiary.value}" },
        paddingBlock: { value: "{space.small.value}" },
        paddingInline: { value: "{space.medium.value}" },
        icon: { size: { value: "{fontSizes.xl.value}" } },
        heading: {
          fontSize: { value: "{fontSizes.medium.value}" },
          fontWeight: { value: "{fontWeights.bold.value}" },
        },
        info: {
          color: { value: "{colors.font.info.value}" },
          backgroundColor: { value: "{colors.background.info.value}" },
        },
        error: {
          color: { value: "{colors.font.error.value}" },
          backgroundColor: { value: "{colors.background.error.value}" },
        },
        warning: {
          color: { value: "{colors.font.warning.value}" },
          backgroundColor: { value: "{colors.background.warning.value}" },
        },
        success: {
          color: { value: "{colors.font.success.value}" },
          backgroundColor: { value: "{colors.background.success.value}" },
        },
      },
      authenticator: {
        maxWidth: { value: "60rem" },
        modal: {
          width: { value: "{space.relative.full}" },
          height: { value: "{space.relative.full}" },
          backgroundColor: { value: "{colors.overlay.50.value}" },
          top: { value: "{space.zero}" },
          left: { value: "{space.zero}" },
        },
        container: { widthMax: { value: "30rem" } },
        router: {
          borderWidth: { value: "{borderWidths.small.value}" },
          borderStyle: { value: "solid" },
          borderColor: { value: "{colors.border.primary.value}" },
          backgroundColor: { value: "{colors.background.primary.value}" },
          boxShadow: { value: "{shadows.medium.value}" },
        },
        footer: { paddingBottom: { value: "{space.medium.value}" } },
        form: { padding: { value: "{space.xl.value}" } },
        state: {
          inactive: {
            backgroundColor: { value: "{colors.background.secondary.value}" },
          },
        },
        orContainer: {
          color: { value: "{colors.neutral.80.value}" },
          orLine: {
            backgroundColor: { value: "{colors.background.primary.value}" },
          },
        },
      },
      autocomplete: {
        menu: {
          width: { value: "100%" },
          marginBlockStart: { value: "{space.xxxs}" },
          backgroundColor: { value: "{colors.background.primary}" },
          borderColor: { value: "{colors.border.primary}" },
          borderWidth: { value: "{borderWidths.small}" },
          borderStyle: { value: "solid" },
          borderRadius: { value: "{radii.small}" },
          options: {
            display: { value: "flex" },
            flexDirection: { value: "column" },
            maxHeight: { value: "300px" },
          },
          option: {
            backgroundColor: { value: "{colors.background.primary}" },
            color: { value: "currentcolor" },
            cursor: { value: "pointer" },
            transitionDuration: { value: "{time.short}" },
            transitionProperty: { value: "background-color, color" },
            transitionTimingFunction: { value: "ease" },
            _active: {
              backgroundColor: { value: "{colors.brand.primary.80}" },
              color: { value: "{colors.white}" },
            },
          },
          _empty: { display: { value: "flex" } },
          _loading: {
            alignItems: { value: "center" },
            display: { value: "flex" },
            gap: { value: "{space.xxxs}" },
          },
          spaceShared: {
            paddingBlock: { value: "{space.xs}" },
            paddingInline: { value: "{space.small}" },
          },
        },
      },
      badge: {
        color: { value: "{colors.font.primary.value}" },
        lineHeight: { value: "1" },
        fontWeight: { value: "{fontWeights.semibold.value}" },
        fontSize: { value: "{fontSizes.small.value}" },
        textAlign: { value: "center" },
        paddingVertical: { value: "{space.xs.value}" },
        paddingHorizontal: { value: "{space.small.value}" },
        backgroundColor: { value: "{colors.background.tertiary.value}" },
        borderRadius: { value: "{radii.xl.value}" },
        info: {
          color: { value: "{colors.font.info.value}" },
          backgroundColor: { value: "{colors.background.info.value}" },
        },
        warning: {
          color: { value: "{colors.font.warning.value}" },
          backgroundColor: { value: "{colors.background.warning.value}" },
        },
        success: {
          color: { value: "{colors.font.success.value}" },
          backgroundColor: { value: "{colors.background.success.value}" },
        },
        error: {
          color: { value: "{colors.font.error.value}" },
          backgroundColor: { value: "{colors.background.error.value}" },
        },
        small: {
          fontSize: { value: "{fontSizes.xs.value}" },
          paddingVertical: { value: "{space.xxs.value}" },
          paddingHorizontal: { value: "{space.xs.value}" },
        },
        large: {
          fontSize: { value: "{fontSizes.medium.value}" },
          paddingVertical: { value: "{space.small.value}" },
          paddingHorizontal: { value: "{space.medium.value}" },
        },
      },
      breadcrumbs: {
        flexDirection: { value: "row" },
        flexWrap: { value: "wrap" },
        gap: { value: "0" },
        color: { value: "{colors.font.tertiary}" },
        item: {
          flexDirection: { value: "row" },
          color: { value: "inherit" },
          fontSize: { value: "inherit" },
          alignItems: { value: "center" },
          lineHeight: { value: "1" },
        },
        separator: {
          color: { value: "inherit" },
          fontSize: { value: "inherit" },
          paddingInline: { value: "{space.xxs}" },
        },
        link: {
          color: { value: "{components.link.color}" },
          fontSize: { value: "inherit" },
          fontWeight: { value: "normal" },
          textDecoration: { value: "none" },
          paddingInline: { value: "{space.xs}" },
          paddingBlock: { value: "{space.xxs}" },
          current: {
            color: { value: "inherit" },
            fontSize: { value: "inherit" },
            fontWeight: { value: "normal" },
            textDecoration: { value: "none" },
          },
        },
      },
      button: {
        fontWeight: { value: "{fontWeights.bold.value}" },
        transitionDuration: {
          value: "{components.fieldcontrol.transitionDuration.value}",
        },
        fontSize: { value: "{components.fieldcontrol.fontSize.value}" },
        lineHeight: { value: "{components.fieldcontrol.lineHeight.value}" },
        paddingBlockStart: {
          value: "{components.fieldcontrol.paddingBlockStart.value}",
        },
        paddingBlockEnd: {
          value: "{components.fieldcontrol.paddingBlockEnd.value}",
        },
        paddingInlineStart: {
          value: "{components.fieldcontrol.paddingInlineStart.value}",
        },
        paddingInlineEnd: {
          value: "{components.fieldcontrol.paddingInlineEnd.value}",
        },
        backgroundColor: { value: "transparent" },
        borderColor: { value: "{components.fieldcontrol.borderColor.value}" },
        borderWidth: { value: "{components.fieldcontrol.borderWidth.value}" },
        borderStyle: { value: "{components.fieldcontrol.borderStyle.value}" },
        borderRadius: { value: "{components.fieldcontrol.borderRadius.value}" },
        color: { value: "{colors.font.primary.value}" },
        _hover: {
          color: { value: "{colors.font.focus.value}" },
          backgroundColor: { value: "{colors.brand.primary.10.value}" },
          borderColor: { value: "{colors.brand.primary.60.value}" },
        },
        _focus: {
          color: { value: "{colors.font.focus.value}" },
          backgroundColor: { value: "{colors.brand.primary.10.value}" },
          borderColor: { value: "{colors.border.focus.value}" },
          boxShadow: {
            value: "{components.fieldcontrol._focus.boxShadow.value}",
          },
        },
        _active: {
          color: { value: "{colors.font.active.value}" },
          backgroundColor: { value: "{colors.brand.primary.20.value}" },
          borderColor: { value: "{colors.brand.primary.100.value}" },
        },
        _loading: {
          color: { value: "{colors.font.disabled.value}" },
          backgroundColor: { value: "transparent" },
          borderColor: { value: "{colors.border.tertiary.value}" },
        },
        _disabled: {
          color: { value: "{colors.font.disabled.value}" },
          backgroundColor: { value: "transparent" },
          borderColor: { value: "{colors.border.tertiary.value}" },
        },
        outlined: {
          info: {
            borderColor: { value: "{colors.blue.60.value}" },
            backgroundColor: { value: "transparent" },
            color: { value: "{colors.blue.100}" },
            _hover: {
              borderColor: { value: "{colors.blue.60.value}" },
              backgroundColor: { value: "{colors.blue.10.value}" },
              color: { value: "{colors.blue.100.value}" },
            },
            _focus: {
              borderColor: { value: "{colors.blue.100.value}" },
              backgroundColor: { value: "{colors.blue.10.value}" },
              color: { value: "{colors.blue.100.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "1px",
                  color: "{colors.blue.100.value}",
                },
              },
            },
            _active: {
              borderColor: { value: "{colors.blue.100.value}" },
              backgroundColor: { value: "{colors.blue.20.value}" },
              color: { value: "{colors.blue.100.value}" },
            },
          },
          warning: {
            borderColor: { value: "{colors.orange.60.value}" },
            backgroundColor: { value: "transparent" },
            color: { value: "{colors.orange.100}" },
            _hover: {
              borderColor: { value: "{colors.orange.60.value}" },
              backgroundColor: { value: "{colors.orange.10.value}" },
              color: { value: "{colors.orange.100.value}" },
            },
            _focus: {
              borderColor: { value: "{colors.orange.100.value}" },
              backgroundColor: { value: "{colors.orange.10.value}" },
              color: { value: "{colors.orange.100.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "1px",
                  color: "{colors.orange.100.value}",
                },
              },
            },
            _active: {
              borderColor: { value: "{colors.orange.100.value}" },
              backgroundColor: { value: "{colors.orange.20.value}" },
              color: { value: "{colors.orange.100.value}" },
            },
          },
          success: {
            borderColor: { value: "{colors.green.60.value}" },
            backgroundColor: { value: "transparent" },
            color: { value: "{colors.green.100}" },
            _hover: {
              borderColor: { value: "{colors.green.60.value}" },
              backgroundColor: { value: "{colors.green.10.value}" },
              color: { value: "{colors.green.100.value}" },
            },
            _focus: {
              borderColor: { value: "{colors.green.100.value}" },
              backgroundColor: { value: "{colors.green.10.value}" },
              color: { value: "{colors.green.100.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "1px",
                  color: "{colors.green.100.value}",
                },
              },
            },
            _active: {
              borderColor: { value: "{colors.green.100.value}" },
              backgroundColor: { value: "{colors.green.20.value}" },
              color: { value: "{colors.green.100.value}" },
            },
          },
          error: {
            borderColor: { value: "{colors.red.60.value}" },
            backgroundColor: { value: "transparent" },
            color: { value: "{colors.red.100}" },
            _hover: {
              borderColor: { value: "{colors.red.60.value}" },
              backgroundColor: { value: "{colors.red.10.value}" },
              color: { value: "{colors.red.100.value}" },
            },
            _focus: {
              borderColor: { value: "{colors.red.100.value}" },
              backgroundColor: { value: "{colors.red.10.value}" },
              color: { value: "{colors.red.100.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "1px",
                  color: "{colors.red.100.value}",
                },
              },
            },
            _active: {
              borderColor: { value: "{colors.red.100.value}" },
              backgroundColor: { value: "{colors.red.20.value}" },
              color: { value: "{colors.red.100.value}" },
            },
          },
          overlay: {
            borderColor: { value: "{colors.overlay.60.value}" },
            backgroundColor: { value: "transparent" },
            color: { value: "{colors.font.primary.value}" },
            _hover: {
              borderColor: { value: "{colors.overlay.60.value}" },
              backgroundColor: { value: "{colors.overlay.5.value}" },
              color: { value: "{colors.neutral.90.value}" },
            },
            _focus: {
              borderColor: { value: "{colors.overlay.90.value}" },
              backgroundColor: { value: "{colors.overlay.5.value}" },
              color: { value: "{colors.neutral.90.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "1px",
                  color: "{colors.overlay.90.value}",
                },
              },
            },
            _active: {
              borderColor: { value: "{colors.overlay.90.value}" },
              backgroundColor: { value: "{colors.overlay.10.value}" },
              color: { value: "{colors.neutral.100.value}" },
            },
          },
        },
        primary: {
          borderColor: { value: "transparent" },
          borderWidth: { value: "{borderWidths.small.value}" },
          borderStyle: { value: "solid" },
          backgroundColor: { value: "{colors.brand.primary.80.value}" },
          color: { value: "{colors.font.inverse.value}" },
          _disabled: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.background.disabled.value}" },
            color: { value: "{colors.font.disabled.value}" },
          },
          _loading: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.background.disabled.value}" },
            color: { value: "{colors.font.disabled.value}" },
          },
          _hover: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.brand.primary.90.value}" },
            color: { value: "{colors.font.inverse.value}" },
          },
          _focus: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.brand.primary.90.value}" },
            color: { value: "{colors.font.inverse.value}" },
            boxShadow: {
              value: "{components.fieldcontrol._focus.boxShadow.value}",
            },
          },
          _active: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.brand.primary.100.value}" },
            color: { value: "{colors.font.inverse.value}" },
          },
          info: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.blue.80}" },
            color: { value: "{colors.font.inverse.value}" },
            _hover: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.blue.90.value}" },
              color: { value: "{colors.font.inverse.value}" },
            },
            _focus: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.blue.90.value}" },
              color: { value: "{colors.font.inverse.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "1px",
                  color: "{colors.blue.100.value}",
                },
              },
            },
            _active: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.blue.100.value}" },
              color: { value: "{colors.font.inverse.value}" },
            },
          },
          warning: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.orange.80}" },
            color: { value: "{colors.font.inverse.value}" },
            _hover: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.orange.90.value}" },
              color: { value: "{colors.font.inverse.value}" },
            },
            _focus: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.orange.90.value}" },
              color: { value: "{colors.font.inverse.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "1px",
                  color: "{colors.orange.100.value}",
                },
              },
            },
            _active: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.orange.100.value}" },
              color: { value: "{colors.font.inverse.value}" },
            },
          },
          error: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.red.80}" },
            color: { value: "{colors.font.inverse.value}" },
            _hover: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.red.90.value}" },
              color: { value: "{colors.font.inverse.value}" },
            },
            _focus: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.red.90.value}" },
              color: { value: "{colors.font.inverse.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "1px",
                  color: "{colors.red.100.value}",
                },
              },
            },
            _active: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.red.100.value}" },
              color: { value: "{colors.font.inverse.value}" },
            },
          },
          success: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.green.80}" },
            color: { value: "{colors.font.inverse.value}" },
            _hover: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.green.90.value}" },
              color: { value: "{colors.font.inverse.value}" },
            },
            _focus: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.green.90.value}" },
              color: { value: "{colors.font.inverse.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "1px",
                  color: "{colors.green.100.value}",
                },
              },
            },
            _active: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.green.100.value}" },
              color: { value: "{colors.font.inverse.value}" },
            },
          },
          overlay: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.overlay.70}" },
            color: { value: "{colors.font.inverse.value}" },
            _hover: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.overlay.90.value}" },
              color: { value: "{colors.font.inverse.value}" },
            },
            _focus: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.overlay.90.value}" },
              color: { value: "{colors.font.inverse.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "1px",
                  color: "{colors.overlay.90.value}",
                },
              },
            },
            _active: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.overlay.90.value}" },
              color: { value: "{colors.font.inverse.value}" },
            },
          },
        },
        menu: {
          borderWidth: { value: "{space.zero.value}" },
          backgroundColor: { value: "transparent" },
          justifyContent: { value: "start" },
          _hover: {
            color: { value: "{colors.font.inverse.value}" },
            backgroundColor: { value: "{colors.brand.primary.80.value}" },
          },
          _focus: {
            color: { value: "{colors.font.inverse.value}" },
            backgroundColor: { value: "{colors.brand.primary.80.value}" },
          },
          _active: {
            color: { value: "{colors.font.inverse.value}" },
            backgroundColor: { value: "{colors.brand.primary.90.value}" },
          },
          _disabled: { color: { value: "{colors.font.disabled.value}" } },
        },
        link: {
          backgroundColor: { value: "transparent" },
          borderColor: { value: "transparent" },
          borderWidth: { value: "{borderWidths.small.value}" },
          color: { value: "{colors.font.interactive.value}" },
          _hover: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.brand.primary.10.value}" },
            color: { value: "{colors.font.hover.value}" },
          },
          _focus: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.brand.primary.10.value}" },
            color: { value: "{colors.font.focus.value}" },
            boxShadow: {
              value: "{components.fieldcontrol._focus.boxShadow.value}",
            },
          },
          _active: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.brand.primary.20.value}" },
            color: { value: "{colors.font.active.value}" },
          },
          _disabled: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "transparent" },
            color: { value: "{colors.font.disabled.value}" },
          },
          _loading: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "transparent" },
            color: { value: "{colors.font.disabled.value}" },
          },
          info: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "transparent" },
            color: { value: "{colors.blue.100}" },
            _hover: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.blue.10.value}" },
              color: { value: "{colors.blue.90.value}" },
            },
            _focus: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.blue.10.value}" },
              color: { value: "{colors.blue.100.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "1px",
                  color: "{colors.blue.100.value}",
                },
              },
            },
            _active: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.blue.20.value}" },
              color: { value: "{colors.blue.100.value}" },
            },
          },
          warning: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "transparent" },
            color: { value: "{colors.orange.100}" },
            _hover: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.orange.10.value}" },
              color: { value: "{colors.orange.90.value}" },
            },
            _focus: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.orange.10.value}" },
              color: { value: "{colors.orange.100.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "1px",
                  color: "{colors.orange.100.value}",
                },
              },
            },
            _active: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.orange.20.value}" },
              color: { value: "{colors.orange.100.value}" },
            },
          },
          success: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "transparent" },
            color: { value: "{colors.green.100}" },
            _hover: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.green.10.value}" },
              color: { value: "{colors.green.90.value}" },
            },
            _focus: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.green.10.value}" },
              color: { value: "{colors.green.100.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "1px",
                  color: "{colors.green.100.value}",
                },
              },
            },
            _active: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.green.20.value}" },
              color: { value: "{colors.green.100.value}" },
            },
          },
          error: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "transparent" },
            color: { value: "{colors.red.100}" },
            _hover: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.red.10.value}" },
              color: { value: "{colors.red.90.value}" },
            },
            _focus: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.red.10.value}" },
              color: { value: "{colors.red.100.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "1px",
                  color: "{colors.red.100.value}",
                },
              },
            },
            _active: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.red.20.value}" },
              color: { value: "{colors.red.100.value}" },
            },
          },
          overlay: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "transparent" },
            color: { value: "{colors.neutral.100}" },
            _hover: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.overlay.5.value}" },
              color: { value: "{colors.overlay.80.value}" },
            },
            _focus: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.overlay.5.value}" },
              color: { value: "{colors.overlay.90.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "1px",
                  color: "{colors.overlay.90.value}",
                },
              },
            },
            _active: {
              borderColor: { value: "transparent" },
              backgroundColor: { value: "{colors.overlay.10.value}" },
              color: { value: "{colors.overlay.90.value}" },
            },
          },
        },
        warning: {
          backgroundColor: { value: "transparent" },
          borderColor: { value: "{colors.red.60}" },
          borderWidth: { value: "{borderWidths.small}" },
          color: { value: "{colors.red.60}" },
          _hover: {
            borderColor: { value: "{colors.red.80}" },
            backgroundColor: { value: "{colors.red.10}" },
            color: { value: "{colors.font.error}" },
          },
          _focus: {
            borderColor: { value: "{colors.red.80}" },
            backgroundColor: { value: "{colors.red.10}" },
            color: { value: "{colors.red.80}" },
            boxShadow: {
              value: "{components.fieldcontrol._error._focus.boxShadow}",
            },
          },
          _active: {
            borderColor: { value: "{colors.red.100}" },
            backgroundColor: { value: "{colors.red.20}" },
            color: { value: "{colors.red.100}" },
          },
          _disabled: {
            borderColor: { value: "{colors.border.tertiary}" },
            backgroundColor: { value: "transparent" },
            color: { value: "{colors.font.disabled}" },
          },
          _loading: {
            borderColor: { value: "{colors.border.tertiary}" },
            backgroundColor: { value: "transparent" },
            color: { value: "{colors.font.disabled}" },
          },
        },
        destructive: {
          borderColor: { value: "transparent" },
          borderWidth: { value: "{borderWidths.small}" },
          borderStyle: { value: "solid" },
          backgroundColor: { value: "{colors.red.60}" },
          color: { value: "{colors.font.inverse}" },
          _disabled: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.background.disabled}" },
            color: { value: "{colors.font.disabled}" },
          },
          _loading: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.background.disabled}" },
            color: { value: "{colors.font.disabled}" },
          },
          _hover: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.red.80}" },
            color: { value: "{colors.font.inverse}" },
          },
          _focus: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.red.80}" },
            color: { value: "{colors.font.inverse}" },
            boxShadow: {
              value: "{components.fieldcontrol._error._focus.boxShadow}",
            },
          },
          _active: {
            borderColor: { value: "transparent" },
            backgroundColor: { value: "{colors.red.100}" },
            color: { value: "{colors.font.inverse}" },
          },
        },
        small: {
          fontSize: { value: "{components.fieldcontrol.small.fontSize.value}" },
          paddingBlockStart: {
            value: "{components.fieldcontrol.small.paddingBlockStart.value}",
          },
          paddingBlockEnd: {
            value: "{components.fieldcontrol.small.paddingBlockEnd.value}",
          },
          paddingInlineStart: {
            value: "{components.fieldcontrol.small.paddingInlineStart.value}",
          },
          paddingInlineEnd: {
            value: "{components.fieldcontrol.small.paddingInlineEnd.value}",
          },
        },
        large: {
          fontSize: { value: "{components.fieldcontrol.large.fontSize.value}" },
          paddingBlockStart: {
            value: "{components.fieldcontrol.large.paddingBlockStart.value}",
          },
          paddingBlockEnd: {
            value: "{components.fieldcontrol.large.paddingBlockEnd.value}",
          },
          paddingInlineStart: {
            value: "{components.fieldcontrol.large.paddingInlineStart.value}",
          },
          paddingInlineEnd: {
            value: "{components.fieldcontrol.large.paddingInlineEnd.value}",
          },
        },
        loaderWrapper: {
          alignItems: { value: "center" },
          gap: { value: "{space.xs.value}" },
        },
      },
      card: {
        backgroundColor: { value: "{colors.background.primary.value}" },
        borderRadius: { value: "{radii.xs.value}" },
        borderWidth: { value: "0" },
        borderStyle: { value: "solid" },
        borderColor: { value: "transparent" },
        boxShadow: { value: "none" },
        padding: { value: "{space.medium.value}" },
        outlined: {
          backgroundColor: { value: "{components.card.backgroundColor.value}" },
          borderRadius: { value: "{radii.xs.value}" },
          borderWidth: { value: "{borderWidths.small.value}" },
          borderStyle: { value: "solid" },
          borderColor: { value: "{colors.border.primary.value}" },
          boxShadow: { value: "{components.card.boxShadow.value}" },
        },
        elevated: {
          backgroundColor: { value: "{components.card.backgroundColor.value}" },
          borderRadius: { value: "{radii.xs.value}" },
          borderWidth: { value: "0" },
          borderStyle: { value: "solid" },
          borderColor: { value: "transparent" },
          boxShadow: { value: "{shadows.medium.value}" },
        },
      },
      checkbox: {
        cursor: { value: "pointer" },
        alignItems: { value: "center" },
        _disabled: { cursor: { value: "not-allowed" } },
        button: {
          position: { value: "relative" },
          alignItems: { value: "center" },
          justifyContent: { value: "center" },
          color: { value: "{colors.font.inverse.value}" },
          before: {
            width: { value: "100%" },
            height: { value: "100%" },
            borderWidth: { value: "{borderWidths.medium.value}" },
            borderRadius: { value: "20%" },
            borderStyle: { value: "solid" },
            borderColor: { value: "{colors.border.primary.value}" },
          },
          _focus: {
            outlineColor: { value: "{colors.transparent.value}" },
            outlineStyle: { value: "solid" },
            outlineWidth: { value: "{outlineWidths.medium.value}" },
            outlineOffset: { value: "{outlineOffsets.medium.value}" },
            borderColor: { value: "{colors.transparent.value}" },
            boxShadow: {
              value: {
                offsetX: "0px",
                offsetY: "0px",
                blurRadius: "0px",
                spreadRadius: "2px",
                color: "{colors.border.focus.value}",
              },
            },
          },
          _disabled: {
            borderColor: { value: "{colors.border.disabled.value}" },
          },
          _error: {
            borderColor: { value: "{colors.border.error.value}" },
            _focus: {
              borderColor: { value: "{colors.transparent.value}" },
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "0px",
                  blurRadius: "0px",
                  spreadRadius: "2px",
                  color: "{colors.border.error.value}",
                },
              },
            },
          },
        },
        icon: {
          backgroundColor: { value: "{colors.brand.primary.80.value}" },
          borderRadius: { value: "20%" },
          opacity: { value: "{opacities.0.value}" },
          transform: { value: "scale(0)" },
          transitionProperty: { value: "all" },
          transitionDuration: { value: "{time.short.value}" },
          transitionTimingFunction: { value: "ease-in-out" },
          _checked: {
            opacity: { value: "{opacities.100.value}" },
            transform: { value: "scale(1)" },
            _disabled: {
              backgroundColor: { value: "{colors.background.disabled.value}" },
            },
          },
          _indeterminate: {
            opacity: { value: "{opacities.100.value}" },
            transform: { value: "scale(1)" },
            _disabled: {
              backgroundColor: { value: "{colors.background.disabled.value}" },
            },
          },
        },
        label: {
          _disabled: { color: { value: "{colors.font.disabled.value}" } },
        },
      },
      checkboxfield: {
        alignItems: { value: "flex-start" },
        alignContent: { value: "center" },
        flexDirection: { value: "column" },
        justifyContent: { value: "center" },
      },
      countrycodeselect: { height: { value: "{space.relative.full.value}" } },
      divider: {
        borderStyle: { value: "solid" },
        borderColor: { value: "{colors.border.primary.value}" },
        borderWidth: { value: "{borderWidths.medium.value}" },
        label: {
          color: { value: "{colors.font.tertiary.value}" },
          paddingInline: { value: "{space.medium.value}" },
          fontSize: { value: "{fontSizes.small.value}" },
          backgroundColor: { value: "{colors.background.primary.value}" },
        },
        small: { borderWidth: { value: "{borderWidths.small.value}" } },
        large: { borderWidth: { value: "{borderWidths.large.value}" } },
        opacity: { value: "{opacities.60.value}" },
      },
      field: {
        gap: { value: "{space.xs.value}" },
        fontSize: { value: "{fontSizes.medium.value}" },
        flexDirection: { value: "column" },
        small: {
          gap: { value: "{space.xxxs.value}" },
          fontSize: { value: "{fontSizes.small.value}" },
        },
        large: {
          gap: { value: "{space.small.value}" },
          fontSize: { value: "{fontSizes.large.value}" },
        },
        label: { color: { value: "{colors.font.secondary.value}" } },
      },
      fieldcontrol: {
        borderStyle: { value: "solid" },
        borderColor: { value: "{colors.border.primary.value}" },
        borderWidth: { value: "{borderWidths.small.value}" },
        borderRadius: { value: "{radii.small.value}" },
        color: { value: "{colors.font.primary.value}" },
        paddingBlockStart: { value: "{space.xs.value}" },
        paddingBlockEnd: { value: "{space.xs.value}" },
        paddingInlineStart: { value: "{space.medium.value}" },
        paddingInlineEnd: { value: "{space.medium.value}" },
        fontSize: { value: "{components.field.fontSize.value}" },
        lineHeight: { value: "{lineHeights.medium.value}" },
        transitionDuration: { value: "{time.medium.value}" },
        outlineColor: { value: "{colors.transparent.value}" },
        outlineStyle: { value: "solid" },
        outlineWidth: { value: "{outlineWidths.medium.value}" },
        outlineOffset: { value: "{outlineOffsets.medium.value}" },
        small: {
          fontSize: { value: "{components.field.small.fontSize.value}" },
          paddingBlockStart: { value: "{space.xxs.value}" },
          paddingBlockEnd: { value: "{space.xxs.value}" },
          paddingInlineStart: { value: "{space.small.value}" },
          paddingInlineEnd: { value: "{space.small.value}" },
        },
        large: {
          fontSize: { value: "{components.field.large.fontSize.value}" },
          paddingBlockStart: { value: "{space.xs.value}" },
          paddingBlockEnd: { value: "{space.xs.value}" },
          paddingInlineStart: { value: "{space.medium.value}" },
          paddingInlineEnd: { value: "{space.medium.value}" },
        },
        quiet: {
          borderStyle: { value: "none" },
          borderInlineStart: { value: "none" },
          borderInlineEnd: { value: "none" },
          borderBlockStart: { value: "none" },
          borderRadius: { value: "0" },
          _focus: {
            borderBlockEndColor: { value: "{colors.border.focus.value}" },
            boxShadow: {
              value: {
                offsetX: "0px",
                offsetY: "1px",
                color: "{colors.border.focus.value}",
                blurRadius: "0px",
              },
            },
          },
          _error: {
            borderBlockEndColor: { value: "{colors.border.error.value}" },
            _focus: {
              boxShadow: {
                value: {
                  offsetX: "0px",
                  offsetY: "1px",
                  color: "{colors.border.error.value}",
                  blurRadius: "0px",
                },
              },
            },
          },
        },
        _focus: {
          borderColor: { value: "{colors.border.focus.value}" },
          boxShadow: {
            value: {
              offsetX: "0px",
              offsetY: "0px",
              blurRadius: "0px",
              spreadRadius: "1px",
              color: "{colors.border.focus.value}",
            },
          },
        },
        _disabled: {
          color: { value: "{colors.font.disabled.value}" },
          cursor: { value: "not-allowed" },
          borderColor: { value: "{colors.transparent.value}" },
          backgroundColor: { value: "{colors.background.disabled.value}" },
        },
        _error: {
          borderColor: { value: "{colors.border.error.value}" },
          color: { value: "{colors.font.error.value}" },
          _focus: {
            boxShadow: {
              value: {
                offsetX: "0px",
                offsetY: "0px",
                blurRadius: "0px",
                spreadRadius: "1px",
                color: "{colors.border.error.value}",
              },
            },
          },
        },
      },
      fieldgroup: {
        gap: { value: "{space.zero.value}" },
        vertical: { alignItems: { value: "center" } },
        outer: { alignItems: { value: "center" } },
      },
      fieldmessages: {
        error: {
          color: { value: "{colors.font.error.value}" },
          fontSize: { value: "{fontSizes.small.value}" },
        },
        description: {
          color: { value: "{colors.font.secondary.value}" },
          fontStyle: { value: "italic" },
          fontSize: { value: "{fontSizes.small.value}" },
        },
      },
      fieldset: {
        backgroundColor: { value: "transparent" },
        borderRadius: { value: "{radii.xs.value}" },
        flexDirection: { value: "column" },
        gap: { value: "{components.field.gap.value}" },
        legend: {
          color: { value: "{colors.font.primary.value}" },
          fontSize: { value: "{components.field.fontSize.value}" },
          fontWeight: { value: "{fontWeights.bold.value}" },
          lineHeight: { value: "{lineHeights.medium.value}" },
          small: {
            fontSize: { value: "{components.field.small.fontSize.value}" },
          },
          large: {
            fontSize: { value: "{components.field.large.fontSize.value}" },
          },
        },
        outlined: {
          padding: { value: "{space.medium.value}" },
          borderColor: { value: "{colors.neutral.40.value}" },
          borderWidth: { value: "{borderWidths.small.value}" },
          borderStyle: { value: "solid" },
          small: { padding: { value: "{space.small.value}" } },
          large: { padding: { value: "{space.large.value}" } },
        },
        small: { gap: { value: "{components.field.small.gap.value}" } },
        large: { gap: { value: "{components.field.large.gap.value}" } },
      },
      flex: {
        gap: { value: "{space.medium.value}" },
        justifyContent: { value: "normal" },
        alignItems: { value: "stretch" },
        alignContent: { value: "normal" },
        flexWrap: { value: "nowrap" },
      },
      heading: {
        1: {
          fontSize: { value: "{fontSizes.xxxxl.value}" },
          fontWeight: { value: "{fontWeights.light.value}" },
        },
        2: {
          fontSize: { value: "{fontSizes.xxxl.value}" },
          fontWeight: { value: "{fontWeights.normal.value}" },
        },
        3: {
          fontSize: { value: "{fontSizes.xxl.value}" },
          fontWeight: { value: "{fontWeights.medium.value}" },
        },
        4: {
          fontSize: { value: "{fontSizes.xl.value}" },
          fontWeight: { value: "{fontWeights.semibold.value}" },
        },
        5: {
          fontSize: { value: "{fontSizes.large.value}" },
          fontWeight: { value: "{fontWeights.bold.value}" },
        },
        6: {
          fontSize: { value: "{fontSizes.medium.value}" },
          fontWeight: { value: "{fontWeights.extrabold.value}" },
        },
        color: { value: "{colors.font.primary.value}" },
        lineHeight: { value: "{lineHeights.small.value}" },
      },
      icon: { lineHeight: { value: "1" }, height: { value: "1em" } },
      image: {
        maxWidth: { value: "100%" },
        height: { value: "auto" },
        objectFit: { value: "initial" },
        objectPosition: { value: "initial" },
      },
      input: {
        color: { value: "{components.fieldcontrol.color.value}" },
        borderColor: { value: "{components.fieldcontrol.borderColor.value}" },
        fontSize: { value: "{components.fieldcontrol.fontSize.value}" },
        _focus: {
          borderColor: {
            value: "{components.fieldcontrol._focus.borderColor.value}",
          },
        },
      },
      link: {
        active: { color: { value: "{colors.font.active.value}" } },
        color: { value: "{colors.font.interactive.value}" },
        focus: { color: { value: "{colors.font.focus.value}" } },
        hover: { color: { value: "{colors.font.hover.value}" } },
        visited: { color: { value: "{colors.font.interactive.value}" } },
      },
      loader: {
        width: { value: "{fontSizes.medium.value}" },
        height: { value: "{fontSizes.medium.value}" },
        fontSize: { value: "{fontSizes.xs.value}" },
        strokeEmpty: { value: "{colors.neutral.20.value}" },
        strokeFilled: { value: "{colors.brand.primary.80.value}" },
        strokeLinecap: { value: "round" },
        animationDuration: { value: "1s" },
        small: {
          width: { value: "{fontSizes.small.value}" },
          height: { value: "{fontSizes.small.value}" },
          fontSize: { value: "{fontSizes.xxs.value}" },
        },
        large: {
          width: { value: "{fontSizes.large.value}" },
          height: { value: "{fontSizes.large.value}" },
          fontSize: { value: "{fontSizes.small.value}" },
        },
        linear: {
          width: { value: "100%" },
          minWidth: { value: "5rem" },
          fontSize: { value: "{fontSizes.xxs.value}" },
          strokeWidth: { value: "{fontSizes.xxs.value}" },
          strokeFilled: { value: "{colors.brand.primary.80.value}" },
          strokeEmpty: { value: "{colors.neutral.20.value}" },
          strokeLinecap: { value: "round" },
          animationDuration: { value: "1s" },
          small: {
            strokeWidth: { value: "{fontSizes.xxxs.value}" },
            fontSize: { value: "{fontSizes.xxxs.value}" },
          },
          large: {
            strokeWidth: { value: "{fontSizes.xs.value}" },
            fontSize: { value: "{fontSizes.xs.value}" },
          },
        },
        text: { fill: { value: "{colors.font.primary.value}" } },
      },
      message: {
        alignItems: { value: "center" },
        backgroundColor: { value: "{colors.background.tertiary.value}" },
        borderColor: { value: "transparent" },
        borderStyle: { value: "solid" },
        borderWidth: { value: "{borderWidths.small.value}" },
        borderRadius: { value: "{radii.xs.value}" },
        color: { value: "{colors.font.primary.value}" },
        justifyContent: { value: "flex-start" },
        paddingBlock: { value: "{space.small.value}" },
        paddingInline: { value: "{space.medium.value}" },
        lineHeight: { value: "{lineHeights.small.value}" },
        icon: { size: { value: "{fontSizes.xl.value}" } },
        heading: {
          fontSize: { value: "{fontSizes.medium.value}" },
          fontWeight: { value: "{fontWeights.bold.value}" },
        },
        dismiss: { gap: { value: "{space.xxs.value}" } },
        plain: {
          color: { value: "{colors.font.primary.value}" },
          backgroundColor: { value: "{colors.background.primary.value}" },
          borderColor: { value: "transparent" },
          info: {
            color: { value: "{colors.font.info.value}" },
            backgroundColor: { value: "{colors.background.primary.value}" },
            borderColor: { value: "transparent" },
          },
          error: {
            color: { value: "{colors.font.error.value}" },
            backgroundColor: { value: "{colors.background.primary.value}" },
            borderColor: { value: "transparent" },
          },
          success: {
            color: { value: "{colors.font.success.value}" },
            backgroundColor: { value: "{colors.background.primary.value}" },
            borderColor: { value: "transparent" },
          },
          warning: {
            color: { value: "{colors.font.warning.value}" },
            backgroundColor: { value: "{colors.background.primary.value}" },
            borderColor: { value: "transparent" },
          },
        },
        outlined: {
          color: { value: "{colors.font.primary.value}" },
          backgroundColor: { value: "{colors.background.primary.value}" },
          borderColor: { value: "{colors.border.primary.value}" },
          info: {
            color: { value: "{colors.font.info.value}" },
            backgroundColor: { value: "{colors.background.primary.value}" },
            borderColor: { value: "{colors.border.info.value}" },
          },
          error: {
            color: { value: "{colors.font.error.value}" },
            backgroundColor: { value: "{colors.background.primary.value}" },
            borderColor: { value: "{colors.border.error.value}" },
          },
          success: {
            color: { value: "{colors.font.success.value}" },
            backgroundColor: { value: "{colors.background.primary.value}" },
            borderColor: { value: "{colors.border.success.value}" },
          },
          warning: {
            color: { value: "{colors.font.warning.value}" },
            backgroundColor: { value: "{colors.background.primary.value}" },
            borderColor: { value: "{colors.border.warning.value}" },
          },
        },
        filled: {
          color: { value: "{colors.font.primary.value}" },
          backgroundColor: { value: "{colors.background.secondary.value}" },
          borderColor: { value: "transparent" },
          info: {
            color: { value: "{colors.font.info.value}" },
            backgroundColor: { value: "{colors.background.info.value}" },
            borderColor: { value: "transparent" },
          },
          error: {
            color: { value: "{colors.font.error.value}" },
            backgroundColor: { value: "{colors.background.error.value}" },
            borderColor: { value: "transparent" },
          },
          success: {
            color: { value: "{colors.font.success.value}" },
            backgroundColor: { value: "{colors.background.success.value}" },
            borderColor: { value: "transparent" },
          },
          warning: {
            color: { value: "{colors.font.warning.value}" },
            backgroundColor: { value: "{colors.background.warning.value}" },
            borderColor: { value: "transparent" },
          },
        },
      },
      pagination: {
        current: {
          alignItems: { value: "center" },
          justifyContent: { value: "center" },
          color: { value: "{colors.font.inverse.value}" },
          fontSize: { value: "{fontSizes.small.value}" },
          backgroundColor: { value: "{colors.overlay.40.value}" },
        },
        button: {
          color: { value: "{colors.font.primary.value}" },
          paddingInlineStart: { value: "{space.xxs.value}" },
          paddingInlineEnd: { value: "{space.xxs.value}" },
          transitionProperty: { value: "background-color" },
          transitionDuration: { value: "{time.medium.value}" },
          hover: {
            backgroundColor: { value: "{colors.overlay.10.value}" },
            color: { value: "{colors.font.primary.value}" },
          },
          disabled: { color: { value: "{colors.font.disabled.value}" } },
        },
        ellipsis: {
          alignItems: { value: "baseline" },
          justifyContent: { value: "center" },
          paddingInlineStart: { value: "{space.xs.value}" },
          paddingInlineEnd: { value: "{space.xs.value}" },
        },
        itemContainer: {
          marginLeft: { value: "{space.xxxs.value}" },
          marginRight: { value: "{space.xxxs.value}" },
        },
        itemShared: {
          height: { value: "{fontSizes.xxl.value}" },
          minWidth: { value: "{fontSizes.xxl.value}" },
          borderRadius: { value: "{fontSizes.medium.value}" },
        },
      },
      passwordfield: {
        color: { value: "{components.fieldcontrol.color.value}" },
        button: {
          color: { value: "{components.button.color.value}" },
          _active: {
            backgroundColor: {
              value: "{components.button._active.backgroundColor.value}",
            },
            borderColor: {
              value: "{components.button._active.borderColor.value}",
            },
            color: { value: "{components.button._active.color.value}" },
          },
          _disabled: {
            backgroundColor: {
              value: "{components.button._disabled.backgroundColor.value}",
            },
            borderColor: {
              value: "{components.button._disabled.borderColor.value}",
            },
            color: { value: "{components.button._disabled.color.value}" },
          },
          _focus: {
            backgroundColor: {
              value: "{components.button._focus.backgroundColor.value}",
            },
            borderColor: {
              value: "{components.button._focus.borderColor.value}",
            },
            color: { value: "{components.button._focus.color.value}" },
          },
          _hover: {
            backgroundColor: {
              value: "{components.button._hover.backgroundColor.value}",
            },
            borderColor: {
              value: "{components.button._hover.borderColor.value}",
            },
            color: { value: "{components.button._hover.color.value}" },
          },
        },
      },
      phonenumberfield: {
        color: { value: "{components.fieldcontrol.color}" },
        borderColor: { value: "{components.fieldcontrol.borderColor}" },
        fontSize: { value: "{components.fieldcontrol.fontSize}" },
        _focus: {
          borderColor: {
            value: "{components.fieldcontrol._focus.borderColor}",
          },
        },
      },
      placeholder: {
        borderRadius: { value: "{radii.small.value}" },
        transitionDuration: { value: "{time.long.value}" },
        startColor: { value: "{colors.background.secondary.value}" },
        endColor: { value: "{colors.background.tertiary.value}" },
        small: { height: { value: "{space.small.value}" } },
        default: { height: { value: "{space.medium.value}" } },
        large: { height: { value: "{space.large.value}" } },
      },
      radio: {
        alignItems: { value: "center" },
        justifyContent: { value: "flex-start" },
        gap: { value: "inherit" },
        _disabled: { cursor: { value: "not-allowed" } },
        button: {
          alignItems: { value: "center" },
          justifyContent: { value: "center" },
          width: { value: "{fontSizes.medium.value}" },
          height: { value: "{fontSizes.medium.value}" },
          boxSizing: { value: "border-box" },
          borderWidth: { value: "{borderWidths.medium.value}" },
          borderStyle: { value: "solid" },
          borderRadius: { value: "50%" },
          borderColor: { value: "{colors.border.primary.value}" },
          color: { value: "{colors.background.primary.value}" },
          backgroundColor: { value: "{colors.background.primary.value}" },
          transitionProperty: { value: "all" },
          transitionDuration: { value: "{time.medium.value}" },
          outlineColor: { value: "{colors.transparent.value}" },
          outlineStyle: { value: "solid" },
          outlineWidth: { value: "{outlineWidths.medium.value}" },
          outlineOffset: { value: "{outlineOffsets.medium.value}" },
          padding: { value: "{borderWidths.medium.value}" },
          small: {
            width: { value: "{fontSizes.small.value}" },
            height: { value: "{fontSizes.small.value}" },
          },
          large: {
            width: { value: "{fontSizes.large.value}" },
            height: { value: "{fontSizes.large.value}" },
          },
          _checked: {
            color: { value: "{colors.brand.primary.80.value}" },
            _disabled: {
              color: { value: "{colors.background.disabled.value}" },
            },
          },
          _focus: {
            borderColor: { value: "{colors.border.focus.value}" },
            boxShadow: {
              value: "{components.fieldcontrol._focus.boxShadow.value}",
            },
          },
          _error: {
            borderColor: { value: "{colors.border.error.value}" },
            _focus: {
              boxShadow: {
                value:
                  "{components.fieldcontrol._error._focus.boxShadow.value}",
              },
            },
          },
          _disabled: {
            borderColor: { value: "{colors.border.disabled.value}" },
            backgroundColor: { value: "{colors.background.primary.value}" },
          },
        },
        label: {
          color: { value: "{components.text.color.value}" },
          _disabled: { color: { value: "{colors.font.disabled.value}" } },
        },
      },
      radiogroup: {
        radio: {
          borderWidth: { value: "{components.radio.button.borderWidth}" },
          borderColor: { value: "{components.radio.button.borderColor}" },
          backgroundColor: {
            value: "{components.radio.button.backgroundColor}",
          },
          _checked: {
            color: { value: "{components.radio.button._checked.color}" },
          },
          label: { color: { value: "{components.radio.label.color}" } },
        },
      },
      rating: {
        large: { size: { value: "{fontSizes.xxxl.value}" } },
        default: { size: { value: "{fontSizes.xl.value}" } },
        small: { size: { value: "{fontSizes.small.value}" } },
        filled: { color: { value: "{colors.brand.secondary.80.value}" } },
        empty: { color: { value: "{colors.background.tertiary.value}" } },
      },
      searchfield: {
        color: { value: "{components.fieldcontrol.color.value}" },
        button: {
          color: { value: "{components.button.color.value}" },
          backgroundColor: { value: "{colors.background.primary.value}" },
          _active: {
            backgroundColor: {
              value: "{components.button._active.backgroundColor.value}",
            },
            borderColor: {
              value: "{components.button._active.borderColor.value}",
            },
            color: { value: "{components.button._active.color.value}" },
          },
          _disabled: {
            backgroundColor: {
              value: "{components.button._disabled.backgroundColor.value}",
            },
            borderColor: {
              value: "{components.button._disabled.borderColor.value}",
            },
            color: { value: "{components.button._disabled.color.value}" },
          },
          _focus: {
            backgroundColor: {
              value: "{components.button._focus.backgroundColor.value}",
            },
            borderColor: {
              value: "{components.button._focus.borderColor.value}",
            },
            color: { value: "{components.button._focus.color.value}" },
          },
          _hover: {
            backgroundColor: {
              value: "{components.button._hover.backgroundColor.value}",
            },
            borderColor: {
              value: "{components.button._hover.borderColor.value}",
            },
            color: { value: "{components.button._hover.color.value}" },
          },
        },
      },
      select: {
        color: { value: "{components.fieldcontrol.color}" },
        backgroundColor: { value: "{colors.background.primary.value}" },
        paddingInlineEnd: { value: "{space.xxl.value}" },
        _disabled: {
          color: { value: "{colors.font.disabled.value}" },
          backgroundColor: { value: "{colors.background.disabled.value}" },
        },
        wrapper: {
          flex: { value: "1" },
          display: { value: "block" },
          position: { value: "relative" },
          cursor: { value: "pointer" },
        },
        iconWrapper: {
          alignItems: { value: "center" },
          position: { value: "absolute" },
          top: { value: "50%" },
          right: { value: "{space.medium.value}" },
          transform: { value: "translateY(-50%)" },
          pointerEvents: { value: "none" },
          small: { right: { value: "{space.xs.value}" } },
          large: { right: { value: "{space.medium.value}" } },
        },
        option: {
          backgroundColor: { value: "transparent" },
          color: { value: "{colors.font.primary.value}" },
          _disabled: {
            color: { value: "{colors.font.disabled.value}" },
            backgroundColor: { value: "transparent" },
          },
        },
        whiteSpace: { value: "nowrap" },
        minWidth: { value: "6.5rem" },
        small: {
          minWidth: { value: "5.5rem" },
          paddingInlineEnd: { value: "{space.xl.value}" },
        },
        large: {
          minWidth: { value: "7.5rem" },
          paddingInlineEnd: { value: "{space.xxl.value}" },
        },
        expanded: {
          paddingBlock: { value: "{space.xs.value}" },
          paddingInline: { value: "{space.small.value}" },
          option: {
            paddingBlock: { value: "{space.xs.value}" },
            paddingInline: { value: "{space.small.value}" },
          },
        },
      },
      selectfield: {
        borderColor: { value: "{components.fieldcontrol.borderColor}" },
        color: { value: "{components.fieldcontrol.color}" },
        flexDirection: { value: "column" },
        fontSize: { value: "{components.fieldcontrol.fontSize}" },
        _focus: {
          borderColor: {
            value: "{components.fieldcontrol._focus.borderColor}",
          },
        },
        label: { color: { value: "{components.field.label.color}" } },
      },
      sliderfield: {
        paddingBlock: { value: "{space.xs.value}" },
        track: {
          backgroundColor: { value: "{colors.background.quaternary.value}" },
          borderRadius: { value: "9999px" },
          height: { value: "0.375rem" },
          minWidth: { value: "10rem" },
        },
        range: {
          backgroundColor: { value: "{colors.brand.primary.80.value}" },
          borderRadius: { value: "9999px" },
          _disabled: {
            backgroundColor: { value: "{colors.background.disabled.value}" },
          },
        },
        thumb: {
          width: { value: "1.25rem" },
          height: { value: "1.25rem" },
          backgroundColor: { value: "{colors.background.primary.value}" },
          boxShadow: { value: "{shadows.small.value}" },
          borderRadius: { value: "50%" },
          borderWidth: { value: "{borderWidths.medium.value}" },
          borderColor: { value: "{colors.border.primary.value}" },
          borderStyle: { value: "solid" },
          _disabled: {
            backgroundColor: { value: "{colors.background.disabled.value}" },
            borderColor: { value: "transparent" },
            boxShadow: { value: "none" },
          },
          _hover: {
            backgroundColor: { value: "{colors.background.primary.value}" },
            borderColor: { value: "{colors.border.focus.value}" },
          },
          _focus: {
            borderColor: { value: "{colors.border.focus.value}" },
            boxShadow: {
              value: {
                offsetX: "0",
                offsetY: "0",
                blurRadius: "0",
                spreadRadius: "2px",
                color: "{colors.border.focus.value}",
              },
            },
          },
        },
        small: {
          track: { height: { value: "0.25rem" } },
          thumb: { width: { value: "1rem" }, height: { value: "1rem" } },
        },
        large: {
          track: { height: { value: "0.625rem" } },
          thumb: { width: { value: "1.5rem" }, height: { value: "1.5rem" } },
        },
      },
      stepperfield: {
        borderColor: { value: "{components.fieldcontrol.borderColor}" },
        flexDirection: { value: "column" },
        input: {
          color: { value: "{components.fieldcontrol.color}" },
          fontSize: { value: "{components.fieldcontrol.fontSize}" },
          textAlign: { value: "center" },
        },
        button: {
          color: { value: "{components.button.color}" },
          backgroundColor: { value: "{colors.transparent}" },
          _active: {
            color: { value: "{components.button._active.color}" },
            backgroundColor: {
              value: "{components.button._active.backgroundColor}",
            },
          },
          _focus: {
            color: { value: "{components.button._focus.color}" },
            backgroundColor: {
              value: "{components.button._focus.backgroundColor}",
            },
          },
          _disabled: {
            color: { value: "{components.button._disabled.color}" },
            backgroundColor: {
              value: "{components.fieldcontrol._disabled.backgroundColor}",
            },
          },
          _hover: {
            color: { value: "{components.button._hover.color}" },
            backgroundColor: {
              value: "{components.button._hover.backgroundColor}",
            },
          },
        },
      },
      switchfield: {
        _disabled: { opacity: { value: "{opacities.60.value}" } },
        _focused: {
          shadow: {
            value: {
              offsetX: "0px",
              offsetY: "0px",
              blurRadius: "0px",
              spreadRadius: "2px",
              color: "{colors.border.focus.value}",
            },
          },
        },
        fontSize: { value: "{fontSizes.medium.value}" },
        large: { fontSize: { value: "{fontSizes.large.value}" } },
        small: { fontSize: { value: "{fontSizes.small.value}" } },
        label: { padding: { value: "{space.xs.value}" } },
        thumb: {
          backgroundColor: { value: "{colors.background.primary.value}" },
          borderColor: { value: "transparent" },
          borderWidth: { value: "{borderWidths.small.value}" },
          borderStyle: { value: "solid" },
          borderRadius: { value: "{radii.xxxl.value}" },
          checked: { transform: { value: "{transforms.slideX.medium.value}" } },
          transition: { duration: { value: "{time.medium.value}" } },
          width: { value: "{space.relative.medium.value}" },
        },
        track: {
          backgroundColor: { value: "{colors.background.quaternary.value}" },
          borderRadius: { value: "{radii.xxxl.value}" },
          checked: {
            backgroundColor: { value: "{colors.brand.primary.80.value}" },
          },
          height: { value: "{space.relative.medium.value}" },
          padding: { value: "{outlineWidths.medium.value}" },
          transition: { duration: { value: "{time.short.value}" } },
          width: { value: "{space.relative.xl.value}" },
          _error: {
            backgroundColor: { value: "{colors.background.error.value}" },
          },
        },
      },
      table: {
        borderCollapse: { value: "collapse" },
        display: { value: "table" },
        width: { value: "100%" },
        head: {
          display: { value: "table-header-group" },
          verticalAlign: { value: "middle" },
        },
        body: {
          display: { value: "table-row-group" },
          verticalAlign: { value: "middle" },
        },
        foot: {
          display: { value: "table-footer-group" },
          verticalAlign: { value: "middle" },
        },
        row: {
          display: { value: "table-row" },
          verticalAlign: { value: "middle" },
          hover: {
            backgroundColor: { value: "{colors.background.tertiary.value}" },
          },
          striped: {
            backgroundColor: { value: "{colors.background.secondary.value}" },
          },
        },
        header: {
          borderColor: { value: "{colors.border.tertiary.value}" },
          borderStyle: { value: "solid" },
          borderWidth: { value: "{borderWidths.small.value}" },
          color: { value: "{colors.font.primary.value}" },
          display: { value: "table-cell" },
          fontSize: { value: "{fontSizes.medium.value}" },
          fontWeight: { value: "{fontWeights.bold.value}" },
          padding: { value: "{space.medium.value}" },
          verticalAlign: { value: "middle" },
          large: {
            fontSize: { value: "{fontSizes.large.value}" },
            padding: { value: "{space.large.value}" },
          },
          small: {
            fontSize: { value: "{fontSizes.small.value}" },
            padding: { value: "{space.xs.value}" },
          },
        },
        data: {
          borderColor: { value: "{colors.border.tertiary.value}" },
          borderStyle: { value: "solid" },
          borderWidth: { value: "{borderWidths.small.value}" },
          color: { value: "{colors.font.primary.value}" },
          display: { value: "table-cell" },
          fontSize: { value: "{fontSizes.medium.value}" },
          fontWeight: { value: "{fontWeights.normal.value}" },
          padding: { value: "{space.medium.value}" },
          verticalAlign: { value: "middle" },
          large: {
            fontSize: { value: "{fontSizes.large.value}" },
            padding: { value: "{space.large.value}" },
          },
          small: {
            fontSize: { value: "{fontSizes.small.value}" },
            padding: { value: "{space.xs.value}" },
          },
        },
        caption: {
          captionSide: { value: "bottom" },
          color: { value: "{colors.font.primary.value}" },
          display: { value: "table-caption" },
          fontSize: { value: "{fontSizes.medium.value}" },
          textAlign: { value: "center" },
          wordBreak: { value: "break-all" },
          large: { fontSize: { value: "{fontSizes.large.value}" } },
          small: { fontSize: { value: "{fontSizes.small.value}" } },
        },
      },
      tabs: {
        backgroundColor: { value: "transparent" },
        borderColor: { value: "{colors.border.secondary.value}" },
        borderStyle: { value: "solid" },
        borderWidth: { value: "{borderWidths.medium.value}" },
        gap: { value: "0" },
        item: {
          backgroundColor: { value: "transparent" },
          borderColor: { value: "{colors.border.secondary.value}" },
          borderStyle: { value: "solid" },
          borderWidth: { value: "{borderWidths.medium.value}" },
          color: { value: "{colors.font.secondary.value}" },
          fontSize: { value: "{fontSizes.medium.value}" },
          fontWeight: { value: "{fontWeights.bold.value}" },
          paddingVertical: { value: "{space.small.value}" },
          paddingHorizontal: { value: "{space.medium.value}" },
          textAlign: { value: "center" },
          transitionDuration: { value: "{time.medium.value}" },
          _hover: { color: { value: "{colors.font.hover.value}" } },
          _focus: { color: { value: "{colors.font.focus.value}" } },
          _active: {
            color: { value: "{colors.font.interactive.value}" },
            borderColor: { value: "{colors.font.interactive.value}" },
            backgroundColor: { value: "transparent" },
          },
          _disabled: {
            color: { value: "{colors.font.disabled.value}" },
            backgroundColor: { value: "transparent" },
            borderColor: { value: "{colors.border.tertiary.value}" },
          },
        },
      },
      text: {
        color: { value: "{colors.font.primary.value}" },
        primary: { color: { value: "{colors.font.primary.value}" } },
        secondary: { color: { value: "{colors.font.secondary.value}" } },
        tertiary: { color: { value: "{colors.font.tertiary.value}" } },
        error: { color: { value: "{colors.font.error.value}" } },
        warning: { color: { value: "{colors.font.warning.value}" } },
        success: { color: { value: "{colors.font.success.value}" } },
        info: { color: { value: "{colors.font.info.value}" } },
      },
      textareafield: {
        color: { value: "{components.fieldcontrol.color.value}" },
        borderColor: { value: "{components.fieldcontrol.borderColor.value}" },
        _focus: {
          borderColor: {
            value: "{components.fieldcontrol._focus.borderColor.value}",
          },
        },
      },
      textfield: {
        color: { value: "{components.fieldcontrol.color.value}" },
        borderColor: { value: "{components.fieldcontrol.borderColor.value}" },
        fontSize: { value: "{components.fieldcontrol.fontSize.value}" },
        _focus: {
          borderColor: {
            value: "{components.fieldcontrol._focus.borderColor.value}",
          },
        },
      },
      togglebutton: {
        borderColor: { value: "{colors.border.primary.value}" },
        color: { value: "{colors.font.primary.value}" },
        _hover: { backgroundColor: { value: "{colors.overlay.10.value}" } },
        _focus: {
          borderColor: { value: "{colors.border.focus.value}" },
          color: { value: "{colors.font.primary.value}" },
        },
        _active: { backgroundColor: { value: "{colors.transparent.value}" } },
        _disabled: {
          backgroundColor: { value: "{colors.transparent.value}" },
          borderColor: { value: "{colors.border.disabled.value}" },
          color: { value: "{colors.font.disabled.value}" },
        },
        _pressed: {
          borderColor: { value: "{colors.border.pressed.value}" },
          color: { value: "{colors.font.primary.value}" },
          backgroundColor: { value: "{colors.overlay.20.value}" },
          _hover: { backgroundColor: { value: "{colors.overlay.30.value}" } },
        },
        primary: {
          backgroundColor: { value: "{colors.transparent.value}" },
          borderWidth: { value: "{borderWidths.small.value}" },
          _focus: {
            borderColor: { value: "{colors.border.focus.value}" },
            backgroundColor: { value: "{colors.transparent.value}" },
            boxShadow: {
              value: "{components.fieldcontrol._focus.boxShadow.value}",
            },
            color: { value: "{colors.font.primary.value}" },
          },
          _hover: {
            backgroundColor: { value: "{colors.overlay.10.value}" },
            color: { value: "{colors.font.primary.value}" },
          },
          _disabled: {
            borderColor: { value: "{colors.border.disabled.value}" },
            backgroundColor: { value: "{colors.background.disabled.value}" },
            color: { value: "{colors.font.disabled.value}" },
          },
          _pressed: {
            backgroundColor: { value: "{colors.brand.primary.80.value}" },
            borderColor: { value: "{colors.brand.primary.80.value}" },
            color: { value: "{colors.background.primary.value}" },
            _focus: {
              backgroundColor: { value: "{colors.border.focus.value}" },
              borderColor: { value: "{colors.border.focus.value}" },
              color: { value: "{colors.background.primary.value}" },
            },
            _hover: {
              borderColor: { value: "{colors.brand.primary.60.value}" },
              backgroundColor: { value: "{colors.brand.primary.60.value}" },
              boxShadow: { value: "{colors.brand.primary.60.value}" },
              color: { value: "{colors.background.primary.value}" },
            },
          },
        },
        link: {
          backgroundColor: { value: "{colors.transparent.value}" },
          color: { value: "{colors.overlay.50.value}" },
          _hover: {
            backgroundColor: { value: "{colors.transparent.value}" },
            color: { value: "{colors.overlay.50.value}" },
          },
          _focus: {
            backgroundColor: { value: "{colors.transparent.value}" },
            color: { value: "{colors.overlay.50.value}" },
          },
          _disabled: {
            backgroundColor: { value: "{colors.transparent.value}" },
            color: { value: "{colors.font.disabled.value}" },
          },
          _pressed: {
            backgroundColor: { value: "{colors.transparent.value}" },
            color: { value: "{colors.overlay.90.value}" },
            _focus: {
              backgroundColor: { value: "{colors.transparent.value}" },
              color: { value: "{colors.overlay.90.value}" },
            },
            _hover: {
              color: { value: "{colors.overlay.90.value}" },
              backgroundColor: { value: "{colors.transparent.value}" },
            },
          },
        },
      },
      togglebuttongroup: {
        alignItems: { value: "center" },
        alignContent: { value: "center" },
        justifyContent: { value: "flex-start" },
      },
    },
    borderWidths: {
      small: { value: "1px" },
      medium: { value: "2px" },
      large: { value: "3px" },
    },
    colors: {
      red: {
        10: { value: "hsl(0, 75%, 95%)" },
        20: { value: "hsl(0, 75%, 85%)" },
        40: { value: "hsl(0, 75%, 75%)" },
        60: { value: "hsl(0, 50%, 50%)" },
        80: { value: "hsl(0, 95%, 30%)" },
        90: { value: "hsl(0, 100%, 20%)" },
        100: { value: "hsl(0, 100%, 15%)" },
      },
      orange: {
        10: { value: "hsl(30, 75%, 95%)" },
        20: { value: "hsl(30, 75%, 85%)" },
        40: { value: "hsl(30, 75%, 75%)" },
        60: { value: "hsl(30, 50%, 50%)" },
        80: { value: "hsl(30, 95%, 30%)" },
        90: { value: "hsl(30, 100%, 20%)" },
        100: { value: "hsl(30, 100%, 15%)" },
      },
      yellow: {
        10: { value: "hsl(60, 75%, 95%)" },
        20: { value: "hsl(60, 75%, 85%)" },
        40: { value: "hsl(60, 75%, 75%)" },
        60: { value: "hsl(60, 50%, 50%)" },
        80: { value: "hsl(60, 95%, 30%)" },
        90: { value: "hsl(60, 100%, 20%)" },
        100: { value: "hsl(60, 100%, 15%)" },
      },
      green: {
        10: { value: "hsl(130, 60%, 95%)" },
        20: { value: "hsl(130, 60%, 90%)" },
        40: { value: "hsl(130, 44%, 63%)" },
        60: { value: "hsl(130, 43%, 46%)" },
        80: { value: "hsl(130, 33%, 37%)" },
        90: { value: "hsl(130, 27%, 29%)" },
        100: { value: "hsl(130, 22%, 23%)" },
      },
      teal: {
        10: { value: "hsl(190, 75%, 95%)" },
        20: { value: "hsl(190, 75%, 85%)" },
        40: { value: "hsl(190, 70%, 70%)" },
        60: { value: "hsl(190, 50%, 50%)" },
        80: { value: "hsl(190, 95%, 30%)" },
        90: { value: "hsl(190, 100%, 20%)" },
        100: { value: "hsl(190, 100%, 15%)" },
      },
      blue: {
        10: { value: "hsl(220, 95%, 95%)" },
        20: { value: "hsl(220, 85%, 85%)" },
        40: { value: "hsl(220, 70%, 70%)" },
        60: { value: "hsl(220, 50%, 50%)" },
        80: { value: "hsl(220, 95%, 30%)" },
        90: { value: "hsl(220, 100%, 20%)" },
        100: { value: "hsl(220, 100%, 15%)" },
      },
      purple: {
        10: { value: "hsl(300, 95%, 95%)" },
        20: { value: "hsl(300, 85%, 85%)" },
        40: { value: "hsl(300, 70%, 70%)" },
        60: { value: "hsl(300, 50%, 50%)" },
        80: { value: "hsl(300, 95%, 30%)" },
        90: { value: "hsl(300, 100%, 20%)" },
        100: { value: "hsl(300, 100%, 15%)" },
      },
      pink: {
        10: { value: "hsl(340, 95%, 95%)" },
        20: { value: "hsl(340, 90%, 85%)" },
        40: { value: "hsl(340, 70%, 70%)" },
        60: { value: "hsl(340, 50%, 50%)" },
        80: { value: "hsl(340, 95%, 30%)" },
        90: { value: "hsl(340, 100%, 20%)" },
        100: { value: "hsl(340, 100%, 15%)" },
      },
      neutral: {
        10: { value: "hsl(210, 5%, 98%)" },
        20: { value: "hsl(210, 5%, 94%)" },
        40: { value: "hsl(210, 5%, 87%)" },
        60: { value: "hsl(210, 10%, 58%)" },
        80: { value: "hsl(210, 10%, 40%)" },
        90: { value: "hsl(210, 25%, 25%)" },
        100: { value: "hsl(210, 50%, 10%)" },
      },
      brand: {
        primary: {
          10: { value: "{colors.neutral.10.value}" },
          20: { value: "{colors.neutral.20.value}" },
          40: { value: "{colors.neutral.40.value}" },
          60: { value: "{colors.neutral.60.value}" },
          80: { value: "{colors.neutral.80.value}" },
          90: { value: "{colors.neutral.90.value}" },
          100: { value: "{colors.neutral.100.value}" },
        },
        secondary: {
          10: { value: "{colors.teal.10.value}" },
          20: { value: "{colors.teal.20.value}" },
          40: { value: "{colors.teal.40.value}" },
          60: { value: "{colors.teal.60.value}" },
          80: { value: "{colors.teal.80.value}" },
          90: { value: "{colors.teal.90.value}" },
          100: { value: "{colors.teal.100.value}" },
        },
      },
      font: {
        primary: { value: "{colors.neutral.100.value}" },
        secondary: { value: "{colors.neutral.90.value}" },
        tertiary: { value: "{colors.neutral.80.value}" },
        disabled: { value: "{colors.neutral.60.value}" },
        inverse: { value: "{colors.white.value}" },
        interactive: { value: "{colors.brand.primary.80.value}" },
        hover: { value: "{colors.brand.primary.90.value}" },
        focus: { value: "{colors.brand.primary.100.value}" },
        active: { value: "{colors.brand.primary.100.value}" },
        info: { value: "{colors.blue.90.value}" },
        warning: { value: "{colors.orange.90.value}" },
        error: { value: "{colors.red.90.value}" },
        success: { value: "{colors.green.90.value}" },
      },
      background: {
        primary: { value: "{colors.white.value}" },
        secondary: { value: "{colors.neutral.10.value}" },
        tertiary: { value: "{colors.neutral.20.value}" },
        quaternary: { value: "{colors.neutral.60.value}" },
        disabled: { value: "{colors.background.tertiary.value}" },
        info: { value: "{colors.blue.10.value}" },
        warning: { value: "{colors.orange.10.value}" },
        error: { value: "{colors.red.10.value}" },
        success: { value: "{colors.green.10.value}" },
      },
      border: {
        primary: { value: "{colors.neutral.60.value}" },
        secondary: { value: "{colors.neutral.40.value}" },
        tertiary: { value: "{colors.neutral.20.value}" },
        disabled: { value: "{colors.border.tertiary.value}" },
        pressed: { value: "{colors.brand.primary.100.value}" },
        focus: { value: "{colors.brand.primary.100.value}" },
        error: { value: "{colors.red.80.value}" },
        info: { value: "{colors.blue.80.value}" },
        success: { value: "{colors.green.80.value}" },
        warning: { value: "{colors.orange.80.value}" },
      },
      shadow: {
        primary: { value: "hsla(210, 50%, 10%, 0.25)" },
        secondary: { value: "hsla(210, 50%, 10%, 0.15)" },
        tertiary: { value: "hsla(210, 50%, 10%, 0.05)" },
      },
      overlay: {
        5: { value: "hsla(0, 0%, 0%, 0.05)" },
        10: { value: "hsla(0, 0%, 0%, 0.1)" },
        20: { value: "hsla(0, 0%, 0%, 0.2)" },
        30: { value: "hsla(0, 0%, 0%, 0.3)" },
        40: { value: "hsla(0, 0%, 0%, 0.4)" },
        50: { value: "hsla(0, 0%, 0%, 0.5)" },
        60: { value: "hsla(0, 0%, 0%, 0.6)" },
        70: { value: "hsla(0, 0%, 0%, 0.7)" },
        80: { value: "hsla(0, 0%, 0%, 0.8)" },
        90: { value: "hsla(0, 0%, 0%, 0.9)" },
      },
      black: { value: "hsl(0, 0%, 0%)" },
      white: { value: "hsl(0, 0%, 100%)" },
      transparent: { value: "transparent" },
    },
    fonts: {
      default: {
        variable: {
          value:
            "'InterVariable', 'Inter var', 'Inter', -apple-system, BlinkMacSystemFont,\n        'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans',\n        sans-serif",
        },
        static: {
          value:
            "'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue',\n        'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif",
        },
      },
    },
    fontSizes: {
      xxxs: { value: "0.375rem" },
      xxs: { value: "0.5rem" },
      xs: { value: "0.75rem" },
      small: { value: "0.875rem" },
      medium: { value: "1rem" },
      large: { value: "1.25rem" },
      xl: { value: "1.5rem" },
      xxl: { value: "2rem" },
      xxxl: { value: "2.5rem" },
      xxxxl: { value: "3rem" },
    },
    fontWeights: {
      hairline: { value: "100" },
      thin: { value: "200" },
      light: { value: "300" },
      normal: { value: "400" },
      medium: { value: "500" },
      semibold: { value: "600" },
      bold: { value: "700" },
      extrabold: { value: "800" },
      black: { value: "900" },
    },
    lineHeights: {
      small: { value: "1.25" },
      medium: { value: "1.5" },
      large: { value: "2" },
    },
    opacities: {
      0: { value: "0" },
      10: { value: "0.1" },
      20: { value: "0.2" },
      30: { value: "0.3" },
      40: { value: "0.4" },
      50: { value: "0.5" },
      60: { value: "0.6" },
      70: { value: "0.7" },
      80: { value: "0.8" },
      90: { value: "0.9" },
      100: { value: "1" },
    },
    outlineOffsets: {
      small: { value: "1px" },
      medium: { value: "2px" },
      large: { value: "3px" },
    },
    outlineWidths: {
      small: { value: "1px" },
      medium: { value: "2px" },
      large: { value: "3px" },
    },
    radii: {
      xs: { value: "0.125rem" },
      small: { value: "0.25rem" },
      medium: { value: "0.5rem" },
      large: { value: "1rem" },
      xl: { value: "2rem" },
      xxl: { value: "4rem" },
      xxxl: { value: "8rem" },
    },
    shadows: {
      small: {
        value: {
          offsetX: "0px",
          offsetY: "2px",
          blurRadius: "4px",
          color: "{colors.shadow.tertiary.value}",
        },
      },
      medium: {
        value: {
          offsetX: "0px",
          offsetY: "2px",
          blurRadius: "6px",
          color: "{colors.shadow.secondary.value}",
        },
      },
      large: {
        value: {
          offsetX: "0px",
          offsetY: "4px",
          blurRadius: "12px",
          color: "{colors.shadow.primary.value}",
        },
      },
    },
    space: {
      zero: { value: "0" },
      xxxs: { value: "0.25rem" },
      xxs: { value: "0.375rem" },
      xs: { value: "0.5rem" },
      small: { value: "0.75rem" },
      medium: { value: "1rem" },
      large: { value: "1.5rem" },
      xl: { value: "2.0rem" },
      xxl: { value: "3.0rem" },
      xxxl: { value: "4.5rem" },
      relative: {
        xxxs: { value: "0.25em" },
        xxs: { value: "0.375em" },
        xs: { value: "0.5em" },
        small: { value: "0.75em" },
        medium: { value: "1em" },
        large: { value: "1.5em" },
        xl: { value: "2.0em" },
        xxl: { value: "3.0em" },
        xxxl: { value: "4.5em" },
        full: { value: "100%" },
      },
    },
    time: {
      short: { value: "100ms" },
      medium: { value: "250ms" },
      long: { value: "500ms" },
    },
    transforms: {
      slideX: {
        small: { value: "translateX(0.5em)" },
        medium: { value: "translateX(1em)" },
        large: { value: "translateX(2em)" },
      },
    },
  },
  breakpoints: {
    values: {
      base: 0,
      small: 480,
      medium: 768,
      large: 992,
      xl: 1280,
      xxl: 1536,
    },
    defaultBreakpoint: "base",
  },
});

```

Contents of src/ui-components/DataRow.jsx:
```
/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

/* eslint-disable */
import * as React from "react";
import { getOverrideProps } from "./utils";
import { Button, Flex, Text } from "@aws-amplify/ui-react";
export default function DataRow(props) {
  const { overrides, ...rest } = props;
  return (
    <Flex
      gap="16px"
      direction="row"
      width="991px"
      height="unset"
      justifyContent="center"
      alignItems="center"
      position="relative"
      padding="16px 0px 16px 0px"
      {...getOverrideProps(overrides, "DataRow")}
      {...rest}
    >
      <Text
        fontFamily="Inter"
        fontSize="16px"
        fontWeight="600"
        color="rgba(13,26,38,1)"
        lineHeight="24px"
        textAlign="left"
        display="block"
        direction="column"
        justifyContent="unset"
        width="300px"
        height="unset"
        gap="unset"
        alignItems="unset"
        shrink="0"
        position="relative"
        padding="0px 0px 0px 0px"
        whiteSpace="pre-wrap"
        children="Label"
        {...getOverrideProps(overrides, "label")}
      ></Text>
      <Text
        fontFamily="Inter"
        fontSize="16px"
        fontWeight="400"
        color="rgba(48,64,80,1)"
        lineHeight="24px"
        textAlign="left"
        display="block"
        direction="column"
        justifyContent="unset"
        width="unset"
        height="unset"
        gap="unset"
        alignItems="unset"
        grow="1"
        shrink="1"
        basis="0"
        position="relative"
        padding="0px 0px 0px 0px"
        whiteSpace="pre-wrap"
        children="Value"
        {...getOverrideProps(overrides, "value")}
      ></Text>
      <Button
        width="unset"
        height="unset"
        shrink="0"
        size="small"
        isDisabled={false}
        variation="link"
        children="Edit"
        {...getOverrideProps(overrides, "Button")}
      ></Button>
    </Flex>
  );
}

```

Contents of src/ui-components/KatschingRowsContent.d.ts:
```
/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

import * as React from "react";
import { KatschingTable } from "../models";
import { FlexProps, IconProps, TextProps, ViewProps } from "@aws-amplify/ui-react";
export declare type EscapeHatchProps = {
    [elementHierarchy: string]: Record<string, unknown>;
} | null;
export declare type VariantValues = {
    [key: string]: string;
};
export declare type Variant = {
    variantValues: VariantValues;
    overrides: EscapeHatchProps;
};
export declare type PrimitiveOverrideProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type KatschingRowsContentOverridesProps = {
    "23"?: PrimitiveOverrideProps<TextProps>;
    KatschingRowsContent?: PrimitiveOverrideProps<FlexProps>;
    PlayerName?: PrimitiveOverrideProps<FlexProps>;
    "Player \uD83E\uDD13"?: PrimitiveOverrideProps<TextProps>;
    LastKatsching?: PrimitiveOverrideProps<FlexProps>;
    "Letzter Katsching"?: PrimitiveOverrideProps<TextProps>;
    "Frame 15700"?: PrimitiveOverrideProps<FlexProps>;
    "Katsching Counter"?: PrimitiveOverrideProps<FlexProps>;
    "Arrow up-circle"?: PrimitiveOverrideProps<ViewProps>;
    Icon?: PrimitiveOverrideProps<IconProps>;
} & EscapeHatchProps;
export declare type KatschingRowsContentProps = React.PropsWithChildren<Partial<FlexProps> & {
    katschingTable?: KatschingTable;
} & {
    overrides?: KatschingRowsContentOverridesProps | undefined | null;
}>;
export default function KatschingRowsContent(props: KatschingRowsContentProps): React.ReactElement;

```

Contents of src/ui-components/utils.js:
```
/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

/* eslint-disable */
import * as React from "react";
import { fetchUserAttributes, signOut } from "aws-amplify/auth";
import { DataStore } from "aws-amplify/datastore";
import { Hub } from "aws-amplify/utils";
export const UI_CHANNEL = "ui";
export const UI_EVENT_TYPE_ACTIONS = "actions";
export const CATEGORY_AUTH = "auth";
export const CATEGORY_DATASTORE = "datastore";
export const CATEGORY_CORE = "core";
export const ACTION_AUTH_SIGNOUT = "signout";
export const ACTION_NAVIGATE = "navigate";
export const ACTION_DATASTORE_CREATE = "create";
export const ACTION_DATASTORE_DELETE = "delete";
export const ACTION_DATASTORE_UPDATE = "update";
export const ACTION_STATE_MUTATION = "statemutation";
export const STATUS_STARTED = "started";
export const STATUS_FINISHED = "finished";
export const EVENT_ACTION_AUTH = `${UI_EVENT_TYPE_ACTIONS}:${CATEGORY_AUTH}`;
export const EVENT_ACTION_AUTH_SIGNOUT = `${EVENT_ACTION_AUTH}:${ACTION_AUTH_SIGNOUT}`;
export const ACTION_AUTH_SIGNOUT_STARTED = `${EVENT_ACTION_AUTH_SIGNOUT}:${STATUS_STARTED}`;
export const ACTION_AUTH_SIGNOUT_FINISHED = `${EVENT_ACTION_AUTH_SIGNOUT}:${STATUS_FINISHED}`;
export const EVENT_ACTION_CORE = `${UI_EVENT_TYPE_ACTIONS}:${CATEGORY_CORE}`;
export const EVENT_ACTION_CORE_STATE_MUTATION = `${EVENT_ACTION_CORE}:${ACTION_STATE_MUTATION}`;
export const ACTION_STATE_MUTATION_STARTED = `${EVENT_ACTION_CORE_STATE_MUTATION}:${STATUS_STARTED}`;
export const ACTION_STATE_MUTATION_FINISHED = `${EVENT_ACTION_CORE_STATE_MUTATION}:${STATUS_FINISHED}`;
export const EVENT_ACTION_CORE_NAVIGATE = `${EVENT_ACTION_CORE}:${ACTION_NAVIGATE}`;
export const ACTION_NAVIGATE_STARTED = `${EVENT_ACTION_CORE_NAVIGATE}:${STATUS_STARTED}`;
export const ACTION_NAVIGATE_FINISHED = `${EVENT_ACTION_CORE_NAVIGATE}:${STATUS_FINISHED}`;
export const EVENT_ACTION_DATASTORE = `${UI_EVENT_TYPE_ACTIONS}:${CATEGORY_DATASTORE}`;
export const EVENT_ACTION_DATASTORE_CREATE = `${EVENT_ACTION_DATASTORE}:${ACTION_DATASTORE_CREATE}`;
export const ACTION_DATASTORE_CREATE_STARTED = `${EVENT_ACTION_DATASTORE_CREATE}:${STATUS_STARTED}`;
export const ACTION_DATASTORE_CREATE_FINISHED = `${EVENT_ACTION_DATASTORE_CREATE}:${STATUS_FINISHED}`;
export const EVENT_ACTION_DATASTORE_DELETE = `${EVENT_ACTION_DATASTORE}:${ACTION_DATASTORE_DELETE}`;
export const ACTION_DATASTORE_DELETE_STARTED = `${EVENT_ACTION_DATASTORE_DELETE}:${STATUS_STARTED}`;
export const ACTION_DATASTORE_DELETE_FINISHED = `${EVENT_ACTION_DATASTORE_DELETE}:${STATUS_FINISHED}`;
export const EVENT_ACTION_DATASTORE_UPDATE = `${EVENT_ACTION_DATASTORE}:${ACTION_DATASTORE_UPDATE}`;
export const ACTION_DATASTORE_UPDATE_STARTED = `${EVENT_ACTION_DATASTORE_UPDATE}:${STATUS_STARTED}`;
export const ACTION_DATASTORE_UPDATE_FINISHED = `${EVENT_ACTION_DATASTORE_UPDATE}:${STATUS_FINISHED}`;
export const DATASTORE_QUERY_BY_ID_ERROR =
  "Error querying datastore item by id";
export const AMPLIFY_SYMBOL =
  typeof Symbol !== "undefined" && typeof Symbol.for === "function"
    ? Symbol.for("amplify_default")
    : "@@amplify_default";
export const useStateMutationAction = (initialState) => {
  const [state, setState] = React.useState(initialState);
  const setNewState = React.useCallback(
    (newState) => {
      const prevState = state;
      Hub.dispatch(
        UI_CHANNEL,
        {
          event: ACTION_STATE_MUTATION_STARTED,
          data: { prevState, newState },
        },
        EVENT_ACTION_CORE_STATE_MUTATION,
        AMPLIFY_SYMBOL
      );
      setState(newState);
      Hub.dispatch(
        UI_CHANNEL,
        {
          event: ACTION_STATE_MUTATION_FINISHED,
          data: { prevState, newState },
        },
        EVENT_ACTION_CORE_STATE_MUTATION,
        AMPLIFY_SYMBOL
      );
    },
    [state]
  );
  return [state, setNewState];
};
export const useNavigateAction = (options) => {
  const { type, url, anchor, target } = options;
  const run = React.useMemo(() => {
    switch (type) {
      case "url":
        return () => {
          window.open(url, target || "_self", "noopener noreferrer");
        };
      case "anchor":
        return () => {
          window.location.hash = anchor ?? "";
        };
      case "reload":
        return () => {
          window.location.reload();
        };
      default:
        return () => {
          // eslint-disable-next-line no-console
          console.warn(
            'Please provide a valid navigate type. Available types are "url", "anchor" and "reload".'
          );
        };
    }
  }, [anchor, target, type, url]);
  const navigateAction = () => {
    Hub.dispatch(
      UI_CHANNEL,
      {
        event: ACTION_NAVIGATE_STARTED,
        data: options,
      },
      EVENT_ACTION_CORE_NAVIGATE,
      AMPLIFY_SYMBOL
    );
    run();
    Hub.dispatch(
      UI_CHANNEL,
      {
        event: ACTION_NAVIGATE_FINISHED,
        data: options,
      },
      EVENT_ACTION_CORE_NAVIGATE,
      AMPLIFY_SYMBOL
    );
  };
  return navigateAction;
};
export const findChildOverrides = (overrides, elementHierarchy) => {
  if (!overrides) {
    return null;
  }
  const filteredOverrides = Object.entries(overrides).filter((m) =>
    m[0].startsWith(elementHierarchy)
  );
  return Object.assign(
    {},
    ...Array.from(filteredOverrides, ([k, v]) => ({
      [k.replace(elementHierarchy, "")]: v,
    }))
  );
};
export const getOverrideProps = (overrides, elementHierarchy) => {
  if (!overrides) {
    return null;
  }
  const componentOverrides = Object.entries(overrides)
    .filter(([key]) => key === elementHierarchy)
    .flatMap(([, value]) => Object.entries(value))
    .filter((m) => m?.[0]);
  return Object.fromEntries(componentOverrides);
};
export function getOverridesFromVariants(variants, props) {
  const variantValueKeys = [
    ...new Set(
      variants.flatMap((variant) => Object.keys(variant.variantValues))
    ),
  ];
  const variantValuesFromProps = Object.keys(props)
    .filter((i) => variantValueKeys.includes(i) && props[i])
    .reduce((acc, key) => {
      return {
        ...acc,
        [key]: props[key],
      };
    }, {});
  const matchedVariants = variants.filter(({ variantValues }) => {
    return (
      Object.keys(variantValues).length ===
        Object.keys(variantValuesFromProps).length &&
      Object.entries(variantValues).every(
        ([key, value]) => variantValuesFromProps[key] === value
      )
    );
  });
  return matchedVariants.reduce((overrides, variant) => {
    return { ...overrides, ...variant.overrides };
  }, {});
}
export const mergeVariantsAndOverrides = (variants, overrides) => {
  if (!variants && !overrides) {
    return null;
  }
  if (!overrides) {
    return variants;
  }
  if (!variants) {
    return overrides;
  }
  const overrideKeys = new Set(Object.keys(overrides));
  const sharedKeys = Object.keys(variants).filter((variantKey) =>
    overrideKeys.has(variantKey)
  );
  const merged = Object.fromEntries(
    sharedKeys.map((sharedKey) => [
      sharedKey,
      { ...variants[sharedKey], ...overrides[sharedKey] },
    ])
  );
  return {
    ...variants,
    ...overrides,
    ...merged,
  };
};
export const isErrorWithMessage = (error) => {
  return (
    typeof error === "object" &&
    error !== null &&
    "message" in error &&
    typeof error.message === "string"
  );
};
export const toErrorWithMessage = (maybeError) => {
  if (isErrorWithMessage(maybeError)) return maybeError;
  try {
    return new Error(JSON.stringify(maybeError));
  } catch {
    return new Error(String(maybeError));
  }
};
export const getErrorMessage = (error) => {
  return toErrorWithMessage(error).message;
};
export const useTypeCastFields = ({ fields, modelName, schema }) => {
  return React.useMemo(() => {
    if (!schema) {
      return fields;
    }
    const castFields = {};
    Object.keys(fields).forEach((fieldName) => {
      const field = fields[fieldName];
      switch (schema?.models[modelName]?.fields?.[fieldName]?.type) {
        case "AWSTimestamp":
          castFields[fieldName] = Number(field);
          break;
        case "Boolean":
          castFields[fieldName] = Boolean(field);
          break;
        case "Int":
          castFields[fieldName] =
            typeof field === "string" ||
            (typeof field === "object" &&
              Object.prototype.toString.call(field) === "[object String]")
              ? parseInt(field)
              : field;
          break;
        case "Float":
          castFields[fieldName] = Number(field);
          break;
        default:
          castFields[fieldName] = field;
          break;
      }
    });
    return castFields;
  }, [fields, schema, modelName]);
};
export const useDataStoreCreateAction = ({
  model,
  fields: initialFields,
  schema,
}) => {
  const fields = useTypeCastFields({
    fields: initialFields,
    modelName: model.name,
    schema,
  });
  return async () => {
    try {
      Hub.dispatch(
        UI_CHANNEL,
        {
          event: ACTION_DATASTORE_CREATE_STARTED,
          data: { fields },
        },
        EVENT_ACTION_DATASTORE_CREATE,
        AMPLIFY_SYMBOL
      );
      const item = await DataStore.save(new model(fields));
      Hub.dispatch(
        UI_CHANNEL,
        {
          event: ACTION_DATASTORE_CREATE_FINISHED,
          data: { fields, item },
        },
        EVENT_ACTION_DATASTORE_CREATE,
        AMPLIFY_SYMBOL
      );
    } catch (error) {
      Hub.dispatch(
        UI_CHANNEL,
        {
          event: ACTION_DATASTORE_CREATE_FINISHED,
          data: {
            fields,
            errorMessage: getErrorMessage(error),
          },
        },
        EVENT_ACTION_DATASTORE_CREATE,
        AMPLIFY_SYMBOL
      );
    }
  };
};
export const useDataStoreUpdateAction = ({
  fields: initialFields,
  id,
  model,
  schema,
}) => {
  const fields = useTypeCastFields({
    fields: initialFields,
    modelName: model.name,
    schema,
  });
  return async () => {
    try {
      Hub.dispatch(
        UI_CHANNEL,
        {
          event: ACTION_DATASTORE_UPDATE_STARTED,
          data: { fields, id },
        },
        EVENT_ACTION_DATASTORE_UPDATE,
        AMPLIFY_SYMBOL
      );
      const original = await DataStore.query(model, id);
      if (!original) {
        throw new Error(`${DATASTORE_QUERY_BY_ID_ERROR}: ${id}`);
      }
      const item = await DataStore.save(
        model.copyOf(original, (updated) => {
          Object.assign(updated, fields);
        })
      );
      Hub.dispatch(
        UI_CHANNEL,
        {
          event: ACTION_DATASTORE_UPDATE_FINISHED,
          data: { fields, id, item },
        },
        EVENT_ACTION_DATASTORE_UPDATE,
        AMPLIFY_SYMBOL
      );
    } catch (error) {
      Hub.dispatch(
        UI_CHANNEL,
        {
          event: ACTION_DATASTORE_UPDATE_FINISHED,
          data: {
            fields,
            id,
            errorMessage: getErrorMessage(error),
          },
        },
        EVENT_ACTION_DATASTORE_UPDATE,
        AMPLIFY_SYMBOL
      );
    }
  };
};
export const useDataStoreDeleteAction =
  ({ model, id }) =>
  async () => {
    try {
      Hub.dispatch(
        UI_CHANNEL,
        {
          event: ACTION_DATASTORE_DELETE_STARTED,
          data: { id },
        },
        EVENT_ACTION_DATASTORE_DELETE,
        AMPLIFY_SYMBOL
      );
      await DataStore.delete(model, id);
      Hub.dispatch(
        UI_CHANNEL,
        {
          event: ACTION_DATASTORE_DELETE_FINISHED,
          data: { id },
        },
        EVENT_ACTION_DATASTORE_DELETE,
        AMPLIFY_SYMBOL
      );
    } catch (error) {
      Hub.dispatch(
        UI_CHANNEL,
        {
          event: ACTION_DATASTORE_DELETE_FINISHED,
          data: { id, errorMessage: getErrorMessage(error) },
        },
        EVENT_ACTION_DATASTORE_DELETE,
        AMPLIFY_SYMBOL
      );
    }
  };
export const createDataStorePredicate = (predicateObject) => {
  const {
    and: groupAnd,
    or: groupOr,
    field,
    operator,
    operand,
  } = predicateObject;
  if (Array.isArray(groupAnd)) {
    const predicates = groupAnd.map((condition) =>
      createDataStorePredicate(condition)
    );
    return (p) =>
      p.and((model) => predicates.map((predicate) => predicate(model)));
  }
  if (Array.isArray(groupOr)) {
    const predicates = groupOr.map((condition) =>
      createDataStorePredicate(condition)
    );
    return (p) =>
      p.or((model) => predicates.map((predicate) => predicate(model)));
  }
  return (p) => {
    if (!!field && !!operator && p?.[field]?.[operator]) {
      return p[field][operator](operand);
    }
    return p;
  };
};
export const useDataStoreCollection = ({ model, criteria, pagination }) => {
  const [result, setResult] = React.useState({
    items: [],
    isLoading: false,
    error: undefined,
  });
  const fetch = () => {
    setResult({ isLoading: true, items: [] });
    const subscription = DataStore.observeQuery(
      model,
      criteria,
      pagination
    ).subscribe(
      (snapshot) => setResult({ items: snapshot.items, isLoading: false }),
      (error) => setResult({ items: [], error, isLoading: false })
    );
    if (subscription) {
      return () => subscription.unsubscribe();
    }
  };
  React.useEffect(fetch, []);
  return result;
};
export const useDataStoreItem = ({ model, id }) => {
  const [item, setItem] = React.useState();
  const [isLoading, setLoading] = React.useState(false);
  const [error, setError] = React.useState();
  const fetch = () => {
    setLoading(true);
    DataStore.query(model, id)
      .then(setItem)
      .catch(setError)
      .finally(() => setLoading(false));
  };
  React.useEffect(fetch, []);
  return {
    error,
    item,
    isLoading,
  };
};
export function useDataStoreBinding(props) {
  return props.type === "record"
    ? useDataStoreItem(props)
    : useDataStoreCollection(props);
}
export const useAuthSignOutAction = (options) => async () => {
  try {
    Hub.dispatch(
      UI_CHANNEL,
      {
        event: ACTION_AUTH_SIGNOUT_STARTED,
        data: { options },
      },
      EVENT_ACTION_AUTH_SIGNOUT,
      AMPLIFY_SYMBOL
    );
    await signOut(options);
    Hub.dispatch(
      UI_CHANNEL,
      {
        event: ACTION_AUTH_SIGNOUT_FINISHED,
        data: { options },
      },
      EVENT_ACTION_AUTH_SIGNOUT,
      AMPLIFY_SYMBOL
    );
  } catch (error) {
    Hub.dispatch(
      UI_CHANNEL,
      {
        event: ACTION_AUTH_SIGNOUT_FINISHED,
        data: { options, errorMessage: getErrorMessage(error) },
      },
      EVENT_ACTION_AUTH_SIGNOUT,
      AMPLIFY_SYMBOL
    );
  }
};
export const useAuth = () => {
  const [result, setResult] = React.useState({
    error: undefined,
    isLoading: true,
    user: undefined,
  });
  const fetchCurrentUserAttributes = React.useCallback(async () => {
    setResult((prevResult) => ({ ...prevResult, isLoading: true }));
    try {
      const attributes = await fetchUserAttributes();
      setResult({ user: { attributes }, isLoading: false });
    } catch (error) {
      setResult({ error, isLoading: false });
    }
  }, []);
  const handleAuth = React.useCallback(
    ({ payload }) => {
      switch (payload.event) {
        case "signedIn":
        case "signUp":
        case "tokenRefresh":
        case "autoSignIn": {
          fetchCurrentUserAttributes();
          break;
        }
        case "signedOut": {
          setResult({ user: undefined, isLoading: false });
          break;
        }
        case "tokenRefresh_failure":
        case "signIn_failure": {
          setResult({ error: payload.data, isLoading: false });
          break;
        }
        case "autoSignIn_failure": {
          setResult({ error: new Error(payload.message), isLoading: false });
          break;
        }
        default: {
          break;
        }
      }
    },
    [fetchCurrentUserAttributes]
  );
  React.useEffect(() => {
    const unsubscribe = Hub.listen("auth", handleAuth, "useAuth");
    fetchCurrentUserAttributes();
    return unsubscribe;
  }, [handleAuth, fetchCurrentUserAttributes]);
  return {
    ...result,
  };
};
export const validateField = (value, validations) => {
  for (const validation of validations) {
    if (value === undefined || value === "" || value === null) {
      if (validation.type === "Required") {
        return {
          hasError: true,
          errorMessage: validation.validationMessage || "The value is required",
        };
      } else {
        return {
          hasError: false,
        };
      }
    }
    const validationResult = checkValidation(value, validation);
    if (validationResult?.hasError) {
      return validationResult;
    }
  }
  return { hasError: false };
};
export const parseDateValidator = (dateValidator) => {
  const isTimestamp =
    `${parseInt(dateValidator)}`.length === dateValidator.length;
  return isTimestamp ? parseInt(dateValidator) : dateValidator;
};
const checkValidation = (value, validation) => {
  if (validation.numValues?.length) {
    switch (validation.type) {
      case "LessThanChar":
        return {
          hasError: !(value.length <= validation.numValues[0]),
          errorMessage:
            validation.validationMessage ||
            `The value must be shorter than ${validation.numValues[0]} characters`,
        };
      case "GreaterThanChar":
        return {
          hasError: !(value.length > validation.numValues[0]),
          errorMessage:
            validation.validationMessage ||
            `The value must be longer than ${validation.numValues[0]} characters`,
        };
      case "LessThanNum":
        return {
          hasError: !(value < validation.numValues[0]),
          errorMessage:
            validation.validationMessage ||
            `The value must be less than ${validation.numValues[0]}`,
        };
      case "GreaterThanNum":
        return {
          hasError: !(value > validation.numValues[0]),
          errorMessage:
            validation.validationMessage ||
            `The value must be greater than ${validation.numValues[0]}`,
        };
      case "EqualTo":
        return {
          hasError: !validation.numValues.some((el) => el === value),
          errorMessage:
            validation.validationMessage ||
            `The value must be equal to ${validation.numValues.join(" or ")}`,
        };
      default:
    }
  } else if (validation.strValues?.length) {
    switch (validation.type) {
      case "StartWith":
        return {
          hasError: !validation.strValues.some((el) => value.startsWith(el)),
          errorMessage:
            validation.validationMessage ||
            `The value must start with ${validation.strValues.join(", ")}`,
        };
      case "EndWith":
        return {
          hasError: !validation.strValues.some((el) => value.endsWith(el)),
          errorMessage:
            validation.validationMessage ||
            `The value must end with ${validation.strValues.join(", ")}`,
        };
      case "Contains":
        return {
          hasError: !validation.strValues.some((el) => value.includes(el)),
          errorMessage:
            validation.validationMessage ||
            `The value must contain ${validation.strValues.join(", ")}`,
        };
      case "NotContains":
        return {
          hasError: !validation.strValues.every((el) => !value.includes(el)),
          errorMessage:
            validation.validationMessage ||
            `The value must not contain ${validation.strValues.join(", ")}`,
        };
      case "BeAfter":
        return {
          hasError: !(
            new Date(value) >
            new Date(parseDateValidator(validation.strValues[0]))
          ),
          errorMessage:
            validation.validationMessage ||
            `The value must be after ${validation.strValues[0]}`,
        };
      case "BeBefore":
        return {
          hasError: !(
            new Date(value) <
            new Date(parseDateValidator(validation.strValues[0]))
          ),
          errorMessage:
            validation.validationMessage ||
            `The value must be before ${validation.strValues[0]}`,
        };
    }
  }
  switch (validation.type) {
    case "Email":
      const EMAIL_ADDRESS_REGEX =
        /^[-!#$%&'*+/0-9=?A-Z^_a-z`{|}~](.?[-!#$%&'*+/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*.?[a-zA-Z0-9])*.[a-zA-Z](-?[a-zA-Z0-9])+$/;
      return {
        hasError: !EMAIL_ADDRESS_REGEX.test(value),
        errorMessage:
          validation.validationMessage ||
          "The value must be a valid email address",
      };
    case "JSON":
      let isInvalidJSON = false;
      try {
        JSON.parse(value);
      } catch (e) {
        isInvalidJSON = true;
      }
      return {
        hasError: isInvalidJSON,
        errorMessage:
          validation.validationMessage ||
          "The value must be in a correct JSON format",
      };
    case "IpAddress":
      const IPV_4 =
        /^(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}$/;
      const IPV_6 =
        /^(?:(?:[a-fA-F\d]{1,4}:){7}(?:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,2}|:)|(?:[a-fA-F\d]{1,4}:){4}(?:(?::[a-fA-F\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,3}|:)|(?:[a-fA-F\d]{1,4}:){3}(?:(?::[a-fA-F\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,4}|:)|(?:[a-fA-F\d]{1,4}:){2}(?:(?::[a-fA-F\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,5}|:)|(?:[a-fA-F\d]{1,4}:){1}(?:(?::[a-fA-F\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$/;
      return {
        hasError: !(IPV_4.test(value) || IPV_6.test(value)),
        errorMessage:
          validation.validationMessage ||
          "The value must be an IPv4 or IPv6 address",
      };
    case "URL":
      let isInvalidUrl = false;
      try {
        new URL(value);
      } catch (e) {
        isInvalidUrl = true;
      }
      return {
        hasError: isInvalidUrl,
        errorMessage:
          validation.validationMessage ||
          "The value must be a valid URL that begins with a schema (i.e. http:// or mailto:)",
      };
    case "Phone":
      const PHONE = /^\+?\d[\d\s-]+$/;
      return {
        hasError: !PHONE.test(value),
        errorMessage:
          validation.validationMessage ||
          "The value must be a valid phone number",
      };
    default:
  }
};
const monthToShortMon = {
  "1": "Jan",
  "2": "Feb",
  "3": "Mar",
  "4": "Apr",
  "5": "May",
  "6": "Jun",
  "7": "Jul",
  "8": "Aug",
  "9": "Sep",
  "10": "Oct",
  "11": "Nov",
  "12": "Dec",
};
const invalidDateStr = "Invalid Date";
export function formatDate(date, dateFormat) {
  if (date === undefined || date === null) {
    return date;
  }
  const validDate = new Date(Date.parse(date));
  if (validDate.toString() === invalidDateStr) {
    return date;
  }
  const splitDate = date.split(/-|\+|Z/);
  const year = splitDate[0];
  const month = splitDate[1];
  const day = splitDate[2];
  const truncatedMonth = month.replace(/^0+/, "");
  switch (dateFormat) {
    case "locale":
      return validDate.toLocaleDateString();
    case "YYYY.MM.DD":
      return `${year}.${month}.${day}`;
    case "DD.MM.YYYY":
      return `${day}.${month}.${year}`;
    case "MM/DD/YYYY":
      return `${month}/${day}/${year}`;
    case "Mmm DD, YYYY":
      return `${monthToShortMon[truncatedMonth]} ${day}, ${year}`;
    default:
      return date;
  }
}
export function formatTime(time, timeFormat) {
  if (time === undefined || time === null) {
    return time;
  }
  const splitTime = time.split(/:|Z/);
  if (splitTime.length < 3) {
    return time;
  }
  const validTime = new Date();
  validTime.setHours(Number.parseInt(splitTime[0], 10));
  validTime.setMinutes(Number.parseInt(splitTime[1], 10));
  const splitSeconds = splitTime[2].split(".");
  validTime.setSeconds(
    Number.parseInt(splitSeconds[0], 10),
    Number.parseInt(splitSeconds[1], 10)
  );
  if (validTime.toString() === invalidDateStr) {
    return time;
  }
  switch (timeFormat) {
    case "locale":
      return validTime.toLocaleTimeString();
    case "hours24":
      return validTime.toLocaleTimeString("en-gb");
    case "hours12":
      return validTime.toLocaleTimeString("en-us");
    default:
      return time;
  }
}
export function formatDateTime(dateTimeStr, dateTimeFormat) {
  if (dateTimeStr === undefined || dateTimeStr === null) {
    return dateTimeStr;
  }
  const dateTime = /^\d+$/.test(dateTimeStr)
    ? new Date(Number.parseInt(dateTimeStr, 10))
    : new Date(Date.parse(dateTimeStr));
  if (dateTime.toString() === invalidDateStr) {
    return dateTimeStr;
  }
  if (dateTimeFormat === "locale") {
    return dateTime.toLocaleString();
  }
  const dateAndTime = dateTime.toISOString().split("T");
  const date = formatDate(dateAndTime[0], dateTimeFormat.dateFormat);
  const time = formatTime(dateAndTime[1], dateTimeFormat.timeFormat);
  return `${date} - ${time}`;
}
export function formatter(value, formatterInput) {
  switch (formatterInput.type) {
    case "DateFormat":
      return formatDate(value, formatterInput.format);
    case "DateTimeFormat":
      return formatDateTime(value, formatterInput.format);
    case "TimeFormat":
      return formatTime(value, formatterInput.format);
    default:
      return value;
  }
}
export const fetchByPath = (input, path, accumlator = []) => {
  const currentPath = path.split(".");
  const head = currentPath.shift();
  if (input && head && input[head] !== undefined) {
    if (!currentPath.length) {
      accumlator.push(input[head]);
    } else {
      fetchByPath(input[head], currentPath.join("."), accumlator);
    }
  }
  return accumlator[0];
};
export const processFile = async ({ file }) => {
  const fileExtension = file.name.split(".").pop();
  return file
    .arrayBuffer()
    .then((filebuffer) => window.crypto.subtle.digest("SHA-1", filebuffer))
    .then((hashBuffer) => {
      const hashArray = Array.from(new Uint8Array(hashBuffer));
      const hashHex = hashArray
        .map((a) => a.toString(16).padStart(2, "0"))
        .join("");
      return { file, key: `${hashHex}.${fileExtension}` };
    });
};

```

Contents of src/ui-components/KatschingTable.jsx:
```
/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

/* eslint-disable */
import * as React from "react";
import { getOverrideProps } from "./utils";
import { Flex, Text } from "@aws-amplify/ui-react";
import KatschingRowsContent from "./KatschingRowsContent";
export default function KatschingTable(props) {
  const { overrides, ...rest } = props;
  return (
    <Flex
      gap="1px"
      direction="column"
      width="509px"
      height="unset"
      justifyContent="flex-start"
      alignItems="flex-start"
      overflow="hidden"
      position="relative"
      padding="11px 20px 11px 20px"
      backgroundColor="rgba(220,222,224,1)"
      {...getOverrideProps(overrides, "KatschingTable")}
      {...rest}
    >
      <Flex
        gap="27px"
        direction="row"
        width="unset"
        height="unset"
        justifyContent="flex-start"
        alignItems="center"
        shrink="0"
        alignSelf="stretch"
        position="relative"
        padding="0px 0px 0px 0px"
        {...getOverrideProps(overrides, "Frame 15704")}
      >
        <Flex
          gap="3px"
          direction="row"
          width="96.5px"
          height="unset"
          justifyContent="center"
          alignItems="center"
          overflow="hidden"
          shrink="0"
          position="relative"
          padding="0px 15px 0px 15px"
          backgroundColor="rgba(220,222,224,1)"
          {...getOverrideProps(overrides, "h-spieler")}
        >
          <Text
            fontFamily="Inter"
            fontSize="12px"
            fontWeight="700"
            color="rgba(13,26,38,1)"
            lineHeight="18px"
            textAlign="center"
            display="block"
            direction="column"
            justifyContent="unset"
            textDecoration="underline"
            width="95px"
            height="unset"
            gap="unset"
            alignItems="unset"
            shrink="0"
            position="relative"
            padding="0px 0px 0px 0px"
            whiteSpace="pre-wrap"
            children="Spieler"
            {...getOverrideProps(overrides, "Spieler")}
          ></Text>
        </Flex>
        <Flex
          gap="1px"
          direction="row"
          width="unset"
          height="unset"
          justifyContent="flex-start"
          alignItems="center"
          overflow="hidden"
          grow="1"
          shrink="1"
          basis="0"
          position="relative"
          padding="0px 10px 0px 10px"
          backgroundColor="rgba(220,222,224,1)"
          {...getOverrideProps(overrides, "h-last-katsching")}
        >
          <Text
            fontFamily="Inter"
            fontSize="12px"
            fontWeight="600"
            color="rgba(13,26,38,1)"
            lineHeight="18px"
            textAlign="left"
            display="block"
            direction="column"
            justifyContent="unset"
            textDecoration="underline"
            width="unset"
            height="unset"
            gap="unset"
            alignItems="unset"
            shrink="0"
            position="relative"
            padding="0px 0px 0px 0px"
            whiteSpace="pre-wrap"
            children="Letzter Katsching"
            {...getOverrideProps(overrides, "Letzter Katsching")}
          ></Text>
        </Flex>
        <Flex
          gap="10px"
          direction="row"
          width="unset"
          height="unset"
          justifyContent="flex-end"
          alignItems="center"
          overflow="hidden"
          grow="1"
          shrink="1"
          basis="0"
          position="relative"
          padding="0px 30px 0px 0px"
          backgroundColor="rgba(220,222,224,1)"
          {...getOverrideProps(overrides, "h-counter")}
        >
          <Text
            fontFamily="Inter"
            fontSize="12px"
            fontWeight="600"
            color="rgba(13,26,38,1)"
            lineHeight="18px"
            textAlign="left"
            display="block"
            direction="column"
            justifyContent="unset"
            textDecoration="underline"
            width="unset"
            height="unset"
            gap="unset"
            alignItems="unset"
            shrink="0"
            position="relative"
            padding="0px 0px 0px 0px"
            whiteSpace="pre-wrap"
            children="Katschings"
            {...getOverrideProps(overrides, "Katschings")}
          ></Text>
        </Flex>
      </Flex>
      <KatschingRowsContent
        display="flex"
        gap="20px"
        direction="row"
        width="unset"
        height="45px"
        justifyContent="center"
        alignItems="center"
        overflow="hidden"
        shrink="0"
        alignSelf="stretch"
        position="relative"
        boxShadow="0px 1px 4px rgba(0, 0, 0, 0.25)"
        padding="3px 0px 3px 22px"
        backgroundColor="rgba(239,240,240,1)"
        {...getOverrideProps(overrides, "KatschingRowsContent3855147")}
      ></KatschingRowsContent>
      <KatschingRowsContent
        display="flex"
        gap="20px"
        direction="row"
        width="unset"
        height="45px"
        justifyContent="center"
        alignItems="center"
        overflow="hidden"
        shrink="0"
        alignSelf="stretch"
        position="relative"
        boxShadow="0px 1px 4px rgba(0, 0, 0, 0.25)"
        padding="3px 0px 3px 22px"
        backgroundColor="rgba(239,240,240,1)"
        {...getOverrideProps(overrides, "KatschingRowsContent3855774")}
      ></KatschingRowsContent>
    </Flex>
  );
}

```

Contents of src/models/index.js:
```
// @ts-check
import { initSchema } from '@aws-amplify/datastore';
import { schema } from './schema';



const { Player, HistoryEntry } = initSchema(schema);

export {
  Player,
  HistoryEntry
};
```

Contents of src/models/schema.js:
```
export const schema = {
    "models": {
        "Player": {
            "name": "Player",
            "fields": {
                "id": {
                    "name": "id",
                    "isArray": false,
                    "type": "ID",
                    "isRequired": true,
                    "attributes": []
                },
                "name": {
                    "name": "name",
                    "isArray": false,
                    "type": "String",
                    "isRequired": true,
                    "attributes": []
                },
                "emoji": {
                    "name": "emoji",
                    "isArray": false,
                    "type": "String",
                    "isRequired": false,
                    "attributes": []
                },
                "katschings": {
                    "name": "katschings",
                    "isArray": false,
                    "type": "Int",
                    "isRequired": true,
                    "attributes": []
                },
                "lastKatsching": {
                    "name": "lastKatsching",
                    "isArray": false,
                    "type": "AWSDateTime",
                    "isRequired": true,
                    "attributes": []
                },
                "history": {
                    "name": "history",
                    "isArray": true,
                    "type": {
                        "model": "HistoryEntry"
                    },
                    "isRequired": false,
                    "attributes": [],
                    "isArrayNullable": true,
                    "association": {
                        "connectionType": "HAS_MANY",
                        "associatedWith": [
                            "playerId"
                        ]
                    }
                },
                "createdAt": {
                    "name": "createdAt",
                    "isArray": false,
                    "type": "AWSDateTime",
                    "isRequired": false,
                    "attributes": [],
                    "isReadOnly": true
                },
                "updatedAt": {
                    "name": "updatedAt",
                    "isArray": false,
                    "type": "AWSDateTime",
                    "isRequired": false,
                    "attributes": [],
                    "isReadOnly": true
                }
            },
            "syncable": true,
            "pluralName": "Players",
            "attributes": [
                {
                    "type": "model",
                    "properties": {}
                },
                {
                    "type": "auth",
                    "properties": {
                        "rules": [
                            {
                                "allow": "public",
                                "operations": [
                                    "create",
                                    "update",
                                    "delete",
                                    "read"
                                ]
                            }
                        ]
                    }
                }
            ]
        },
        "HistoryEntry": {
            "name": "HistoryEntry",
            "fields": {
                "id": {
                    "name": "id",
                    "isArray": false,
                    "type": "ID",
                    "isRequired": true,
                    "attributes": []
                },
                "playerId": {
                    "name": "playerId",
                    "isArray": false,
                    "type": "ID",
                    "isRequired": true,
                    "attributes": []
                },
                "time": {
                    "name": "time",
                    "isArray": false,
                    "type": "AWSDateTime",
                    "isRequired": true,
                    "attributes": []
                },
                "event": {
                    "name": "event",
                    "isArray": false,
                    "type": "String",
                    "isRequired": true,
                    "attributes": []
                },
                "comments": {
                    "name": "comments",
                    "isArray": false,
                    "type": "String",
                    "isRequired": false,
                    "attributes": []
                },
                "createdAt": {
                    "name": "createdAt",
                    "isArray": false,
                    "type": "AWSDateTime",
                    "isRequired": false,
                    "attributes": [],
                    "isReadOnly": true
                },
                "updatedAt": {
                    "name": "updatedAt",
                    "isArray": false,
                    "type": "AWSDateTime",
                    "isRequired": false,
                    "attributes": [],
                    "isReadOnly": true
                }
            },
            "syncable": true,
            "pluralName": "HistoryEntries",
            "attributes": [
                {
                    "type": "model",
                    "properties": {}
                },
                {
                    "type": "key",
                    "properties": {
                        "name": "byPlayer",
                        "fields": [
                            "playerId",
                            "time"
                        ]
                    }
                },
                {
                    "type": "auth",
                    "properties": {
                        "rules": [
                            {
                                "allow": "public",
                                "operations": [
                                    "create",
                                    "update",
                                    "delete",
                                    "read"
                                ]
                            }
                        ]
                    }
                }
            ]
        }
    },
    "enums": {},
    "nonModels": {},
    "codegenVersion": "3.4.4",
    "version": "bfce8266010ffe12e54c1d2618957be1"
};
```

Contents of src/models/schema.d.ts:
```
import { Schema } from '@aws-amplify/datastore';

export declare const schema: Schema;
```

Contents of src/models/index.d.ts:
```
import { ModelInit, MutableModel, __modelMeta__, ManagedIdentifier } from "@aws-amplify/datastore";
// @ts-ignore
import { LazyLoading, LazyLoadingDisabled, AsyncCollection } from "@aws-amplify/datastore";





type EagerPlayer = {
  readonly [__modelMeta__]: {
    identifier: ManagedIdentifier<Player, 'id'>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly id: string;
  readonly name: string;
  readonly emoji?: string | null;
  readonly katschings: number;
  readonly lastKatsching: string;
  readonly history?: (HistoryEntry | null)[] | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
}

type LazyPlayer = {
  readonly [__modelMeta__]: {
    identifier: ManagedIdentifier<Player, 'id'>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly id: string;
  readonly name: string;
  readonly emoji?: string | null;
  readonly katschings: number;
  readonly lastKatsching: string;
  readonly history: AsyncCollection<HistoryEntry>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
}

export declare type Player = LazyLoading extends LazyLoadingDisabled ? EagerPlayer : LazyPlayer

export declare const Player: (new (init: ModelInit<Player>) => Player) & {
  copyOf(source: Player, mutator: (draft: MutableModel<Player>) => MutableModel<Player> | void): Player;
}

type EagerHistoryEntry = {
  readonly [__modelMeta__]: {
    identifier: ManagedIdentifier<HistoryEntry, 'id'>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly id: string;
  readonly playerId: string;
  readonly time: string;
  readonly event: string;
  readonly comments?: string | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
}

type LazyHistoryEntry = {
  readonly [__modelMeta__]: {
    identifier: ManagedIdentifier<HistoryEntry, 'id'>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly id: string;
  readonly playerId: string;
  readonly time: string;
  readonly event: string;
  readonly comments?: string | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
}

export declare type HistoryEntry = LazyLoading extends LazyLoadingDisabled ? EagerHistoryEntry : LazyHistoryEntry

export declare const HistoryEntry: (new (init: ModelInit<HistoryEntry>) => HistoryEntry) & {
  copyOf(source: HistoryEntry, mutator: (draft: MutableModel<HistoryEntry>) => MutableModel<HistoryEntry> | void): HistoryEntry;
}
```

Contents of src/components/AuthenticatorStyles.css:
```
 
```

Contents of src/components/katsching/HistoryTable.css:
```
.history-table-container {
    width: 91% !important;
    height: 100% !important;
    padding: 0 !important;
    background: #dcdee0 !important;
    border-radius: 10px !important;
    overflow: hidden !important;
  }
  
  .MuiTableContainer-root {
    width: 100% !important;
    height: 100% !important;
    overflow: auto !important;
  }
  
  .MuiTable-root {
    width: 100% !important;
    height: 100% !important;
    table-layout: fixed !important;
  }
  
  .table-header {
    font-family: 'Montserrat', cursive !important;
    background-color: #dcdee0 !important;
    font-weight: 700 !important;
    text-decoration: underline !important;
    color: #0d1a26 !important;
    font-size: 16px !important;
    text-align: left !important;
    padding: 12px 15px !important;
  }
  
  .table-cell {
    font-family: 'Montserrat', sans-serif !important;
    color: #0d1a26 !important;
    font-size: 14px !important;
    padding: 12px 15px !important;
    text-align: left !important;
    vertical-align: top !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
    hyphens: auto !important;
  }
  
  .time-cell {
    width: 20% !important;
  }
  
  .event-cell {
    width: 25% !important;
  }
  
  .comment-cell {
    width: 45% !important;
  }
  
  .actions-cell {
    width: 10% !important;
    text-align: center !important;
  }
  
  .delete-button {
    color: #ff4d4f !important;
    transition: all 0.3s ease !important;
  }
  
  .delete-button:hover {
    color: #ff7875 !important;
    transform: scale(1.1) !important;
  }
  
  .MuiTableHead-root {
    position: sticky !important;
    top: 0 !important;
    z-index: 1 !important;
    background-color: #dcdee0 !important;
  }
  
  @media (max-width: 768px) {
    .table-cell, .table-header {
      font-size: 12px !important;
      padding: 8px !important;
    }
    
    .time-cell {
      width: 25% !important;
    }
    
    .event-cell {
      width: 30% !important;
    }
    
    .comment-cell {
      width: 35% !important;
    }
    
    .actions-cell {
      width: 10% !important;
    }
  }

/* Add this new style for the table header cells */
.MuiTableCell-head {
  font-weight: 700 !important;
  font-family: 'Montserrat', cursive !important;
}

```

Contents of src/components/katsching/KatschingPopup.js:
```
import React, { useState, useEffect, useRef, useCallback } from 'react';
import './KatschingPopup.css';
import { Player, HistoryEntry } from '../../models';
import { DataStore } from 'aws-amplify/datastore';

const KatschingPopup = ({ isVisible, togglePopup, addKatschings, selectedPlayer, refreshHistory }) => {
    const [comment, setComment] = useState('');
    const [isAnimating, setIsAnimating] = useState(false);
    const [isClosing, setIsClosing] = useState(false);

    const popupRef = useRef(null);
    const commentRef = useRef(null);

    const closePopup = useCallback(() => {
        setIsClosing(true);
        setTimeout(() => {
            togglePopup();
            setIsClosing(false);
        }, 300);
    }, [togglePopup]);

    useEffect(() => {
        if (isVisible) {
            setIsAnimating(true);
            setIsClosing(false);
            setTimeout(() => setIsAnimating(false), 400);
        } else {
            setIsClosing(true);
            setTimeout(() => {
                setIsClosing(false);
                setIsAnimating(false);
            }, 300);
        }
    }, [isVisible]);

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (popupRef.current && !popupRef.current.contains(event.target)) {
                closePopup();
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [closePopup]);

    useEffect(() => {
        if (isVisible && commentRef.current) {
            commentRef.current.focus();
        }
    }, [isVisible]);

    const handleAddKatsching = async () => {
        if (selectedPlayer) {
            try {
                console.log("Adding Katsching for player:", selectedPlayer);
                const currentSelectedPlayer = await DataStore.query(Player, selectedPlayer.id);

                if (!currentSelectedPlayer) {
                    throw new Error("Selected player not found in the database");
                }

                const updatedPlayer = Player.copyOf(currentSelectedPlayer, item => {
                    item.katschings += 1;
                    item.lastKatsching = new Date().toISOString();
                });

                const newHistoryEntry = new HistoryEntry({
                    playerId: updatedPlayer.id,
                    time: new Date().toISOString(),
                    event: `1 Katsching für ${updatedPlayer.name}`,
                    comments: comment,
                });

                console.log("Calling addKatschings with:", updatedPlayer, newHistoryEntry);
                await addKatschings(updatedPlayer, newHistoryEntry);
                console.log("Katsching added successfully");
                setComment('');
                closePopup();
                refreshHistory(); // Call the refreshHistory function after adding a Katsching
            } catch (error) {
                console.error("Error adding Katsching:", error);
                alert("Failed to add Katsching. Please try again.");
            }
        } else {
            console.error("No player selected");
            alert("No player selected. Please try again.");
        }
    };

    if (!isVisible && !isAnimating) return null;

    return (
        <div className={`popup-overlay ${isVisible ? 'visible' : ''} ${isClosing ? 'closing' : ''}`}>
            <div className="popup-container" ref={popupRef}>
                <div className="popup-content">
                    <div className="popup-subtitle">Warum Katsching?</div>
                    <textarea 
                        ref={commentRef}
                        className="popup-comment" 
                        placeholder="Kommentar" 
                        value={comment} 
                        onChange={(e) => setComment(e.target.value)} 
                    />
                    <div className="popup-add-button" onClick={handleAddKatsching}>Katsching hinzufügen</div>
                </div>
            </div>
        </div>
    );
};

export default KatschingPopup;

```

Contents of src/components/katsching/KatschingTable.css:
```
.table-container {
  width: 100% !important;
  height: 100% !important;
  padding: 0 !important;
  background: #dcdee0 !important;
  border-radius: 10px !important;
  overflow: hidden !important;
}

.table-header {
  display: flex !important;
  align-items: center !important;
  width: 100% !important;
}

.table-header-cell {
  flex: 1 !important;
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  background: #dcdee0 !important;
  height: 18px !important;
  padding: 0 15px !important;
  white-space: nowrap !important;
}

.table-header-cell:last-child {
  width: 0 !important;
}

.table-header-text {
  color: #0d1a26 !important;
  font-size: 16px !important;
  font-family: 'Montserrat' !important;
  font-weight: 1000 !important;
  text-decoration: underline !important;
  line-height: 18px !important;
  word-wrap: break-word !important;
  text-align: center !important;
}

.table-row {
  display: flex !important;
  align-items: center !important;
  width: 100% !important;
}

.table-cell {
  flex: 1 !important;
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  background: #dcdee0 !important;
  padding: 0 15px !important;
  font-family: 'Montserrat', sans-serif !important;
  color: #0d1a26 !important;
  font-size: 16px !important;
  font-weight: 400 !important;
  line-height: 18px !important;
  white-space: nowrap !important;
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  text-align: center !important;
}

.table-header-cell,
.table-cell {
  justify-content: center !important;
  text-align: center !important;
}

.katsching-container {
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  gap: 10px !important;
}

.katsching-counter {
  text-align: right !important;
  width: 10px !important;
}

.add-katsching-button {
  background: #EFF0F0 !important;
  border-radius: 30% !important;
  width: 24px !important;
  height: 24px !important;
  min-width: 24px !important;
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  cursor: pointer !important;
  margin-left: 0 !important;
}

@media (max-width: 768px) {
  .MuiTableCell-root {
    font-size: 12px !important;
    padding: 6px !important;
  }
}

.MuiTableContainer-root {
  width: 100% !important;
  height: 100% !important;
  overflow: auto !important;
}

.MuiTable-root {
  width: 100% !important;
  height: 100% !important;
  table-layout: fixed !important;
}

.MuiTableCell-root {
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  white-space: normal !important;
}

.MuiTableCell-head {
  font-family: 'Montserrat', cursive !important;
  background-color: #dcdee0 !important;
}

.MuiTableCell-body {
  font-family: 'Montserrat', sans-serif !important;
}

.player-name-cell {
  width: 25% !important;
}

.last-katsching-cell {
  width: 40% !important;
}

.katschings-cell {
  width: 25% !important;
}

.actions-cell {
  width: 10% !important;
}

.MuiTableHead-root {
  position: sticky !important;
  top: 0 !important;
  z-index: 1 !important;
  background-color: #dcdee0 !important;
}

.funny-button {
  transition: all 0.3s ease !important;
}

.funny-button:hover {
  transform: scale(1.2) rotate(15deg) !important;
  background-color: #3be2ff !important;
  box-shadow: 0 0 10px rgba(255, 235, 59, 0.7) !important;
}

.funny-button:active {
  transform: scale(0.9) rotate(-15deg) !important;
  background-color: #20a1cc !important;
}

@keyframes wiggle {
  0% { transform: rotate(0deg); }
  25% { transform: rotate(-5deg); }
  50% { transform: rotate(5deg); }
  75% { transform: rotate(-5deg); }
  100% { transform: rotate(0deg); }
}

.funny-button:focus {
  animation: wiggle 0.5s ease-in-out;
  outline: none !important;
}

```

Contents of src/components/katsching/KatschingPopup.css:
```
@import url('https://fonts.googleapis.com/css2?family=Irish+Grover&family=Montserrat&display=swap');

:root {
    --primary-bg: #BCECF5;
    --secondary-bg: #EFF0F0;
    --overlay-bg: rgba(0, 0, 0, 0.5);
    --text-color: #304050;
    --font-family-main: 'Montserrat', sans-serif;
    --font-family-secondary: 'Irish Grover', cursive;
    --font-size-main: 19px;
    --line-height-main: 1.5;
    --box-shadow: 6px 5px 3px rgba(0, 0, 0, 0.25);
    --input-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
}

.popup-overlay {
    position: fixed;
    inset: 0;
    background: var(--overlay-bg);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s ease, visibility 0.2s ease;
}

.popup-overlay.visible {
    opacity: 1;
    visibility: visible;
}

.popup-overlay.closing {
    opacity: 0;
    transition: opacity 0.2s ease, visibility 0s 0.2s;
}

.popup-container {
    max-width: 300px;
    width: 90%;
    background: var(--primary-bg);
    border-radius: 20px;
    box-shadow: var(--box-shadow);
    overflow: hidden;
    transform: scale(0.5);
    opacity: 0;
    transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1), opacity 0.3s ease;
}

.popup-overlay.visible .popup-container {
    animation: popBounce 0.4s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

.popup-overlay.closing .popup-container {
    animation: popClose 0.3s ease-in-out forwards;
}

.popup-content {
    padding: 25px;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
}

.popup-subtitle {
    color: var(--text-color);
    font: 500 24px/1.3 var(--font-family-secondary);
    text-align: center;
    margin-bottom: 10px;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
}

.popup-counter-group {
    display: flex;
    padding: 1px 8px;
    gap: 16px;
    align-items: center;
}

.popup-counter {
    width: 20%;
    padding: 2px 7px;
    background: var(--secondary-bg);
    border-radius: 42px;
    box-shadow: var(--input-shadow);
    border: none;
    cursor: pointer;
}

.popup-counter::before {
    content: '';
    width: 40px;
    height: 40px;
    position: absolute;
    top: 2px;
    border: 4px #89949F solid;
    border-radius: 50%;
}

.popup-counter.minus span,
.popup-counter.plus span {
    position: relative;
    z-index: 1;
    color: #89949F;
}

.popup-counter-value,
.popup-comment {
    padding: 8px 10px;
    background: var(--secondary-bg);
    border-radius: 42px;
    box-shadow: var(--input-shadow);
    font-family: var(--font-family-main);
}

.popup-counter-value {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
}

.popup-comment {
    width: 100%;
    min-height: 80px;
    padding: 12px;
    background: var(--secondary-bg);
    border-radius: 15px;
    box-shadow: var(--input-shadow);
    font-family: var(--font-family-main);
    font-size: 16px;
    color: var(--text-color);
    border: none;
    resize: vertical;
    overflow-y: auto;
    transition: box-shadow 0.3s ease;
}

.popup-comment:focus {
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
    outline: none;
}

.popup-add-button {
    width: 100%;
    padding: 12px;
    background: #1EAB35; /* Use a solid color for better performance */
    border-radius: 10px;
    color: white;
    font: 600 18px var(--font-family-secondary);
    text-align: center;
    cursor: pointer;
    transition: background-color 0.2s ease, transform 0.2s ease;
}

.popup-add-button:hover {
    background-color: #1AA55A; /* Slightly change the color on hover */
    transform: scale(1.02); /* Slightly enlarge on hover */
}

.popup-add-button:active {
    transform: scale(0.98); /* Slightly shrink on active */
}

@keyframes popBounce {
    0% { transform: scale(0.5); opacity: 0; }
    70% { transform: scale(1.05); opacity: 1; }
    85% { transform: scale(0.98); opacity: 1; }
    100% { transform: scale(1); opacity: 1; }
}

@keyframes popClose {
    0% { transform: scale(1) rotate(0); opacity: 1; }
    100% { transform: scale(0.5) rotate(-10deg); opacity: 0; }
}

```

Contents of src/components/katsching/HistoryTable.js:
```
import React, { useState, useEffect, useCallback } from 'react';
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, IconButton } from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import { DataStore } from 'aws-amplify/datastore';
import { HistoryEntry } from '../../models';
import './HistoryTable.css';

const HistoryTable = ({ isAdmin, refreshTrigger }) => {
  const [history, setHistory] = useState([]);

  const sortHistoryByTime = (history) => {
    return [...history].sort((a, b) => new Date(b.time) - new Date(a.time));
  };

  const fetchHistory = useCallback(async () => {
    try {
      const historyData = await DataStore.query(HistoryEntry);
      setHistory(sortHistoryByTime(historyData));
    } catch (err) {
      console.error('Error fetching history:', err);
    }
  }, []);

  useEffect(() => {
    fetchHistory();
  }, [fetchHistory, refreshTrigger]);

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleString('en-GB', {
      hour: '2-digit',
      minute: '2-digit',
      day: '2-digit',
      month: '2-digit',
      year: '2-digit',
    });
  };

  const deleteHistoryEntry = async (entryId) => {
    try {
      await DataStore.delete(HistoryEntry, entryId);
      setHistory(history.filter(entry => entry.id !== entryId));
    } catch (err) {
      console.error("Error deleting history entry:", err);
    }
  };

  return (
    <TableContainer component={Paper}>
      <Table stickyHeader>
        <TableHead>
          <TableRow>
            <TableCell>Uhrzeit</TableCell>
            <TableCell>Event</TableCell>
            <TableCell>Kommentar</TableCell>
            {isAdmin && <TableCell>Aktionen</TableCell>}
          </TableRow>
        </TableHead>
        <TableBody>
          {history.map((entry, index) => (
            <TableRow key={index}>
              <TableCell>{formatDate(entry.time)}</TableCell>
              <TableCell>{entry.event}</TableCell>
              <TableCell>{entry.comments}</TableCell>
              {isAdmin && (
                <TableCell>
                  <IconButton onClick={() => deleteHistoryEntry(entry.id)} className="delete-button">
                    <DeleteIcon />
                  </IconButton>
                </TableCell>
              )}
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
};

export default HistoryTable;

```

Contents of src/components/katsching/BeerConfetti.css:
```
.beer-confetti-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 9999;
}

.beer-emoji {
  position: absolute;
  top: -20px;
  font-size: 20px;
  animation: fall linear forwards;
}

@keyframes fall {
  from {
    transform: translateY(0) rotate(0deg);
  }
  to {
    transform: translateY(100vh) rotate(360deg);
  }
}

```

Contents of src/components/katsching/emoji-mart.css:
```
/* Add the styles below to your existing Popup.css file */

.popup-emoji-picker {
    position: relative;
}

.selected-emoji {
    width: 272px;
    height: 34px;
    padding: 2px 7px;
    background: var(--secondary-bg);
    border-radius: 42px;
    box-shadow: var(--input-shadow);
    border: none;
    font-size: var(--font-size-main);
    font-family: var(--font-family-main);
    color: var(--text-color);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
}

.emoji-mart {
    position: absolute;
    top: 40px; /* Adjust position as needed */
    z-index: 1000; /* Ensure the picker appears above other elements */
}

```

Contents of src/components/katsching/KatschingTable.js:
```
import React from 'react';
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, IconButton } from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import './KatschingTable.css';

const KatschingTable = ({ players, isAdmin, toggleKatschingPopup, editKatschingScore, isLoggedIn }) => {
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleString('en-GB', {
      hour: '2-digit',
      minute: '2-digit',
      day: '2-digit',
      month: '2-digit',
      year: '2-digit',
    });
  };

  return (
    <TableContainer component={Paper}>
      <Table stickyHeader>
        <TableHead>
          <TableRow>
            <TableCell>Spieler</TableCell>
            <TableCell className="last-katsching-cell">Letzter Katsching</TableCell>
            <TableCell>Katschings</TableCell>
            {isAdmin && <TableCell className="actions-cell">Aktionen</TableCell>}
          </TableRow>
        </TableHead>
        <TableBody>
          {players.map((player, index) => (
            <TableRow key={index}>
              <TableCell className="player-name-cell">{player.name}</TableCell>
              <TableCell>
                {player.lastKatsching ? formatDate(player.lastKatsching) : "No Katsching yet"}
              </TableCell>
              <TableCell>
                <div className="katsching-container">
                  <div className="katsching-counter">{player.katschings}</div>
                  {isLoggedIn && (
                    <IconButton 
                      className="add-katsching-button funny-button" 
                      onClick={() => toggleKatschingPopup(player)}
                    >
                      <AddIcon fontSize="small" />
                    </IconButton>
                  )}
                </div>
              </TableCell>
              {isAdmin && (
                <TableCell>
                  <IconButton onClick={() => editKatschingScore(player.id, prompt("New Katsching Score:", player.katschings))}>
                    Edit
                  </IconButton>
                </TableCell>
              )}
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
};

export default KatschingTable;

```

Contents of src/components/katsching/AddPlayer.css:
```
@import url('https://fonts.googleapis.com/css2?family=Irish+Grover&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Montserrat&display=swap');
/* Popup.css */
:root {
    --primary-bg: #BCECF5;
    --secondary-bg: #EFF0F0;
    --overlay-bg: rgba(0, 0, 0, 0.5);
    --text-color: #304050;
    --divider-bg: #FAFAFA;
    --divider-color: black;
    --font-family-main: 'Montserrat';
    --font-family-secondary: 'Irish Grover';
    --font-size-main: 19px;
    --font-size-subtitle: 18px;
    --font-size-divider: 16px;
    --line-height-main: 28.5px;
    --line-height-subtitle: 27px;
    --line-height-divider: 24px;
    --box-shadow: 6px 5px 3px rgba(0, 0, 0, 0.25);
    --input-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
}

.popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--overlay-bg);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.popup-container {
    border-radius: 10px;
    z-index: 1000;
}

.popup-content {
    width: 100%;
    height: 100%;
    padding: 22px;
    background: var(--primary-bg);
    box-shadow: var(--box-shadow);
    border-radius: 29px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 17px;
    z-index: 1000;
}

.popup-title, .popup-label, .popup-subtitle {
    color: var(--text-color);
    font-size: var(--font-size-main);
    font-family: var(--font-family-main);
    font-weight: 400;
    line-height: var(--line-height-main);
    word-wrap: break-word;
    height: auto;
    width: auto;
}

.popup-input-group, .popup-input-container, .popup-counter-group {
    display: flex;
    align-items: center;
    justify-content: center;
}


.popup-input-container {
    padding: 0 6px;
    flex-direction: column;
    align-items: flex-start;
}

.popup-name, .popup-comment {
    width: auto;
    height: auto;
    padding: 2px 7px;
    background: var(--secondary-bg);
    border-radius: 42px;
    box-shadow: var(--input-shadow);
    border: none;
    font-size: var(--font-size-main);
    font-family: var(--font-family-main);
    color: var(--text-color);
}

.popup-emoji {
    width: auto;
    height: auto;
    padding: 2px 7px;
    background: var(--secondary-bg);
    border-radius: 42px;
    box-shadow: var(--input-shadow);
    border: none;
    font-size: var(--font-size-main);
    font-family: var(--font-family-main);
    color: var(--text-color);
}

.popup-counter-group {
    display: flex;
    padding: 1px 8px;
    gap: 16px;
    align-items: center;
    justify-content: center;
}

.popup-counter {
    width: 20%;
    padding: 2px 7px;
    background: var(--secondary-bg);
    border-radius: 42px;
    box-shadow: var(--input-shadow);
    border: none;
    cursor: pointer;  /* Makes the counter behave like a button */
    align-items: center;
}

.popup-counter::before {
    content: '';
    width: 40px;
    height: 40px;
    position: absolute;
    top: 2px;
    border: 4px #89949F solid;
    border-radius: 50%;  /* Make the border circular */
}

.popup-counter.minus span,
.popup-counter.plus span {
    position: relative;
    z-index: 1; /* Ensure the text appears above the circle */
    color:#89949F;
}

.popup-counter-value {
    width: auto;
    height: auto;
    padding: 8px 10px;
    background: var(--secondary-bg);
    border-radius: 42px;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    font-family: var(--font-family-main);
    box-shadow: var(--input-shadow);
}

.popup-add-button {
    padding: 8px 7px;
    background: linear-gradient(90deg, #AE2828 0%, #947B23 10%, #8AA421 20%, #1EAB35 30%, #1AA55A 40%, #1BCCB6 50%, #1966C0 60%, #671FAF 70%, #BB188D 80%, #DD124F 90%, #D80C0C 100%);
    border-radius: 4px;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 13px;
    color: white;
    font-size: 16px;
    font-family: var(--font-family-secondary);
    font-weight: 600;
    line-height: var(--line-height-divider);
    cursor: pointer;
    box-shadow: 0 0 20px rgba(255, 255, 255, 0.6); /* Added glow effect */
    animation: moveGradient 5s linear infinite, glow 1.5s ease-in-out infinite alternate;
}

/* Keyframe animation for moving the gradient */
@keyframes moveGradient {
    0% {
        background-position: 0% 50%;
    }
    100% {
        background-position: 100% 50%;
    }
}

/* Keyframe animation for glowing effect */
@keyframes glow {
    from {
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.4);
    }
    to {
        box-shadow: 0 0 20px rgba(255, 255, 255, 1);
    }
}



/* Add the styles below to your existing Popup.css file */

/* Add these styles to your existing Popup.css */

.popup-emoji-picker {
    position: sticky;
}

.selected-emoji {
    width: auto;
    height: 34px;
    padding: 2px 7px;
    background: var(--secondary-bg);
    border-radius: 42px;
    box-shadow: var(--input-shadow);
    border: none;
    font-size: var(--font-size-main);
    font-family: var(--font-family-main);
    color: var(--text-color);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
}

.emoji-mart {
    position: sticky;
    top: 40px; /* Adjust position as needed */
    z-index: 1000; /* Ensure the picker appears above other elements */
}

.picker-container {
    position: absolute;
    top: 100%; /* Adjust this value to place the picker above the selected emoji */
    z-index: 1000;
}

```

Contents of src/components/katsching/BeerConfetti.js:
```
import React, { useEffect, useState } from 'react';
import './BeerConfetti.css';

const BeerConfetti = ({ isActive, onAnimationComplete }) => {
  const [emojis, setEmojis] = useState([]);

  useEffect(() => {
    if (isActive) {
      const newEmojis = [];
      for (let i = 0; i < 50; i++) {
        newEmojis.push({
          id: i,
          left: `${Math.random() * 100}%`,
          animationDuration: `${Math.random() * 2 + 1}s`,
          animationDelay: `${Math.random() * 0.5}s`
        });
      }
      setEmojis(newEmojis);

      const timer = setTimeout(() => {
        onAnimationComplete();
      }, 3000);

      return () => clearTimeout(timer);
    }
  }, [isActive, onAnimationComplete]);

  if (!isActive) return null;

  return (
    <div className="beer-confetti-container">
      {emojis.map((emoji) => (
        <div
          key={emoji.id}
          className="beer-emoji"
          style={{
            left: emoji.left,
            animationDuration: emoji.animationDuration,
            animationDelay: emoji.animationDelay
          }}
        >
          🍺
        </div>
      ))}
    </div>
  );
};

export default BeerConfetti;

```

Contents of src/components/katsching/AddPlayer.js:
```
import React, { useState, useEffect, useRef } from 'react';
import data from '@emoji-mart/data';
import Picker from '@emoji-mart/react';
import './AddPlayer.css';
import { Player, HistoryEntry } from '../../models';

const Popup = ({ isVisible, togglePopup, addPlayer }) => {
    const [emoji, setEmoji] = useState('💸'); // Default emoji
    const [showPicker, setShowPicker] = useState(false);
    const [name, setName] = useState('');
    const [katschings, setKatschings] = useState(1); // Default value of Katschings
    const [comment, setComment] = useState(''); // State to manage the comment

    const popupRef = useRef(null); // Ref for the popup container

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (popupRef.current && !popupRef.current.contains(event.target)) {
                togglePopup(); // Close the popup if clicked outside
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [togglePopup]);

    if (!isVisible) return null;

    const handleEmojiSelect = (selectedEmoji) => {
        setEmoji(selectedEmoji.native);
        setShowPicker(false); // Close the picker after selecting an emoji
    };

    const handleAddPlayer = () => {
        const fullName = `${name} ${emoji}`;
        const katschingText = katschings === 1 ? 'Katsching' : 'Katschings';

        const newPlayer = new Player({
            name: fullName,
            emoji,
            katschings,
            lastKatsching: new Date().toISOString(),
        });

        const newHistoryEntry = new HistoryEntry({
            playerId: newPlayer.id,
            time: new Date().toISOString(),
            event: `${fullName} wurde als neuer Spieler hinzugefügt. ${katschings} ${katschingText}`,
            comments: comment,
        });

        addPlayer(newPlayer, newHistoryEntry);
        togglePopup();
        setName('');
        setKatschings(1);
        setComment('');
    };

    const handleKatschingsChange = (e) => {
        const value = parseInt(e.target.value, 10);
        if (!isNaN(value) && value >= 0) {
            setKatschings(value);
        }
    };

    return (
        <div className="popup-overlay">
            <div className="popup-container" ref={popupRef}>
                <div className="popup-content">
                    <div className="popup-title">Füge einen neuen Wicht hinzu.</div>
                    <div className="popup-input-group">
                        <div className="popup-input-container">
                            <div className="popup-label">Name</div>
                            <input
                                className="popup-name"
                                type="text"
                                placeholder="Name des Wichts"
                                value={name}
                                onChange={(e) => setName(e.target.value)}
                            />
                        </div>
                        <div className="popup-input-container">
                            <div className="popup-label">Emoji</div>
                            <div className="popup-emoji-picker">
                                <div className="selected-emoji" onClick={() => setShowPicker(!showPicker)}>
                                    {emoji}
                                </div>
                                {showPicker && (
                                    <div className="picker-container">
                                        <Picker data={data} onEmojiSelect={handleEmojiSelect} />
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                    <div className="popup-subtitle">Gib die Anzahl der Katschings an.</div>
                    <div className="popup-counter-group">
                        <div className="popup-counter minus" onClick={() => setKatschings(katschings > 0 ? katschings - 1 : 0)}>
                            <span>-</span>
                        </div>
                        <input
                            className="popup-counter"
                            type="number"
                            value={katschings}
                            onChange={handleKatschingsChange}
                        />
                        <div className="popup-counter plus" onClick={() => setKatschings(katschings + 1)}>
                            <span>+</span>
                        </div>
                    </div>
                    <input 
                        className="popup-comment" 
                        type="text" 
                        placeholder="Kommentar" 
                        value={comment} 
                        onChange={(e) => setComment(e.target.value)} // Handle comment input
                    />
                    <div className="popup-add-button" onClick={handleAddPlayer}>Wicht hinzufügen</div>
                </div>
            </div>
        </div>
    );
};

export default Popup;

```

Contents of src/components/statistiken/statistics.js:
```
import React, { useState, useEffect } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { DataStore } from 'aws-amplify/datastore';
import { HistoryEntry, Player } from '../../models';
import './statistics.css';

const Statistics = () => {
  const [chartData, setChartData] = useState([]);
  const [players, setPlayers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTooltip, setActiveTooltip] = useState(null);
  const [hiddenPlayers, setHiddenPlayers] = useState(new Set());
  const [allHidden, setAllHidden] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const historyEntries = await DataStore.query(HistoryEntry);
        const playersData = await DataStore.query(Player);
        setPlayers(playersData);

        const playerKatschings = {};
        const allWeeks = new Set();

        // Initialize playerKatschings
        playersData.forEach(player => {
          playerKatschings[player.name] = { 
            history: {}
          };
        });

        // Sort history entries by time in ascending order (oldest first)
        const sortedEntries = historyEntries.sort((a, b) => new Date(a.time) - new Date(b.time));

        sortedEntries.forEach(entry => {
          const date = new Date(entry.time);
          const weekStart = new Date(date.setDate(date.getDate() - date.getDay()));
          const formattedWeek = weekStart.toISOString().split('T')[0];
          allWeeks.add(formattedWeek);

          const processEntry = (playerName, katschingCount) => {
            if (playerName && !isNaN(katschingCount)) {
              if (!playerKatschings[playerName]) {
                playerKatschings[playerName] = { history: {} };
              }
              if (!playerKatschings[playerName].history[formattedWeek]) {
                playerKatschings[playerName].history[formattedWeek] = 0;
              }
              playerKatschings[playerName].history[formattedWeek] += katschingCount;
            }
          };

          // Process history entries
          if (entry.event.includes('wurde als neuer Spieler hinzugefügt')) {
            const match = entry.event.match(/^(.+) wurde als neuer Spieler hinzugefügt\. (\d+) Katsching(?:s)?/);
            if (match) {
              processEntry(match[1], parseInt(match[2]));
            }
          } else if (entry.event.includes('Katsching')) {
            // Updated regex to handle multiple Katschings and plural form
            const matches = entry.event.matchAll(/(\d+) Katsching(?:s)? für (.+?)(?=\.\s\d+|$)/g);
            for (const match of matches) {
              processEntry(match[2].trim(), parseInt(match[1]));
            }
          }
        });

        const sortedWeeks = Array.from(allWeeks).sort();

        const filledData = Object.entries(playerKatschings).map(([playerName, data]) => {
          let runningTotal = 0;
          const filledDataPoints = sortedWeeks.map(week => {
            if (data.history[week] !== undefined) {
              runningTotal += data.history[week];
            }
            return { week, totalKatschings: runningTotal };
          });

          return { playerName, data: filledDataPoints };
        });

        setChartData(filledData);

        // Clustered console logs
    //     console.log('History Entries:', historyEntries);
    //     console.log('Players Data:', playersData);
    //     console.log('Player Katschings:', playerKatschings);
    //     console.log('Filled Data:', filledData);
    //   } catch (error) {
    //     console.error('Error fetching data:', error);
        setError('An error occurred while fetching data. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const colors = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#0088FE', '#00C49F', '#FFBB28', '#FF8042'];

  // Sort chartData by total Katschings in descending order
  const sortedChartData = [...chartData].sort((a, b) => {
    const lastIndexA = a.data.length - 1;
    const lastIndexB = b.data.length - 1;
    return b.data[lastIndexB].totalKatschings - a.data[lastIndexA].totalKatschings;
  });

  const togglePlayerVisibility = (playerName) => {
    setHiddenPlayers(prevHiddenPlayers => {
      const newHiddenPlayers = new Set(prevHiddenPlayers);
      if (newHiddenPlayers.has(playerName)) {
        newHiddenPlayers.delete(playerName);
      } else {
        newHiddenPlayers.add(playerName);
      }
      return newHiddenPlayers;
    });
  };

  const toggleAllPlayers = () => {
    if (allHidden) {
      setHiddenPlayers(new Set());
    } else {
      setHiddenPlayers(new Set(sortedChartData.map(player => player.playerName)));
    }
    setAllHidden(!allHidden);
  };

  const CustomLegend = ({ payload }) => {
    return (
      <div>
        <button onClick={toggleAllPlayers} className="toggle-all-button">
          {allHidden ? 'Alle einblenden' : 'Alle ausblenden'}
        </button>
        <ul className="custom-legend">
          {payload.map((entry, index) => (
            <li
              key={`item-${index}`}
              className={`legend-item ${hiddenPlayers.has(entry.value) ? 'hidden' : ''}`}
              onClick={() => togglePlayerVisibility(entry.value)}
            >
              <span className="legend-color" style={{ backgroundColor: entry.color }}></span>
              <span className="legend-text">{entry.value}</span>
            </li>
          ))}
        </ul>
      </div>
    );
  };

  const handleDotMouseEnter = (data, playerName, color) => {
    setActiveTooltip({
      week: data.payload.week,
      playerName: playerName,
      value: data.payload.totalKatschings,
      color: color
    });
  };

  const handleMouseLeave = () => {
    setActiveTooltip(null);
  };

  const CustomTooltip = () => {
    if (activeTooltip) {
      return (
        <div className="custom-tooltip">
          <p className="label">{`Woche: ${activeTooltip.week}`}</p>
          <p style={{ color: activeTooltip.color }}>
            {`${activeTooltip.playerName}: ${activeTooltip.value}`}
          </p>
        </div>
      );
    }
    return null;
  };

  //console.log('Rendering chart with data:', chartData);

  if (chartData.length === 0) {
    return <div className="statistics-container"><h1>No data available for the chart</h1></div>;
  }

  return (
    <div className="statistics-container">
      <h1>Katschingistik</h1>
      <div className="chart-container">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis 
              dataKey="week" 
              type="category"
              allowDuplicatedCategory={false}
              label={{ value: 'Woche', position: 'insideBottom', offset: -10 }}
            />
            <YAxis label={{ value: 'Total Katschings', angle: -90, position: 'insideLeft' }} />
            <Tooltip content={<CustomTooltip />} />
            <Legend content={<CustomLegend />} />
            {sortedChartData.map((player, index) => (
              <Line
                key={player.playerName}
                data={player.data}
                type="monotone"
                dataKey="totalKatschings"
                name={player.playerName}
                stroke={colors[index % colors.length]}
                strokeOpacity={hiddenPlayers.has(player.playerName) ? 0.2 : 1}
                activeDot={{
                  onMouseEnter: (e, payload) => handleDotMouseEnter(payload, player.playerName, colors[index % colors.length]),
                  onMouseLeave: handleMouseLeave,
                  r: 8
                }}
                dot={false}
              />
            ))}
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

export default Statistics;

```

Contents of src/components/statistiken/statistics.css:
```
.statistics-container {
  width: 85%;
  height: 85vh;
  padding: 20px;
  box-sizing: border-box;
  background-color: #f5f5f5;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  margin: 20px auto;
  display: flex;
  flex-direction: column;
}

/* Media queries for responsive height */
@media screen and (max-width: 1200px) {
  .statistics-container {
    height: 75h;
  }
}

@media screen and (max-width: 992px) {
  .statistics-container {
    height: 70vh;
  }
}

@media screen and (max-width: 768px) {
  .statistics-container {
    height: 80vh;
  }
}

@media screen and (max-width: 576px) {
  .statistics-container {
    height: 75vh;
  }
}

h1 {
  text-align: center;
  color: #333;
  margin-bottom: 20px;
  font-family: 'Montserrat', sans-serif;
}

.content-wrapper {
  display: flex;
  flex-grow: 1;
  overflow: hidden;
}

.player-filter {
  width: 200px;
  overflow-y: auto;
  padding-right: 10px;
  margin-right: 20px;
  border-right: 1px solid #ccc;
}

.player-filter label {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
  font-size: 14px;
}

.player-filter input[type="checkbox"] {
  margin-right: 5px;
}

.katsching-count {
  margin-left: auto;
  font-weight: bold;
}

.chart-container {
  width: 100%;
  height: calc(100% - 120px); /* Increase the subtracted value to make room for the legend */
  margin-bottom: 60px; /* Increase bottom margin */
}

.custom-tooltip {
  background-color: rgba(255, 255, 255, 0.8);
  border: 1px solid #ccc;
  border-radius: 4px;
  padding: 10px;
  transition: none !important;
}

.custom-tooltip .label {
  margin: 0;
  font-weight: bold;
}

.custom-tooltip p {
  margin: 0;
  padding: 3px 0;
}

.recharts-default-tooltip {
  background-color: rgba(255, 255, 255, 0.8) !important;
  border: 1px solid #ccc !important;
  border-radius: 5px !important;
  padding: 10px !important;
}

.recharts-tooltip-label {
  font-weight: bold !important;
  margin-bottom: 5px !important;
}

.recharts-tooltip-item {
  padding: 2px 0 !important;
}

.recharts-legend-wrapper {
  bottom: -40px !important; /* Move the legend down */
}

.recharts-default-legend {
  text-align: center;
}

.recharts-legend-item {
  cursor: pointer !important;
  margin: 0 10px !important; /* Add some horizontal spacing between legend items */
}

.axis-controls {
  display: flex;
  justify-content: center;
  margin-top: 10px;
}

.axis-controls button {
  margin: 0 5px;
  padding: 5px 10px;
  background-color: #f0f0f0;
  border: 1px solid #ccc;
  border-radius: 5px;
  cursor: pointer;
}

.axis-controls button:hover {
  background-color: #e0e0e0;
}

.recharts-tooltip-wrapper {
  transition: none !important;
}

.custom-legend {
  list-style-type: none;
  padding: 0;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  max-width: 100%;

}

.legend-item {
  display: flex;
  align-items: center;
  margin: 0 10px 5px 0;
  cursor: pointer;
  transition: opacity 0.3s ease;
}

.legend-item.hidden {
  opacity: 0.5;
}

.legend-color {
  width: 10px;
  height: 10px;
  margin-right: 5px;
  border-radius: 50%;
}

.legend-text {
  font-size: 12px;
  font-weight: bold;
  white-space: nowrap; /* Prevent text from wrapping */
}

.toggle-all-button {
  margin-bottom: 10px;
  padding: 5px 10px;
  background-color: #f0f0f0;
  border: 1px solid #ccc;
  border-radius: 5px;
  cursor: pointer;
  font-size: 14px;
}

.toggle-all-button:hover {
  background-color: #e0e0e0;
}

```

Contents of src/graphql/subscriptions.js:
```
/* eslint-disable */
// this is an auto generated file. This will be overwritten

export const onCreatePlayer = /* GraphQL */ `
  subscription OnCreatePlayer($filter: ModelSubscriptionPlayerFilterInput) {
    onCreatePlayer(filter: $filter) {
      id
      name
      emoji
      katschings
      lastKatsching
      history {
        nextToken
        startedAt
        __typename
      }
      createdAt
      updatedAt
      _version
      _deleted
      _lastChangedAt
      __typename
    }
  }
`;
export const onUpdatePlayer = /* GraphQL */ `
  subscription OnUpdatePlayer($filter: ModelSubscriptionPlayerFilterInput) {
    onUpdatePlayer(filter: $filter) {
      id
      name
      emoji
      katschings
      lastKatsching
      history {
        nextToken
        startedAt
        __typename
      }
      createdAt
      updatedAt
      _version
      _deleted
      _lastChangedAt
      __typename
    }
  }
`;
export const onDeletePlayer = /* GraphQL */ `
  subscription OnDeletePlayer($filter: ModelSubscriptionPlayerFilterInput) {
    onDeletePlayer(filter: $filter) {
      id
      name
      emoji
      katschings
      lastKatsching
      history {
        nextToken
        startedAt
        __typename
      }
      createdAt
      updatedAt
      _version
      _deleted
      _lastChangedAt
      __typename
    }
  }
`;
export const onCreateHistoryEntry = /* GraphQL */ `
  subscription OnCreateHistoryEntry(
    $filter: ModelSubscriptionHistoryEntryFilterInput
  ) {
    onCreateHistoryEntry(filter: $filter) {
      id
      playerId
      time
      event
      comments
      createdAt
      updatedAt
      _version
      _deleted
      _lastChangedAt
      __typename
    }
  }
`;
export const onUpdateHistoryEntry = /* GraphQL */ `
  subscription OnUpdateHistoryEntry(
    $filter: ModelSubscriptionHistoryEntryFilterInput
  ) {
    onUpdateHistoryEntry(filter: $filter) {
      id
      playerId
      time
      event
      comments
      createdAt
      updatedAt
      _version
      _deleted
      _lastChangedAt
      __typename
    }
  }
`;
export const onDeleteHistoryEntry = /* GraphQL */ `
  subscription OnDeleteHistoryEntry(
    $filter: ModelSubscriptionHistoryEntryFilterInput
  ) {
    onDeleteHistoryEntry(filter: $filter) {
      id
      playerId
      time
      event
      comments
      createdAt
      updatedAt
      _version
      _deleted
      _lastChangedAt
      __typename
    }
  }
`;

```

Contents of src/graphql/mutations.js:
```
/* eslint-disable */
// this is an auto generated file. This will be overwritten

export const createPlayer = /* GraphQL */ `
  mutation CreatePlayer(
    $input: CreatePlayerInput!
    $condition: ModelPlayerConditionInput
  ) {
    createPlayer(input: $input, condition: $condition) {
      id
      name
      emoji
      katschings
      lastKatsching
      history {
        nextToken
        startedAt
        __typename
      }
      createdAt
      updatedAt
      _version
      _deleted
      _lastChangedAt
      __typename
    }
  }
`;
export const updatePlayer = /* GraphQL */ `
  mutation UpdatePlayer(
    $input: UpdatePlayerInput!
    $condition: ModelPlayerConditionInput
  ) {
    updatePlayer(input: $input, condition: $condition) {
      id
      name
      emoji
      katschings
      lastKatsching
      history {
        nextToken
        startedAt
        __typename
      }
      createdAt
      updatedAt
      _version
      _deleted
      _lastChangedAt
      __typename
    }
  }
`;
export const deletePlayer = /* GraphQL */ `
  mutation DeletePlayer(
    $input: DeletePlayerInput!
    $condition: ModelPlayerConditionInput
  ) {
    deletePlayer(input: $input, condition: $condition) {
      id
      name
      emoji
      katschings
      lastKatsching
      history {
        nextToken
        startedAt
        __typename
      }
      createdAt
      updatedAt
      _version
      _deleted
      _lastChangedAt
      __typename
    }
  }
`;
export const createHistoryEntry = /* GraphQL */ `
  mutation CreateHistoryEntry(
    $input: CreateHistoryEntryInput!
    $condition: ModelHistoryEntryConditionInput
  ) {
    createHistoryEntry(input: $input, condition: $condition) {
      id
      playerId
      time
      event
      comments
      createdAt
      updatedAt
      _version
      _deleted
      _lastChangedAt
      __typename
    }
  }
`;
export const updateHistoryEntry = /* GraphQL */ `
  mutation UpdateHistoryEntry(
    $input: UpdateHistoryEntryInput!
    $condition: ModelHistoryEntryConditionInput
  ) {
    updateHistoryEntry(input: $input, condition: $condition) {
      id
      playerId
      time
      event
      comments
      createdAt
      updatedAt
      _version
      _deleted
      _lastChangedAt
      __typename
    }
  }
`;
export const deleteHistoryEntry = /* GraphQL */ `
  mutation DeleteHistoryEntry(
    $input: DeleteHistoryEntryInput!
    $condition: ModelHistoryEntryConditionInput
  ) {
    deleteHistoryEntry(input: $input, condition: $condition) {
      id
      playerId
      time
      event
      comments
      createdAt
      updatedAt
      _version
      _deleted
      _lastChangedAt
      __typename
    }
  }
`;

```

Contents of src/graphql/schema.json:
```
{
  "data" : {
    "__schema" : {
      "queryType" : {
        "name" : "Query"
      },
      "mutationType" : {
        "name" : "Mutation"
      },
      "subscriptionType" : {
        "name" : "Subscription"
      },
      "types" : [ {
        "kind" : "OBJECT",
        "name" : "Query",
        "description" : null,
        "fields" : [ {
          "name" : "getPlayer",
          "description" : null,
          "args" : [ {
            "name" : "id",
            "description" : null,
            "type" : {
              "kind" : "NON_NULL",
              "name" : null,
              "ofType" : {
                "kind" : "SCALAR",
                "name" : "ID",
                "ofType" : null
              }
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "Player",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "listPlayers",
          "description" : null,
          "args" : [ {
            "name" : "filter",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelPlayerFilterInput",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "limit",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "Int",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "nextToken",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "ModelPlayerConnection",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "syncPlayers",
          "description" : null,
          "args" : [ {
            "name" : "filter",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelPlayerFilterInput",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "limit",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "Int",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "nextToken",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "lastSync",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "AWSTimestamp",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "ModelPlayerConnection",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "getHistoryEntry",
          "description" : null,
          "args" : [ {
            "name" : "id",
            "description" : null,
            "type" : {
              "kind" : "NON_NULL",
              "name" : null,
              "ofType" : {
                "kind" : "SCALAR",
                "name" : "ID",
                "ofType" : null
              }
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "HistoryEntry",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "listHistoryEntries",
          "description" : null,
          "args" : [ {
            "name" : "filter",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelHistoryEntryFilterInput",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "limit",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "Int",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "nextToken",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "ModelHistoryEntryConnection",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "syncHistoryEntries",
          "description" : null,
          "args" : [ {
            "name" : "filter",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelHistoryEntryFilterInput",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "limit",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "Int",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "nextToken",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "lastSync",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "AWSTimestamp",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "ModelHistoryEntryConnection",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "historyEntriesByPlayerIdAndTime",
          "description" : null,
          "args" : [ {
            "name" : "playerId",
            "description" : null,
            "type" : {
              "kind" : "NON_NULL",
              "name" : null,
              "ofType" : {
                "kind" : "SCALAR",
                "name" : "ID",
                "ofType" : null
              }
            },
            "defaultValue" : null
          }, {
            "name" : "time",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelStringKeyConditionInput",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "sortDirection",
            "description" : null,
            "type" : {
              "kind" : "ENUM",
              "name" : "ModelSortDirection",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "filter",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelHistoryEntryFilterInput",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "limit",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "Int",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "nextToken",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "ModelHistoryEntryConnection",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "inputFields" : null,
        "interfaces" : [ ],
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "OBJECT",
        "name" : "Player",
        "description" : null,
        "fields" : [ {
          "name" : "id",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "ID",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "name",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "emoji",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "katschings",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Int",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "lastKatsching",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "AWSDateTime",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "history",
          "description" : null,
          "args" : [ {
            "name" : "time",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelStringKeyConditionInput",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "filter",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelHistoryEntryFilterInput",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "sortDirection",
            "description" : null,
            "type" : {
              "kind" : "ENUM",
              "name" : "ModelSortDirection",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "limit",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "Int",
              "ofType" : null
            },
            "defaultValue" : null
          }, {
            "name" : "nextToken",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "ModelHistoryEntryConnection",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "createdAt",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "AWSDateTime",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "updatedAt",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "AWSDateTime",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "_version",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Int",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "_deleted",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "Boolean",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "_lastChangedAt",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "AWSTimestamp",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "inputFields" : null,
        "interfaces" : [ ],
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "SCALAR",
        "name" : "ID",
        "description" : "Built-in ID",
        "fields" : null,
        "inputFields" : null,
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "SCALAR",
        "name" : "String",
        "description" : "Built-in String",
        "fields" : null,
        "inputFields" : null,
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "SCALAR",
        "name" : "Int",
        "description" : "Built-in Int",
        "fields" : null,
        "inputFields" : null,
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "SCALAR",
        "name" : "AWSDateTime",
        "description" : "The `AWSDateTime` scalar type provided by AWS AppSync, represents a valid ***extended*** [ISO 8601 DateTime](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) string. In other words, this scalar type accepts datetime strings of the form `YYYY-MM-DDThh:mm:ss.SSSZ`.  The scalar can also accept \"negative years\" of the form `-YYYY` which correspond to years before `0000`. For example, \"**-2017-01-01T00:00Z**\" and \"**-9999-01-01T00:00Z**\" are both valid datetime strings.  The field after the two digit seconds field is a nanoseconds field. It can accept between 1 and 9 digits. So, for example, \"**1970-01-01T12:00:00.2Z**\", \"**1970-01-01T12:00:00.277Z**\" and \"**1970-01-01T12:00:00.123456789Z**\" are all valid datetime strings.  The seconds and nanoseconds fields are optional (the seconds field must be specified if the nanoseconds field is to be used).  The [time zone offset](https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators) is compulsory for this scalar. The time zone offset must either be `Z` (representing the UTC time zone) or be in the format `±hh:mm:ss`. The seconds field in the timezone offset will be considered valid even though it is not part of the ISO 8601 standard.",
        "fields" : null,
        "inputFields" : null,
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "OBJECT",
        "name" : "ModelHistoryEntryConnection",
        "description" : null,
        "fields" : [ {
          "name" : "items",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "LIST",
              "name" : null,
              "ofType" : {
                "kind" : "OBJECT",
                "name" : "HistoryEntry",
                "ofType" : null
              }
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "nextToken",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "startedAt",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "AWSTimestamp",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "inputFields" : null,
        "interfaces" : [ ],
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "OBJECT",
        "name" : "HistoryEntry",
        "description" : null,
        "fields" : [ {
          "name" : "id",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "ID",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "playerId",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "ID",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "time",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "AWSDateTime",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "event",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "comments",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "createdAt",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "AWSDateTime",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "updatedAt",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "AWSDateTime",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "_version",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Int",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "_deleted",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "Boolean",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "_lastChangedAt",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "AWSTimestamp",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "inputFields" : null,
        "interfaces" : [ ],
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "SCALAR",
        "name" : "Boolean",
        "description" : "Built-in Boolean",
        "fields" : null,
        "inputFields" : null,
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "SCALAR",
        "name" : "AWSTimestamp",
        "description" : "The `AWSTimestamp` scalar type provided by AWS AppSync, represents the number of seconds that have elapsed since `1970-01-01T00:00Z`. Negative values are also accepted and these represent the number of seconds till `1970-01-01T00:00Z`.  Timestamps are serialized and deserialized as integers. The minimum supported timestamp value is **`-31557014167219200`** which corresponds to `-1000000000-01-01T00:00Z`. The maximum supported timestamp value is **`31556889864403199`** which corresponds to `1000000000-12-31T23:59:59.999999999Z`.",
        "fields" : null,
        "inputFields" : null,
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelStringKeyConditionInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "eq",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "le",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "lt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "ge",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "gt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "between",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "beginsWith",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelHistoryEntryFilterInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "id",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelIDInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "playerId",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelIDInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "time",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "event",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "comments",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "createdAt",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "updatedAt",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "and",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelHistoryEntryFilterInput",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "or",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelHistoryEntryFilterInput",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "not",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelHistoryEntryFilterInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "_deleted",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelBooleanInput",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelIDInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "ne",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "eq",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "le",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "lt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "ge",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "gt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "contains",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "notContains",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "between",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "ID",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "beginsWith",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "attributeExists",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Boolean",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "attributeType",
          "description" : null,
          "type" : {
            "kind" : "ENUM",
            "name" : "ModelAttributeTypes",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "size",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSizeInput",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "ENUM",
        "name" : "ModelAttributeTypes",
        "description" : null,
        "fields" : null,
        "inputFields" : null,
        "interfaces" : null,
        "enumValues" : [ {
          "name" : "binary",
          "description" : null,
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "binarySet",
          "description" : null,
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "bool",
          "description" : null,
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "list",
          "description" : null,
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "map",
          "description" : null,
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "number",
          "description" : null,
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "numberSet",
          "description" : null,
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "string",
          "description" : null,
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "stringSet",
          "description" : null,
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "_null",
          "description" : null,
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelSizeInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "ne",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "eq",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "le",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "lt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "ge",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "gt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "between",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Int",
              "ofType" : null
            }
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelStringInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "ne",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "eq",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "le",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "lt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "ge",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "gt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "contains",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "notContains",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "between",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "beginsWith",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "attributeExists",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Boolean",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "attributeType",
          "description" : null,
          "type" : {
            "kind" : "ENUM",
            "name" : "ModelAttributeTypes",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "size",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSizeInput",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelBooleanInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "ne",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Boolean",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "eq",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Boolean",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "attributeExists",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Boolean",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "attributeType",
          "description" : null,
          "type" : {
            "kind" : "ENUM",
            "name" : "ModelAttributeTypes",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "ENUM",
        "name" : "ModelSortDirection",
        "description" : null,
        "fields" : null,
        "inputFields" : null,
        "interfaces" : null,
        "enumValues" : [ {
          "name" : "ASC",
          "description" : null,
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "DESC",
          "description" : null,
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "possibleTypes" : null
      }, {
        "kind" : "OBJECT",
        "name" : "ModelPlayerConnection",
        "description" : null,
        "fields" : [ {
          "name" : "items",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "LIST",
              "name" : null,
              "ofType" : {
                "kind" : "OBJECT",
                "name" : "Player",
                "ofType" : null
              }
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "nextToken",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "startedAt",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "AWSTimestamp",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "inputFields" : null,
        "interfaces" : [ ],
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelPlayerFilterInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "id",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelIDInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "name",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "emoji",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "katschings",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelIntInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "lastKatsching",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "createdAt",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "updatedAt",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "and",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelPlayerFilterInput",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "or",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelPlayerFilterInput",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "not",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelPlayerFilterInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "_deleted",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelBooleanInput",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelIntInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "ne",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "eq",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "le",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "lt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "ge",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "gt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "between",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Int",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "attributeExists",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Boolean",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "attributeType",
          "description" : null,
          "type" : {
            "kind" : "ENUM",
            "name" : "ModelAttributeTypes",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "OBJECT",
        "name" : "Mutation",
        "description" : null,
        "fields" : [ {
          "name" : "createPlayer",
          "description" : null,
          "args" : [ {
            "name" : "input",
            "description" : null,
            "type" : {
              "kind" : "NON_NULL",
              "name" : null,
              "ofType" : {
                "kind" : "INPUT_OBJECT",
                "name" : "CreatePlayerInput",
                "ofType" : null
              }
            },
            "defaultValue" : null
          }, {
            "name" : "condition",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelPlayerConditionInput",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "Player",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "updatePlayer",
          "description" : null,
          "args" : [ {
            "name" : "input",
            "description" : null,
            "type" : {
              "kind" : "NON_NULL",
              "name" : null,
              "ofType" : {
                "kind" : "INPUT_OBJECT",
                "name" : "UpdatePlayerInput",
                "ofType" : null
              }
            },
            "defaultValue" : null
          }, {
            "name" : "condition",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelPlayerConditionInput",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "Player",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "deletePlayer",
          "description" : null,
          "args" : [ {
            "name" : "input",
            "description" : null,
            "type" : {
              "kind" : "NON_NULL",
              "name" : null,
              "ofType" : {
                "kind" : "INPUT_OBJECT",
                "name" : "DeletePlayerInput",
                "ofType" : null
              }
            },
            "defaultValue" : null
          }, {
            "name" : "condition",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelPlayerConditionInput",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "Player",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "createHistoryEntry",
          "description" : null,
          "args" : [ {
            "name" : "input",
            "description" : null,
            "type" : {
              "kind" : "NON_NULL",
              "name" : null,
              "ofType" : {
                "kind" : "INPUT_OBJECT",
                "name" : "CreateHistoryEntryInput",
                "ofType" : null
              }
            },
            "defaultValue" : null
          }, {
            "name" : "condition",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelHistoryEntryConditionInput",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "HistoryEntry",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "updateHistoryEntry",
          "description" : null,
          "args" : [ {
            "name" : "input",
            "description" : null,
            "type" : {
              "kind" : "NON_NULL",
              "name" : null,
              "ofType" : {
                "kind" : "INPUT_OBJECT",
                "name" : "UpdateHistoryEntryInput",
                "ofType" : null
              }
            },
            "defaultValue" : null
          }, {
            "name" : "condition",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelHistoryEntryConditionInput",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "HistoryEntry",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "deleteHistoryEntry",
          "description" : null,
          "args" : [ {
            "name" : "input",
            "description" : null,
            "type" : {
              "kind" : "NON_NULL",
              "name" : null,
              "ofType" : {
                "kind" : "INPUT_OBJECT",
                "name" : "DeleteHistoryEntryInput",
                "ofType" : null
              }
            },
            "defaultValue" : null
          }, {
            "name" : "condition",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelHistoryEntryConditionInput",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "HistoryEntry",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "inputFields" : null,
        "interfaces" : [ ],
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "CreatePlayerInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "id",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "name",
          "description" : null,
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "emoji",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "katschings",
          "description" : null,
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Int",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "lastKatsching",
          "description" : null,
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "AWSDateTime",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "_version",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelPlayerConditionInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "name",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "emoji",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "katschings",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelIntInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "lastKatsching",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "and",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelPlayerConditionInput",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "or",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelPlayerConditionInput",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "not",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelPlayerConditionInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "_deleted",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelBooleanInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "createdAt",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "updatedAt",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "UpdatePlayerInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "id",
          "description" : null,
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "ID",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "name",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "emoji",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "katschings",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "lastKatsching",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "AWSDateTime",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "_version",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "DeletePlayerInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "id",
          "description" : null,
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "ID",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "_version",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "CreateHistoryEntryInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "id",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "playerId",
          "description" : null,
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "ID",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "time",
          "description" : null,
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "AWSDateTime",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "event",
          "description" : null,
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "comments",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "_version",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelHistoryEntryConditionInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "playerId",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelIDInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "time",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "event",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "comments",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "and",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelHistoryEntryConditionInput",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "or",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelHistoryEntryConditionInput",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "not",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelHistoryEntryConditionInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "_deleted",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelBooleanInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "createdAt",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "updatedAt",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "UpdateHistoryEntryInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "id",
          "description" : null,
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "ID",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "playerId",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "time",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "AWSDateTime",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "event",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "comments",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "_version",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "DeleteHistoryEntryInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "id",
          "description" : null,
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "ID",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "_version",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "OBJECT",
        "name" : "Subscription",
        "description" : null,
        "fields" : [ {
          "name" : "onCreatePlayer",
          "description" : null,
          "args" : [ {
            "name" : "filter",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelSubscriptionPlayerFilterInput",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "Player",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "onUpdatePlayer",
          "description" : null,
          "args" : [ {
            "name" : "filter",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelSubscriptionPlayerFilterInput",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "Player",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "onDeletePlayer",
          "description" : null,
          "args" : [ {
            "name" : "filter",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelSubscriptionPlayerFilterInput",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "Player",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "onCreateHistoryEntry",
          "description" : null,
          "args" : [ {
            "name" : "filter",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelSubscriptionHistoryEntryFilterInput",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "HistoryEntry",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "onUpdateHistoryEntry",
          "description" : null,
          "args" : [ {
            "name" : "filter",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelSubscriptionHistoryEntryFilterInput",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "HistoryEntry",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "onDeleteHistoryEntry",
          "description" : null,
          "args" : [ {
            "name" : "filter",
            "description" : null,
            "type" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelSubscriptionHistoryEntryFilterInput",
              "ofType" : null
            },
            "defaultValue" : null
          } ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "HistoryEntry",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "inputFields" : null,
        "interfaces" : [ ],
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelSubscriptionPlayerFilterInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "id",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSubscriptionIDInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "name",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSubscriptionStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "emoji",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSubscriptionStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "katschings",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSubscriptionIntInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "lastKatsching",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSubscriptionStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "createdAt",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSubscriptionStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "updatedAt",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSubscriptionStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "and",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelSubscriptionPlayerFilterInput",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "or",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelSubscriptionPlayerFilterInput",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "_deleted",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelBooleanInput",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelSubscriptionIDInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "ne",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "eq",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "le",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "lt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "ge",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "gt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "contains",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "notContains",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "between",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "ID",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "beginsWith",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "ID",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "in",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "ID",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "notIn",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "ID",
              "ofType" : null
            }
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelSubscriptionStringInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "ne",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "eq",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "le",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "lt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "ge",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "gt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "contains",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "notContains",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "between",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "beginsWith",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "in",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "notIn",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelSubscriptionIntInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "ne",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "eq",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "le",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "lt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "ge",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "gt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Int",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "between",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Int",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "in",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Int",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "notIn",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Int",
              "ofType" : null
            }
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelSubscriptionHistoryEntryFilterInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "id",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSubscriptionIDInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "playerId",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSubscriptionIDInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "time",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSubscriptionStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "event",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSubscriptionStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "comments",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSubscriptionStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "createdAt",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSubscriptionStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "updatedAt",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelSubscriptionStringInput",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "and",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelSubscriptionHistoryEntryFilterInput",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "or",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "INPUT_OBJECT",
              "name" : "ModelSubscriptionHistoryEntryFilterInput",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "_deleted",
          "description" : null,
          "type" : {
            "kind" : "INPUT_OBJECT",
            "name" : "ModelBooleanInput",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelFloatInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "ne",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Float",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "eq",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Float",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "le",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Float",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "lt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Float",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "ge",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Float",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "gt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Float",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "between",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Float",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "attributeExists",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Boolean",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "attributeType",
          "description" : null,
          "type" : {
            "kind" : "ENUM",
            "name" : "ModelAttributeTypes",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "SCALAR",
        "name" : "Float",
        "description" : "Built-in Float",
        "fields" : null,
        "inputFields" : null,
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelSubscriptionFloatInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "ne",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Float",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "eq",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Float",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "le",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Float",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "lt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Float",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "ge",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Float",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "gt",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Float",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "between",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Float",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "in",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Float",
              "ofType" : null
            }
          },
          "defaultValue" : null
        }, {
          "name" : "notIn",
          "description" : null,
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Float",
              "ofType" : null
            }
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "INPUT_OBJECT",
        "name" : "ModelSubscriptionBooleanInput",
        "description" : null,
        "fields" : null,
        "inputFields" : [ {
          "name" : "ne",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Boolean",
            "ofType" : null
          },
          "defaultValue" : null
        }, {
          "name" : "eq",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "Boolean",
            "ofType" : null
          },
          "defaultValue" : null
        } ],
        "interfaces" : null,
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "OBJECT",
        "name" : "__Schema",
        "description" : "A GraphQL Introspection defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, the entry points for query, mutation, and subscription operations.",
        "fields" : [ {
          "name" : "types",
          "description" : "A list of all types supported by this server.",
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "LIST",
              "name" : null,
              "ofType" : {
                "kind" : "NON_NULL",
                "name" : null,
                "ofType" : {
                  "kind" : "OBJECT",
                  "name" : "__Type",
                  "ofType" : null
                }
              }
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "queryType",
          "description" : "The type that query operations will be rooted at.",
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "OBJECT",
              "name" : "__Type",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "mutationType",
          "description" : "If this server supports mutation, the type that mutation operations will be rooted at.",
          "args" : [ ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "__Type",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "directives",
          "description" : "'A list of all directives supported by this server.",
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "LIST",
              "name" : null,
              "ofType" : {
                "kind" : "NON_NULL",
                "name" : null,
                "ofType" : {
                  "kind" : "OBJECT",
                  "name" : "__Directive",
                  "ofType" : null
                }
              }
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "subscriptionType",
          "description" : "'If this server support subscription, the type that subscription operations will be rooted at.",
          "args" : [ ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "__Type",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "inputFields" : null,
        "interfaces" : [ ],
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "OBJECT",
        "name" : "__Type",
        "description" : null,
        "fields" : [ {
          "name" : "kind",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "ENUM",
              "name" : "__TypeKind",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "name",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "description",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "fields",
          "description" : null,
          "args" : [ {
            "name" : "includeDeprecated",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "Boolean",
              "ofType" : null
            },
            "defaultValue" : "false"
          } ],
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "NON_NULL",
              "name" : null,
              "ofType" : {
                "kind" : "OBJECT",
                "name" : "__Field",
                "ofType" : null
              }
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "interfaces",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "NON_NULL",
              "name" : null,
              "ofType" : {
                "kind" : "OBJECT",
                "name" : "__Type",
                "ofType" : null
              }
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "possibleTypes",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "NON_NULL",
              "name" : null,
              "ofType" : {
                "kind" : "OBJECT",
                "name" : "__Type",
                "ofType" : null
              }
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "enumValues",
          "description" : null,
          "args" : [ {
            "name" : "includeDeprecated",
            "description" : null,
            "type" : {
              "kind" : "SCALAR",
              "name" : "Boolean",
              "ofType" : null
            },
            "defaultValue" : "false"
          } ],
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "NON_NULL",
              "name" : null,
              "ofType" : {
                "kind" : "OBJECT",
                "name" : "__EnumValue",
                "ofType" : null
              }
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "inputFields",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "NON_NULL",
              "name" : null,
              "ofType" : {
                "kind" : "OBJECT",
                "name" : "__InputValue",
                "ofType" : null
              }
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "ofType",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "OBJECT",
            "name" : "__Type",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "inputFields" : null,
        "interfaces" : [ ],
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "ENUM",
        "name" : "__TypeKind",
        "description" : "An enum describing what kind of type a given __Type is",
        "fields" : null,
        "inputFields" : null,
        "interfaces" : null,
        "enumValues" : [ {
          "name" : "SCALAR",
          "description" : "Indicates this type is a scalar.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "OBJECT",
          "description" : "Indicates this type is an object. `fields` and `interfaces` are valid fields.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "INTERFACE",
          "description" : "Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "UNION",
          "description" : "Indicates this type is a union. `possibleTypes` is a valid field.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "ENUM",
          "description" : "Indicates this type is an enum. `enumValues` is a valid field.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "INPUT_OBJECT",
          "description" : "Indicates this type is an input object. `inputFields` is a valid field.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "LIST",
          "description" : "Indicates this type is a list. `ofType` is a valid field.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "NON_NULL",
          "description" : "Indicates this type is a non-null. `ofType` is a valid field.",
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "possibleTypes" : null
      }, {
        "kind" : "OBJECT",
        "name" : "__Field",
        "description" : null,
        "fields" : [ {
          "name" : "name",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "description",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "args",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "LIST",
              "name" : null,
              "ofType" : {
                "kind" : "NON_NULL",
                "name" : null,
                "ofType" : {
                  "kind" : "OBJECT",
                  "name" : "__InputValue",
                  "ofType" : null
                }
              }
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "type",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "OBJECT",
              "name" : "__Type",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "isDeprecated",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Boolean",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "deprecationReason",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "inputFields" : null,
        "interfaces" : [ ],
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "OBJECT",
        "name" : "__InputValue",
        "description" : null,
        "fields" : [ {
          "name" : "name",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "description",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "type",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "OBJECT",
              "name" : "__Type",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "defaultValue",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "inputFields" : null,
        "interfaces" : [ ],
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "OBJECT",
        "name" : "__EnumValue",
        "description" : null,
        "fields" : [ {
          "name" : "name",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "description",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "isDeprecated",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Boolean",
              "ofType" : null
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "deprecationReason",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "inputFields" : null,
        "interfaces" : [ ],
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "OBJECT",
        "name" : "__Directive",
        "description" : null,
        "fields" : [ {
          "name" : "name",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "description",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "locations",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "NON_NULL",
              "name" : null,
              "ofType" : {
                "kind" : "ENUM",
                "name" : "__DirectiveLocation",
                "ofType" : null
              }
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "args",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "LIST",
              "name" : null,
              "ofType" : {
                "kind" : "NON_NULL",
                "name" : null,
                "ofType" : {
                  "kind" : "OBJECT",
                  "name" : "__InputValue",
                  "ofType" : null
                }
              }
            }
          },
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "onOperation",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "Boolean",
            "ofType" : null
          },
          "isDeprecated" : true,
          "deprecationReason" : "Use `locations`."
        }, {
          "name" : "onFragment",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "Boolean",
            "ofType" : null
          },
          "isDeprecated" : true,
          "deprecationReason" : "Use `locations`."
        }, {
          "name" : "onField",
          "description" : null,
          "args" : [ ],
          "type" : {
            "kind" : "SCALAR",
            "name" : "Boolean",
            "ofType" : null
          },
          "isDeprecated" : true,
          "deprecationReason" : "Use `locations`."
        } ],
        "inputFields" : null,
        "interfaces" : [ ],
        "enumValues" : null,
        "possibleTypes" : null
      }, {
        "kind" : "ENUM",
        "name" : "__DirectiveLocation",
        "description" : "An enum describing valid locations where a directive can be placed",
        "fields" : null,
        "inputFields" : null,
        "interfaces" : null,
        "enumValues" : [ {
          "name" : "QUERY",
          "description" : "Indicates the directive is valid on queries.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "MUTATION",
          "description" : "Indicates the directive is valid on mutations.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "FIELD",
          "description" : "Indicates the directive is valid on fields.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "FRAGMENT_DEFINITION",
          "description" : "Indicates the directive is valid on fragment definitions.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "FRAGMENT_SPREAD",
          "description" : "Indicates the directive is valid on fragment spreads.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "INLINE_FRAGMENT",
          "description" : "Indicates the directive is valid on inline fragments.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "SCHEMA",
          "description" : "Indicates the directive is valid on a schema SDL definition.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "SCALAR",
          "description" : "Indicates the directive is valid on a scalar SDL definition.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "OBJECT",
          "description" : "Indicates the directive is valid on an object SDL definition.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "FIELD_DEFINITION",
          "description" : "Indicates the directive is valid on a field SDL definition.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "ARGUMENT_DEFINITION",
          "description" : "Indicates the directive is valid on a field argument SDL definition.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "INTERFACE",
          "description" : "Indicates the directive is valid on an interface SDL definition.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "UNION",
          "description" : "Indicates the directive is valid on an union SDL definition.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "ENUM",
          "description" : "Indicates the directive is valid on an enum SDL definition.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "ENUM_VALUE",
          "description" : "Indicates the directive is valid on an enum value SDL definition.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "INPUT_OBJECT",
          "description" : "Indicates the directive is valid on an input object SDL definition.",
          "isDeprecated" : false,
          "deprecationReason" : null
        }, {
          "name" : "INPUT_FIELD_DEFINITION",
          "description" : "Indicates the directive is valid on an input object field SDL definition.",
          "isDeprecated" : false,
          "deprecationReason" : null
        } ],
        "possibleTypes" : null
      } ],
      "directives" : [ {
        "name" : "include",
        "description" : "Directs the executor to include this field or fragment only when the `if` argument is true",
        "locations" : [ "FIELD", "FRAGMENT_SPREAD", "INLINE_FRAGMENT" ],
        "args" : [ {
          "name" : "if",
          "description" : "Included when true.",
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Boolean",
              "ofType" : null
            }
          },
          "defaultValue" : null
        } ],
        "onOperation" : false,
        "onFragment" : true,
        "onField" : true
      }, {
        "name" : "skip",
        "description" : "Directs the executor to skip this field or fragment when the `if`'argument is true.",
        "locations" : [ "FIELD", "FRAGMENT_SPREAD", "INLINE_FRAGMENT" ],
        "args" : [ {
          "name" : "if",
          "description" : "Skipped when true.",
          "type" : {
            "kind" : "NON_NULL",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "Boolean",
              "ofType" : null
            }
          },
          "defaultValue" : null
        } ],
        "onOperation" : false,
        "onFragment" : true,
        "onField" : true
      }, {
        "name" : "defer",
        "description" : "This directive allows results to be deferred during execution",
        "locations" : [ "FIELD" ],
        "args" : [ ],
        "onOperation" : false,
        "onFragment" : false,
        "onField" : true
      }, {
        "name" : "aws_oidc",
        "description" : "Tells the service this field/object has access authorized by an OIDC token.",
        "locations" : [ "OBJECT", "FIELD_DEFINITION" ],
        "args" : [ ],
        "onOperation" : false,
        "onFragment" : false,
        "onField" : false
      }, {
        "name" : "aws_auth",
        "description" : "Directs the schema to enforce authorization on a field",
        "locations" : [ "FIELD_DEFINITION" ],
        "args" : [ {
          "name" : "cognito_groups",
          "description" : "List of cognito user pool groups which have access on this field",
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "defaultValue" : null
        } ],
        "onOperation" : false,
        "onFragment" : false,
        "onField" : false
      }, {
        "name" : "aws_transform",
        "description" : "Indicates that the schema is allowed to be further processed by supported type/field-level directives.",
        "locations" : [ "SCHEMA" ],
        "args" : [ ],
        "onOperation" : false,
        "onFragment" : false,
        "onField" : false
      }, {
        "name" : "aws_subscribe",
        "description" : "Tells the service which mutation triggers this subscription.",
        "locations" : [ "FIELD_DEFINITION" ],
        "args" : [ {
          "name" : "mutations",
          "description" : "List of mutations which will trigger this subscription when they are called.",
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "defaultValue" : null
        } ],
        "onOperation" : false,
        "onFragment" : false,
        "onField" : false
      }, {
        "name" : "aws_cognito_user_pools",
        "description" : "Tells the service this field/object has access authorized by a Cognito User Pools token.",
        "locations" : [ "OBJECT", "FIELD_DEFINITION" ],
        "args" : [ {
          "name" : "cognito_groups",
          "description" : "List of cognito user pool groups which have access on this field",
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "defaultValue" : null
        } ],
        "onOperation" : false,
        "onFragment" : false,
        "onField" : false
      }, {
        "name" : "aws_iam",
        "description" : "Tells the service this field/object has access authorized by sigv4 signing.",
        "locations" : [ "OBJECT", "FIELD_DEFINITION" ],
        "args" : [ ],
        "onOperation" : false,
        "onFragment" : false,
        "onField" : false
      }, {
        "name" : "aws_lambda",
        "description" : "Tells the service this field/object has access authorized by a Lambda Authorizer.",
        "locations" : [ "OBJECT", "FIELD_DEFINITION" ],
        "args" : [ ],
        "onOperation" : false,
        "onFragment" : false,
        "onField" : false
      }, {
        "name" : "aws_api_key",
        "description" : "Tells the service this field/object has access authorized by an API key.",
        "locations" : [ "OBJECT", "FIELD_DEFINITION" ],
        "args" : [ ],
        "onOperation" : false,
        "onFragment" : false,
        "onField" : false
      }, {
        "name" : "deprecated",
        "description" : null,
        "locations" : [ "FIELD_DEFINITION", "ENUM_VALUE" ],
        "args" : [ {
          "name" : "reason",
          "description" : null,
          "type" : {
            "kind" : "SCALAR",
            "name" : "String",
            "ofType" : null
          },
          "defaultValue" : "\"No longer supported\""
        } ],
        "onOperation" : false,
        "onFragment" : false,
        "onField" : false
      }, {
        "name" : "aws_publish",
        "description" : "Tells the service which subscriptions will be published to when this mutation is called. This directive is deprecated use @aws_susbscribe directive instead.",
        "locations" : [ "FIELD_DEFINITION" ],
        "args" : [ {
          "name" : "subscriptions",
          "description" : "List of subscriptions which will be published to when this mutation is called.",
          "type" : {
            "kind" : "LIST",
            "name" : null,
            "ofType" : {
              "kind" : "SCALAR",
              "name" : "String",
              "ofType" : null
            }
          },
          "defaultValue" : null
        } ],
        "onOperation" : false,
        "onFragment" : false,
        "onField" : false
      } ]
    }
  }
}
```

Contents of src/graphql/queries.js:
```
/* eslint-disable */
// this is an auto generated file. This will be overwritten

export const getPlayer = /* GraphQL */ `
  query GetPlayer($id: ID!) {
    getPlayer(id: $id) {
      id
      name
      emoji
      katschings
      lastKatsching
      history {
        nextToken
        startedAt
        __typename
      }
      createdAt
      updatedAt
      _version
      _deleted
      _lastChangedAt
      __typename
    }
  }
`;
export const listPlayers = /* GraphQL */ `
  query ListPlayers(
    $filter: ModelPlayerFilterInput
    $limit: Int
    $nextToken: String
  ) {
    listPlayers(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        name
        emoji
        katschings
        lastKatsching
        createdAt
        updatedAt
        _version
        _deleted
        _lastChangedAt
        __typename
      }
      nextToken
      startedAt
      __typename
    }
  }
`;
export const syncPlayers = /* GraphQL */ `
  query SyncPlayers(
    $filter: ModelPlayerFilterInput
    $limit: Int
    $nextToken: String
    $lastSync: AWSTimestamp
  ) {
    syncPlayers(
      filter: $filter
      limit: $limit
      nextToken: $nextToken
      lastSync: $lastSync
    ) {
      items {
        id
        name
        emoji
        katschings
        lastKatsching
        createdAt
        updatedAt
        _version
        _deleted
        _lastChangedAt
        __typename
      }
      nextToken
      startedAt
      __typename
    }
  }
`;
export const getHistoryEntry = /* GraphQL */ `
  query GetHistoryEntry($id: ID!) {
    getHistoryEntry(id: $id) {
      id
      playerId
      time
      event
      comments
      createdAt
      updatedAt
      _version
      _deleted
      _lastChangedAt
      __typename
    }
  }
`;
export const listHistoryEntries = /* GraphQL */ `
  query ListHistoryEntries(
    $filter: ModelHistoryEntryFilterInput
    $limit: Int
    $nextToken: String
  ) {
    listHistoryEntries(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        playerId
        time
        event
        comments
        createdAt
        updatedAt
        _version
        _deleted
        _lastChangedAt
        __typename
      }
      nextToken
      startedAt
      __typename
    }
  }
`;
export const syncHistoryEntries = /* GraphQL */ `
  query SyncHistoryEntries(
    $filter: ModelHistoryEntryFilterInput
    $limit: Int
    $nextToken: String
    $lastSync: AWSTimestamp
  ) {
    syncHistoryEntries(
      filter: $filter
      limit: $limit
      nextToken: $nextToken
      lastSync: $lastSync
    ) {
      items {
        id
        playerId
        time
        event
        comments
        createdAt
        updatedAt
        _version
        _deleted
        _lastChangedAt
        __typename
      }
      nextToken
      startedAt
      __typename
    }
  }
`;
export const historyEntriesByPlayerIdAndTime = /* GraphQL */ `
  query HistoryEntriesByPlayerIdAndTime(
    $playerId: ID!
    $time: ModelStringKeyConditionInput
    $sortDirection: ModelSortDirection
    $filter: ModelHistoryEntryFilterInput
    $limit: Int
    $nextToken: String
  ) {
    historyEntriesByPlayerIdAndTime(
      playerId: $playerId
      time: $time
      sortDirection: $sortDirection
      filter: $filter
      limit: $limit
      nextToken: $nextToken
    ) {
      items {
        id
        playerId
        time
        event
        comments
        createdAt
        updatedAt
        _version
        _deleted
        _lastChangedAt
        __typename
      }
      nextToken
      startedAt
      __typename
    }
  }
`;

```

